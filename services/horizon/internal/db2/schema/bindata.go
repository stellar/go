// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/10_add_trades_price.sql
// migrations/11_add_trades_account_index.sql
// migrations/12_asset_stats_amount_string.sql
// migrations/13_trade_offer_ids.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// migrations/5_create_trades_table.sql
// migrations/6_create_assets_table.sql
// migrations/7_modify_trades_table.sql
// migrations/8_add_aggregators.sql
// migrations/8_create_asset_stats_table.sql
// migrations/9_add_header_xdr.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5c\x6b\x6f\xdb\xb8\xd2\xfe\x9e\x5f\x41\x2c\x0a\xd8\x01\x9c\xbe\x96\x93\x38\xb7\x6d\x01\xaf\xa3\xa6\xc6\xba\x4a\xd7\x96\xdf\x6e\x51\x14\x04\x2d\xd1\x36\x4f\x65\x51\xa5\xe8\x6e\xb2\x07\xe7\xbf\x1f\xe8\x6a\x5d\x48\x51\xb2\x95\xee\xf9\xd6\x58\xa3\x67\x9e\x19\xce\x70\xc8\x21\xd5\xb3\xb3\x93\xb3\x33\xf0\x91\xfa\x7c\xcd\xf0\xfc\x8f\x29\xb0\x11\x47\x4b\xe4\x63\x60\xef\xb6\xde\xc9\xd9\xd9\x49\xf0\xfc\x7e\xb7\xf5\xb0\x0d\x56\x8c\x6e\xf7\x02\x3f\x30\xf3\x09\x75\xc1\xcd\xeb\xe1\xeb\x61\x46\x6a\xf9\x0c\xbc\x35\x0c\x5e\x2f\x88\x9c\xcc\x75\x13\xf8\x1c\x71\xbc\xc5\x2e\x87\x9c\x6c\x31\xdd\x71\xf0\x06\xf4\xef\xc2\x47\x0e\xb5\xbe\x95\x7f\xb5\x1c\x12\x48\x63\xd7\xa2\x36\x71\xd7\xe0\x0d\xe8\x2c\xcc\x77\xd7\x9d\xbb\x04\xce\xb5\x11\xb3\xa1\x45\xdd\x15\x65\x5b\xe2\xae\xa1\xcf\x19\x71\xd7\x3e\x78\x03\xa8\x1b\x63\x6c\xb0\xf5\x0d\xae\x76\xae\xc5\x09\x75\xe1\x92\xda\x04\x07\xcf\x57\xc8\xf1\x71\x4e\xcd\x96\xb8\x70\x8b\x7d\x1f\xad\x43\x81\xbf\x10\x73\x89\xbb\xbe\x8b\xb9\x63\xc4\xac\x0d\xf4\x10\xdf\x80\x37\xc0\xdb\x2d\x1d\x62\xf5\x02\x63\x2d\xc4\x91\x43\x03\xb1\xc8\x9f\x06\xda\xe2\x5b\xb0\x22\xcc\xe7\x10\xad\xd7\x5d\xe4\x3e\x63\x27\xb4\xba\x07\xf6\xff\x3e\xbd\x03\xe6\xb3\x87\x6f\xc1\xbb\x85\x31\x36\x27\x8f\xc6\x1d\x98\x5b\x1b\xbc\x45\xb7\x31\xf6\x1d\x78\xfc\xcb\xc5\xec\x16\x9c\x85\x03\x31\x9e\xe9\x23\x53\x4f\xa5\xd5\xf8\x60\xa6\x9b\x8b\x99\x31\xcf\xfc\x76\x02\x00\x00\xd3\x91\xf1\xb0\x18\x3d\xe8\xc0\xff\xee\x80\xc9\x87\x0f\x0b\x73\xf4\xdb\x54\x07\x73\x73\x36\x19\x9b\xa1\xc4\x68\x0e\x5e\xc1\x57\x60\xae\x4f\xf5\xb1\x09\x5e\x69\xc1\x5f\x77\x27\x79\xf3\x1c\xf4\xa2\xd6\xa9\xe0\x5b\x33\x6e\x20\x32\x6e\x8b\x9e\xa0\xc7\x88\x85\x43\x0a\xee\x6e\x8b\x19\xb1\xbe\x7c\xed\x81\xf4\x9f\xc7\xda\x57\x43\x43\x6a\x62\xfa\xd3\x41\x16\x76\x4f\x00\x18\x8f\xe6\x3a\xf8\xf4\x5e\x37\xc0\x2b\xed\x8b\xf6\xf5\xff\x5e\x69\x5f\x06\x5f\xdf\xbe\x1a\x84\xff\x1e\x7c\x19\x7c\x05\x66\xf4\x10\xe8\xd3\xb9\x1e\x38\x45\x37\xee\x4f\x85\x9e\x21\xee\x4b\x7b\x46\xad\xe1\xa5\x3d\xf3\xeb\x21\x9e\x09\xf3\xb1\x2b\xc8\x80\xd1\xc3\xc3\x4c\x7f\x18\x99\x7a\x3d\x47\xa4\xe2\x65\xc4\x90\x31\x00\xf3\xc0\x57\xc1\xfc\x95\xcc\x00\xbd\xe8\x67\xf3\xf3\x47\x1d\xbc\xc9\x66\xc4\xa9\x28\x6b\x5b\xe5\x58\x04\x2c\x50\x4c\xd2\xb8\x3e\xc3\x34\x31\xba\xe5\x88\x3a\x98\xa5\x08\xb4\xc0\x34\x97\x90\x79\xba\xfb\x28\x2b\xb3\x4d\x82\xb5\x55\xb6\x02\xd0\x22\xdb\x6c\x92\x54\xb2\x0d\x2a\x97\x8d\x57\x68\xe7\x70\xc8\xd1\xd2\xc1\xbe\x87\x2c\x1c\xd4\xd1\xce\x5d\xfe\xe9\x5f\x84\x6f\x20\x25\x76\xa6\x34\xe6\x6c\x45\xbe\x8f\x39\x0c\x2a\xb8\x9f\x98\x18\x26\x58\x3d\xf3\xa2\x5c\xcc\x60\xc4\x16\x11\x1b\x2c\xc9\x9a\xb8\x1c\x18\x8f\x26\x30\x16\xd3\x69\x64\x0e\xda\xd2\x9d\xcb\x81\xb5\x41\x0c\x59\x1c\x33\xf0\x03\xb1\xe7\x60\x05\x90\x17\x73\x77\x5b\x88\x2c\x2b\x90\xf5\x01\x71\x39\x5e\x63\x56\x10\x59\x39\x68\xed\x03\x7f\x8b\x1c\xa7\xac\x86\xd3\xad\x53\x56\xd2\x1d\x5e\x9c\xa6\x82\xe5\x51\x5f\x53\xe6\xc1\x2d\x59\x33\x14\x2c\x28\x0e\xf7\x46\x01\x67\xef\x11\x8e\x9f\x4a\xfe\xf0\x3c\x87\x60\x1b\x22\x0e\x82\x45\x92\xcf\xd1\xd6\x03\xc1\x90\x85\x7f\x82\xbf\xa9\x8b\xcb\x44\x37\xc4\xe7\x94\x3d\xa7\x1e\x82\xc4\x86\x3e\xfe\x9e\x10\x9e\xeb\x7f\x2c\x74\x63\x5c\x93\x73\x22\x2d\x43\x8d\xa3\x70\x34\x33\xc1\xa7\x89\xf9\x1e\x68\xe1\x0f\x13\x63\x3c\xd3\x3f\xe8\x86\x09\x7e\xfb\x1c\xff\x64\x3c\x82\x0f\x13\xe3\xff\x47\xd3\x85\x9e\xfe\x3d\xfa\x73\xff\xf7\x78\x34\x7e\xaf\x03\x4d\x65\xcc\xc1\x6e\x2f\x02\x95\x22\xf1\x5e\x7f\x37\x5a\x4c\x4d\xe0\xe2\x27\xfe\x03\x39\xdd\x8e\xc4\xe2\xce\xed\x2d\xc3\x6b\xcb\x41\xbe\x7f\x5a\x1c\x2e\xdb\x66\xd8\xf7\xc5\xa1\x55\x31\x50\x41\x7e\xb4\x60\x59\x08\xb3\xb7\x4b\x9c\x18\x51\x32\xf2\x67\x0f\x2b\x32\x20\x2b\x6e\x51\x5b\x24\xae\x0d\xc4\xe2\xc4\xf7\x77\x98\x09\x5e\xb8\x1c\x56\x65\x58\xde\x90\x96\xc3\x36\x8b\xf9\xd3\x82\xb6\xca\x10\xf0\xf8\xc9\xd0\xef\xc1\x6f\x9f\x15\x16\x8d\xa6\xa6\x3e\x53\x18\x94\x62\x15\x1e\xbf\x26\xb6\x8c\x1b\x5e\xad\xb0\xd5\x42\xd4\xc5\x38\x71\xd8\x15\x72\x06\xca\x26\xfa\x44\x8e\x7a\x38\x9a\x07\xa5\x92\xbf\x50\x66\x63\xf6\x8b\x24\x9a\xc3\x38\x16\x3f\xb2\x31\x47\xc4\xf1\xc1\xbf\x7c\xea\x2e\xe5\xc1\xe6\x60\x7b\x8d\xd9\xf1\x7e\x88\x71\x62\x3f\xf8\xf8\xfb\x0e\xbb\x96\x8c\x5b\x24\x0c\x37\xc8\xdf\xd4\xca\x42\x8f\xe1\x1f\x84\xee\x7c\xa8\x7c\x31\x76\x0b\x43\xae\x8f\xa2\x9d\x6f\x38\x10\x29\x8f\x64\x96\xeb\x17\x34\xec\x07\xa2\x9e\xbc\xe5\x50\x5f\x54\x98\x82\x7d\x7c\x5a\x9b\x8a\xef\x30\x8c\xb8\xf2\xa5\x48\x76\xe7\xd9\xb5\x65\xd3\xd0\x89\xff\xdc\x7a\x94\x71\xcc\x60\xd2\x8a\x28\xda\xa2\x95\x96\x03\x1c\x39\xd0\xa2\xc4\xf5\xc5\x31\xb8\xc2\x18\x7a\x94\x3a\xe2\xa7\x4b\xe4\x63\xb8\xc2\xb2\xb1\x0e\x1f\x33\xec\x63\xf6\x43\x26\x12\x2c\x43\xf9\x13\x0c\x57\x49\xe4\x6f\x99\x94\xc7\x28\xa7\x16\x75\xa4\x76\x15\xc7\x28\x09\x16\x8c\x6c\xcc\xc2\xe5\x85\x3c\x0d\xf6\xe3\xef\x21\xc6\x89\x45\x3c\xd4\x46\xb5\x15\xc3\xaa\x6a\x54\xfd\xd9\x41\x3d\xdf\x34\x35\xb9\xdd\xb2\x53\xa9\xe3\x67\x95\xa1\x46\x86\x1e\x59\x96\x2a\x75\x95\xcb\x94\x58\xbc\xa2\x6c\xa5\x2f\xb4\x18\x9b\xaa\x5d\x49\x76\x36\x95\xee\x5c\x82\x95\xba\x15\x99\x12\x56\xac\x23\x0b\x56\xf4\x93\x4f\x77\x2c\xd8\xee\x45\xd1\x2d\x29\x15\x49\xfa\x77\x3a\xb7\xb7\xf2\x9d\x93\x3c\x0f\x38\x43\x36\x3e\xde\x9d\x11\x4c\x61\x1d\x70\x6c\x7d\x8f\xa7\xb0\x43\xaa\x0d\x5d\xad\x30\x93\xaa\x0d\x67\x65\xd5\x2a\x25\x12\x8a\x96\xb4\x95\x22\xd1\xb6\x55\x28\x10\x6a\xc0\x4c\xa9\x2b\x95\xab\x54\x97\x4a\x55\x68\x0c\x29\x11\x1f\xfa\xd8\x71\x30\x03\x4b\x4a\x1d\x8c\xdc\xa4\x86\x10\x0b\x43\x37\x57\x2f\xa3\xdf\xf2\x35\x34\xc4\x28\x78\x30\xcf\x40\xf8\x70\xfc\x68\xcc\xcd\xd9\x68\x62\x98\x85\xb0\x80\x19\x3f\xc1\xb0\x35\x0f\xc6\xef\xf5\xf1\xef\xa0\xdb\xcd\x7a\xf0\x2d\xe8\x9f\x9e\xaa\xa0\x44\xaf\x27\x4e\xfb\xb5\xe4\xc7\x1a\x78\x39\x9f\x16\xe0\x0b\x0e\x0f\x09\x56\xa6\x52\x3a\x53\xb4\x5a\x47\x65\xc0\x75\x2b\x69\x9d\x29\xec\x98\x5a\x2a\xe3\xd7\x6e\x35\x55\x68\xf9\x59\xf5\xb4\xa1\xb1\x47\x56\x54\x85\xb6\x72\x4d\x95\xbd\x50\x51\x55\x33\xaf\xb4\x1a\xab\x49\x7c\x66\x29\xd5\xde\xf4\xc4\x73\xbf\x62\x2b\x55\xb7\xf0\x56\xd7\x50\xa1\xec\x5e\xb5\x7c\x57\x80\xa4\xa9\x27\xdb\x51\xfd\x23\x7b\x22\xfe\x04\xb1\xfb\x03\x3b\xd4\xc3\xa2\x3e\x23\x7f\x0a\x76\x28\x3b\x87\x4b\x1e\x6e\x31\x47\x92\x47\x81\x17\x64\x8f\x7d\xb2\x76\x11\xdf\x31\x2c\x6a\x89\xdd\x0c\x4f\xbf\x7c\xdd\x2f\x5e\xfe\xfd\x1f\xd1\xf2\xe5\xcb\xd7\xe2\x56\x09\x6f\xa9\xa4\x7b\xb5\xc7\x72\xa9\x8b\x2b\x17\x43\x7b\xac\x32\x4c\x6c\x19\xd9\x62\xb8\xa4\x3b\xd7\x0e\x3b\xcc\xd7\x0c\xb9\xeb\xaa\x5e\x6b\xd4\x7b\x23\x76\x92\x3d\x31\x97\x5a\x29\x1f\xa5\xcf\xa3\x31\x2d\xb6\x6f\x40\xf4\x7c\xfc\x38\x5d\x7c\x30\x82\x21\x9d\xeb\x66\x45\x9f\x32\xdb\x11\xca\x76\x29\x9b\xed\x0b\xda\x33\x42\x82\xdf\xc8\xa8\xca\xfd\x44\x1d\x23\xa5\x95\xb3\x35\x33\xa5\x1a\x1a\x19\xaa\x98\xe6\xc5\xa6\xde\x23\x8e\xc0\x8a\x32\xc5\x61\x0d\xb8\x1f\x99\x23\x85\x79\x12\xc8\xaa\x53\x8f\x3a\xb0\x13\x63\xae\xcf\x4c\x30\x31\xcc\xc7\xd2\xc9\x47\x58\x70\xe7\xa0\xdb\xd1\x20\x71\x09\x27\xc8\x81\x7e\x88\xf5\xda\xff\xee\x74\x7a\xa0\x33\xe8\x6b\xd7\x67\x5a\xff\xac\x7f\x0e\xb4\xcb\xdb\x8b\x8b\xdb\xfe\xe5\xeb\x0b\x6d\x78\xd9\x1f\x9c\xf5\xaf\x3a\xa7\x77\xf5\xd0\x07\x90\xb8\x36\x7e\xca\x7b\x75\xf9\x0c\x39\x25\x76\xa5\xa6\x73\xed\x5a\xbb\x6c\xa2\xe9\x1c\xee\x7c\x9c\x56\x0d\x48\x5c\x58\x3c\x43\xa8\xd6\x77\x3d\x3c\x6f\x64\xd9\x05\x44\xb6\x0d\x8b\x7d\xa1\x4a\x1d\x57\x57\x17\x17\x17\x4d\x74\x5c\xc2\xa8\x44\x25\xab\xe5\xf0\x38\xb1\x4a\xc5\x65\xff\xfc\x7c\x30\x6c\xa2\x62\x98\xa8\x88\x67\x30\xb5\x8a\xc1\xb0\xaf\x69\x4d\x54\x5c\xc1\x2d\xb5\xc9\xea\xb9\xbe\x15\x97\xd7\xe7\x57\x4d\x34\x5c\x87\x63\x81\xd6\x6b\x86\xd7\x88\x53\x56\x39\xd4\x97\xc3\x8b\xab\xeb\x46\x3e\xba\xce\xf9\x28\xca\xf1\x1a\x56\x5c\xf7\x87\x37\x8d\xf4\xdc\x84\x66\x44\x2d\x43\xf8\x64\xb3\x6a\xf4\x2b\x4d\x3b\x6f\x82\xae\xf5\x43\xf8\x78\x10\xc2\x8d\x67\xa5\x82\x9b\xfe\xe0\xfa\xa6\x91\x02\x2d\xab\x20\xdd\xc9\x04\xf9\x5f\xad\xe8\xe6\x7a\xd0\x28\xd5\xb5\x41\x6e\x24\xe2\xbd\x63\x74\x0d\xad\x4a\xd3\x50\xbb\x19\x36\x4b\x40\xed\x3c\x32\x27\xdd\x71\x57\x46\xd6\xf0\xfc\x4a\xbb\x49\x02\x57\x32\xa7\x57\x9e\xa9\x36\xa9\x15\x8d\xce\x9b\x83\xf2\xa7\xc0\x8d\xaf\xe8\xec\x6f\xd7\xbd\xf6\x71\xf5\x59\x6c\x0f\x68\xbd\xe8\xde\x42\x0d\x73\xcb\xc7\xac\x47\x18\x5b\x79\xb4\xd7\x8a\xa9\xb9\xe5\x5c\x13\x43\x45\x47\x7b\x47\x2c\x01\xaa\x4e\xca\x5a\x80\xad\x71\xf2\x70\xf8\x30\x35\x6b\x7d\xb7\x31\x6c\xd5\x0b\xd6\x26\xc3\x28\x69\x75\xb7\xe0\x72\x41\xc7\xb7\x1d\x54\x75\xf3\xeb\xf0\xa1\x6c\xda\x75\x69\x63\x30\x55\x8b\xf2\x26\xc3\x29\xed\xb1\x34\x77\x49\xf6\x42\x55\xb6\x0a\x79\xdf\xf0\x73\x02\xbd\xef\x77\x36\xdd\xd7\x64\x10\xa3\xfb\x93\xf7\xf7\xd9\xee\x69\x51\x21\xf8\x38\x9b\x7c\x18\xcd\x3e\x83\xdf\xf5\xcf\xa0\x4b\x6c\xd5\xc5\xa9\xe2\xdf\x2d\xb1\x2e\xa0\x8a\x98\x8b\x14\x2b\xd9\x17\x76\xe4\x85\xd9\x79\x7f\x3d\x06\xee\x2f\xd6\xc0\xec\x2d\x18\xd8\x8a\x75\x79\xb5\x22\xe3\x0e\x22\x06\x16\xc6\xe4\x8f\x85\x0e\xba\x7b\xf1\x5e\xe6\x86\x50\x2f\x77\x9f\xa7\xa1\x6b\xda\x19\xd6\xc6\x86\x37\x1a\x54\x49\x87\x42\x31\x97\xb7\x6b\x99\x58\x49\x95\xa5\x15\xb4\x6a\x5b\x2e\x6d\x5a\x28\xa7\xbe\x76\xad\x97\xa9\xa9\xb2\xbf\x92\x9a\xd2\x03\x51\x48\x2f\x9f\xc3\x68\x4f\x0c\x99\x18\xf7\xfa\x9f\xf5\x9a\xdd\xa1\x68\x1e\x05\x3c\x1a\xc5\x64\x58\xcc\x27\xc6\x03\x58\x72\x86\x71\x36\xbb\xe4\x6c\xa2\x1c\x3b\x9e\x4f\x7c\xf7\xae\x16\x23\x49\x5e\x2f\xd3\x75\xf6\xc1\x74\xf6\x10\x59\x26\xb9\x93\x81\x3c\x9f\x48\xb8\x57\x6a\xbd\x8b\xc8\x6d\x90\xbf\x39\x86\x59\x78\x02\x51\x8b\x56\xf1\xdc\x42\xc4\x26\x5a\x16\x1f\xc3\x27\x42\xa8\xc7\xa8\x70\x28\xd2\x2b\x9f\x7f\x08\x53\x1e\xe2\x20\x36\xc2\xe7\x07\x30\x8d\xab\x44\x44\xb8\x00\x97\xa5\x9d\xdc\x05\xcc\x31\x16\x5d\x05\xe8\x25\xc7\xfe\x32\xb2\xfb\xe6\xec\x91\x34\x89\x5d\x9b\xe0\xfe\xdc\xb3\x27\xbc\xbf\xa0\x20\x4d\x3d\xe8\xb5\xc5\x3b\xc6\xca\x52\x97\x94\xaa\x83\x2c\x11\x1b\xc0\x9f\xda\x33\x20\xc6\x92\xc4\xf4\x81\x26\xe4\x0f\xb1\xcb\x46\x50\x2f\x88\xca\x0d\x3d\xc8\x86\x98\xfc\x1e\xe3\x50\xe7\x57\x3b\x3a\xbd\xc2\x19\x4c\xd5\xc7\xfb\x3a\x0f\x97\xa5\x9c\xdc\x47\xcd\x71\x14\x33\xca\xfa\xb5\x2d\x5a\x25\xcc\x7a\xd3\x9b\x88\x20\x8f\x86\x84\x1f\x33\xac\x7b\x8c\xc3\x43\x52\x15\x7e\x9c\xd9\x81\x92\xec\xcd\xa2\x23\x08\x97\xc1\x0a\xcc\x6d\x5c\xe0\x59\xb8\xd2\x54\x4d\x30\x6c\x26\xb6\x43\x2f\x84\xaa\x45\x2e\xe9\x60\x4a\xa9\x15\x2e\x4b\x1d\xcd\xaf\x80\xa7\x22\x59\xbe\xab\xa5\x64\xda\x8e\x1f\x73\x68\x75\x59\x2a\xbd\xd9\x0e\xb7\x5a\x9c\xaa\xb9\x24\x8c\x1d\x4a\xbf\xed\xbc\xe3\x18\xe5\xb1\x6a\x8f\x68\x72\x1b\x4c\xc8\xcf\x43\x84\x85\x5f\xa1\xb7\xc2\xb0\x88\x56\x2f\x6f\x63\x82\xbd\xd2\x05\xb6\x5e\xe9\x12\xa4\xc4\x88\x16\xe6\xed\x18\x47\xc5\xb8\xe1\xea\x28\x40\x6d\xcd\xbb\x0d\x1c\xab\xf4\x5b\x74\x2e\x5c\x3a\x5b\xa0\x2e\x8c\xbf\xe4\x3a\xd6\xa1\x4a\x05\xb9\x7d\x5a\xf2\x65\x5a\x7e\x67\x14\x09\x36\xe0\x7e\x7c\x1c\x54\x61\xab\x19\x0b\xb2\x2c\x0f\x18\xaf\xc2\x03\x3c\xfe\xec\x1d\xbe\x07\xaf\x44\x55\x2e\xfb\x03\x21\x05\xd1\x78\x0d\x15\x40\xa6\x41\xd4\x12\x5b\x11\xb4\x72\xf9\x56\x37\x92\x33\xe0\x6d\x07\x43\x0e\xfa\x90\xf5\xa6\x1c\xae\xf0\xd9\x4e\xfb\x8e\x2e\x7d\x18\xa4\xa4\x5f\x78\xa1\xbe\x31\x99\xef\xb4\x5e\xcc\xff\xd9\x6f\xc1\x54\x96\x64\x64\xeb\x1b\x21\xfa\xea\xec\xc5\xac\x11\x7e\xe2\xa6\x32\x4b\xf4\x52\x7d\xfb\x92\x26\xca\x8b\xd9\x94\xde\x1f\x55\xd9\x21\xed\x76\xe5\xa1\xf7\x27\x82\x2f\x91\xda\x45\x74\xe1\x06\xb8\x69\x82\xe7\x41\xf3\x5b\xa8\x96\x32\xbc\x4a\x45\x1d\x1b\x14\xfb\xba\x4a\x65\xed\x95\xaf\x32\x70\x2d\xee\xea\x22\x96\xdd\x6c\xbf\x44\xd8\x94\xf1\x0f\xde\xea\x47\xf7\x5c\x92\x42\x9e\x74\x18\xe1\x92\xd2\x6f\x07\x7b\xb9\x02\x53\xb9\x44\xe8\x76\x93\x6f\xb2\xce\xde\xbe\x05\x1d\x9f\x3a\x76\xe6\x34\xad\x73\x7b\xcb\xf1\x13\x3f\x3d\xed\x01\xb9\xa0\x45\xed\x7a\x82\x51\x2f\x5e\x2e\xba\xa4\xbb\xf5\x86\xd7\x52\x9f\x13\xad\x26\x90\x13\x2d\x50\x38\x05\x9f\xde\xeb\x33\x3d\x0a\x32\xf0\x06\x9c\x9f\x4b\x4e\x2f\xca\x07\xd1\xc4\x86\xab\xcc\x31\xd1\xbb\xdf\x7f\xce\x71\x74\xac\x16\xbc\x7b\x9c\xe9\x93\x07\x23\x3d\x02\x02\x33\xfd\x9d\x3e\xd3\x8d\xb1\x3e\x2f\x9c\x8a\x84\x4f\x1f\x0d\xb0\xf8\x78\x1f\x84\xcc\x4c\x8f\xfe\xdf\xa0\xe0\xa7\x7b\x7d\xaa\x9b\x3a\x18\x8f\xe6\xe3\xd1\xbd\x5e\xfd\xf1\x9c\xf8\x6b\xa7\xb4\x8b\xd0\x9e\x33\xf2\x7a\x14\x87\x64\x32\x26\x79\xff\x14\xdb\x46\x42\x67\xc5\x0b\x7d\xc5\x89\xa2\xd4\x13\xf1\x56\xf6\x1f\xf7\x43\x96\x87\xc8\x0b\x49\x97\xa0\x3a\x60\x9a\x79\xa0\xdc\x54\xfa\x07\xdd\x20\x21\x93\xf7\x85\xa0\x0d\xd6\x6e\x50\x14\x5b\x1c\xff\x0b\x0e\x91\x87\x46\xa9\x87\x54\x37\x3a\x64\xff\xc5\x22\xb0\xe8\xd6\x73\x30\xc7\xa1\x0d\xff\x0d\x00\x00\xff\xff\x69\xe3\x20\xb5\x8f\x51\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 20879, mode: os.FileMode(420), modTime: time.Unix(1538606645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations10_add_trades_priceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\x51\x8b\xda\x4c\x14\x7d\x9f\x5f\x71\x1e\xf2\xa0\x7c\xfa\x15\x7d\xb5\x5b\x18\x93\xdb\x34\x10\xa3\x9d\x99\xd0\x16\x11\x99\x35\x63\x76\xc0\x4c\x64\x92\xc5\xdd\x7f\x5f\xb2\xba\xae\x2d\xec\x62\x5b\x68\xdf\x4e\x6e\xce\x5c\xce\xb9\x87\x33\x1c\xe2\xbf\xca\x96\x5e\xb7\x06\xf9\x9e\xb1\xe1\x10\xbc\x28\xe0\x75\x6b\x6b\xa7\x77\xd8\x7b\xbb\x31\x68\x6b\xb4\x5e\x17\xa6\x41\xab\x6f\x77\x86\xf1\x54\x91\x80\xe2\xd3\x94\x70\x67\x9b\xb6\xf6\x8f\xeb\x13\x81\x47\xd1\xf1\xd1\xda\x61\x9a\xc4\x49\xa6\x26\xd7\xd1\x8b\x33\xbd\x13\xa1\xcb\xd2\x9b\xb2\x53\xb5\xbd\x77\x9b\x4e\x0c\xb6\xb5\xc7\xd6\xba\xc2\xba\x12\x95\x75\xb6\x3a\xcb\x3b\xdc\x19\x77\x82\xb6\x81\x37\x7b\x6f\x1a\xe3\x5a\x53\x40\x37\xd0\x0e\xda\x7b\xfd\x88\x7a\x8b\xf6\x50\xc3\xec\x4c\x65\x5c\xdb\x60\xe9\x06\xc5\x8a\x85\x82\xb8\x22\xcc\x05\x04\x2d\x52\x1e\x12\x3e\xe6\x59\xa8\x92\x79\x86\xfd\xfd\xed\xce\x6e\xfe\xaf\xac\x5b\x1f\x25\xea\xb2\x44\x0f\x59\x3e\x23\x91\x84\xcb\xd5\xe0\x05\xf6\x19\x20\x48\xe5\x22\x93\x2f\x43\xa4\x3c\x8b\x73\x1e\x13\xe4\xe7\x14\xc9\x6c\x96\x1f\x4f\x20\x95\x48\x42\x05\x2e\x11\x04\x90\x94\x52\xa8\xd0\x63\x40\xc8\x25\xe1\xcb\x27\xca\x10\x8c\x96\xa3\xd5\xbb\x60\xb4\x1c\xaf\xde\x07\xe3\x27\x3c\x5e\x8e\x57\x50\xc7\x9f\xa0\x54\x12\x82\x31\x28\x8b\xfa\x08\x82\x09\x7b\xb6\xc1\xe3\x58\x50\xdc\xa1\x93\xf8\x59\x92\xad\x17\x22\x09\x09\x3d\x26\x3b\x67\xb8\xc1\x22\x9f\xa6\x49\xf8\xa3\xaf\x01\x9b\x72\x49\xea\xdb\x82\x70\x73\xe1\x90\xc9\x9f\x47\xac\x7f\x5d\x40\xfa\xe1\xef\x05\xa4\x1f\xfe\x61\x40\x1f\xfe\x30\x20\xfe\xf5\xd5\x80\x2e\x7d\xfd\x72\x40\xe7\x5a\x47\xf5\xc1\xbd\x55\xc1\x48\xcc\x17\xcf\x95\x7d\xb3\xab\x17\xc4\x62\xc2\xd8\xd3\xe7\xef\x94\x05\xfd\xee\x92\x21\x8f\x68\xf2\xca\x92\x2b\x02\xbd\x58\xf2\x3d\x00\x00\xff\xff\x19\x48\x96\x1e\xc4\x04\x00\x00")

func migrations10_add_trades_priceSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations10_add_trades_priceSql,
		"migrations/10_add_trades_price.sql",
	)
}

func migrations10_add_trades_priceSql() (*asset, error) {
	bytes, err := migrations10_add_trades_priceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/10_add_trades_price.sql", size: 1220, mode: os.FileMode(420), modTime: time.Unix(1519423607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations11_add_trades_account_indexSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\x28\x29\x4a\x89\x4f\xaa\x8c\x4f\x4a\x2c\x4e\x8d\x4f\x4c\x4e\xce\x2f\xcd\x2b\x51\xf0\xf7\x53\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\x2f\x29\x4a\x4c\x49\x2d\x56\x08\x0d\xf6\xf4\x73\x57\x70\x0a\x09\x72\x75\xd5\x40\x56\x1a\x9f\x99\xa2\x69\x8d\xdd\x44\xb0\x7c\x6a\x11\x91\x86\xa2\xa9\x86\x98\xcb\x85\xec\x74\x97\xfc\xf2\x3c\x2e\x2e\x97\x20\xff\x00\x3c\x4e\xb7\xc6\xa6\x00\xcd\x6c\x6b\x40\x00\x00\x00\xff\xff\x57\x79\x94\x68\x11\x01\x00\x00")

func migrations11_add_trades_account_indexSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations11_add_trades_account_indexSql,
		"migrations/11_add_trades_account_index.sql",
	)
}

func migrations11_add_trades_account_indexSql() (*asset, error) {
	bytes, err := migrations11_add_trades_account_indexSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/11_add_trades_account_index.sql", size: 273, mode: os.FileMode(420), modTime: time.Unix(1524592756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations12_asset_stats_amount_stringSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2c\x2e\x4e\x2d\x89\x2f\x2e\x49\x2c\x29\x86\x8a\x3b\xfb\xfb\x84\xfa\xfa\x29\x24\xe6\xe6\x97\xe6\x95\x28\x04\xbb\x86\x28\xb8\x38\x86\x38\x2a\x84\x44\x06\xb8\x2a\x24\x67\x24\x16\x25\x26\x97\xa4\x16\x29\x94\x25\x16\x55\x66\xe6\xa5\x5b\x73\x71\x21\x1b\xee\x92\x5f\x9e\x47\x81\xf1\x49\x99\xe9\x99\x79\x25\x0a\xa1\xc1\x9e\x7e\xee\x50\x15\x56\x56\x10\x41\x6b\x2e\x40\x00\x00\x00\xff\xff\x00\x82\x0f\xf1\xc5\x00\x00\x00")

func migrations12_asset_stats_amount_stringSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations12_asset_stats_amount_stringSql,
		"migrations/12_asset_stats_amount_string.sql",
	)
}

func migrations12_asset_stats_amount_stringSql() (*asset, error) {
	bytes, err := migrations12_asset_stats_amount_stringSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/12_asset_stats_amount_string.sql", size: 197, mode: os.FileMode(420), modTime: time.Unix(1527887699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations13_trade_offer_idsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x8a\x83\x30\x14\x45\xf7\xef\x2b\xde\x72\x64\xf0\x0b\xb2\x8a\x26\x48\xc0\x89\x83\x13\x61\x76\x41\x6b\xac\x2e\x6a\x4a\x4c\x29\xfe\x7d\xa1\x9b\x1a\x6b\x75\x1d\xce\x79\x37\x27\x8e\xf1\xfb\x32\x9c\x5d\xed\x0d\x56\x57\x00\x9a\x2b\x5e\xa2\xa2\x49\xce\xb1\x1f\x26\x6f\xdd\xac\xbd\xab\x5b\x33\x21\x65\x0c\x9b\x7a\x32\xda\x76\x9d\x71\x7a\x68\x31\x11\x99\x90\x8a\x1c\x41\x27\x7b\x1b\xbd\x71\xef\x1c\xa4\x25\xa7\x8a\xa3\x90\x8c\xff\x63\xef\x5d\xab\x9b\x59\xbf\x6e\x60\x21\xd7\xbe\xea\x4f\xc8\x0c\x1b\xef\x8c\xf9\x0a\xc6\x44\x64\xdb\x16\x1c\x3f\x10\xae\x87\x46\x04\x60\x19\x88\xd9\xfb\x08\xc0\xca\xe2\xf7\xe3\xe4\xad\xd7\x40\xbb\x9b\xf8\x09\xa7\x45\x5e\xfd\xc8\x30\xf5\x6e\xe3\x25\xb5\xfe\x02\x81\x47\x00\x00\x00\xff\xff\xde\x86\x0e\xf2\xe2\x01\x00\x00")

func migrations13_trade_offer_idsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations13_trade_offer_idsSql,
		"migrations/13_trade_offer_ids.sql",
	)
}

func migrations13_trade_offer_idsSql() (*asset, error) {
	bytes, err := migrations13_trade_offer_idsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/13_trade_offer_ids.sql", size: 482, mode: os.FileMode(420), modTime: time.Unix(1538606608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5f\x6f\xdb\xc8\x11\x7f\xf7\xa7\x18\xdc\x8b\x6c\xd4\x6a\x2f\xb8\xe2\x70\x95\xe1\x03\x14\x99\x69\x84\xca\x54\x22\x51\x4d\x82\xc3\x61\xb1\x22\x47\xd4\xd6\xe4\x2e\xb3\xbb\x74\xa4\x2b\xfa\xdd\x0b\x52\x24\xc5\xff\xa4\x1c\xc9\xf7\x28\xee\xec\xcc\xfc\x66\x66\x7f\x33\x5c\x6a\x38\x84\xbf\xf8\xcc\x95\x54\x23\xac\x82\xab\xe1\xf0\x6a\x38\x84\x0f\x42\x69\x57\xe2\xf2\xe3\x0c\x1c\xaa\xe9\x9a\x2a\x04\x27\xf4\xe3\xe5\xab\xa5\x61\x81\xd2\x54\xa3\x8f\x5c\x13\xcd\x7c\x14\xa1\x86\x7b\xf8\xf1\x2e\x5e\xf2\x84\xfd\x54\x7d\x6a\x7b\x2c\x92\x46\x6e\x0b\x87\x71\x17\xee\x61\xb0\xb2\xde\xfd\x32\xb8\x4b\xd5\x71\x87\x4a\x87\xd8\x82\x6f\x84\xf4\x19\x77\x89\xd2\x92\x71\x57\xc1\x3d\x08\x9e\xe8\xd8\xa2\xfd\x44\x36\x21\xb7\x35\x13\x9c\xac\x85\xc3\x30\x5a\xdf\x50\x4f\x61\xc1\x8c\xcf\x38\xf1\x51\x29\xea\xc6\x02\xdf\xa8\xe4\x8c\xbb\x77\x57\x09\x3c\x93\xfa\x38\x82\xc0\x0b\x5c\xf5\xd5\xbb\x03\x6b\x1f\xe0\x08\x8c\xcf\x96\x61\x2e\xa7\x73\xf3\x0e\x96\xf6\x16\x7d\x3a\x82\xe1\x1d\xcc\xbf\x71\x94\x23\x18\xc6\xc8\x27\x0b\x63\x6c\x19\x47\x49\x98\xbe\x03\x73\x6e\x81\xf1\x79\xba\xb4\x96\xa9\x42\xf8\x34\xb5\xde\xc3\x72\xf2\xde\x78\x1c\x43\xe0\x12\x9b\x6a\xea\x89\xc8\x7a\xc1\xfc\x51\x4b\xc9\x91\xc9\xfc\xf1\xd1\x30\xad\x16\x37\x0e\x02\x30\x37\xab\x4a\x60\xba\x84\xc1\x87\xd9\xdf\x02\x37\x4a\x5e\x20\x85\x8d\x4e\x28\xa9\x07\x1e\xe5\x6e\x48\x5d\x1c\x94\xfd\xd8\x2a\x2d\x24\x9e\x2f\x0a\x07\x7d\xc5\x20\x84\x6b\x8f\xd9\xcd\x01\x28\xba\xf0\x32\xfc\x89\xd9\x08\x7e\x54\xb2\xa0\xf7\x01\xc2\x46\x48\x88\x9e\x47\x15\xa7\x50\x2b\x10\x1b\xb8\x7e\xc2\xfd\x2d\x3c\x53\x2f\xc4\x1b\x08\x28\x93\x2a\x0e\x49\x5c\x86\x48\xa5\xbd\x25\x01\xd5\x5b\xb8\x4f\xbc\xbe\x2d\xa6\x30\x12\x73\x70\x43\x43\x4f\x13\x4d\xd7\x1e\xaa\x80\xda\x18\x95\xf3\xa0\xb4\xfa\x8d\xe9\x2d\x11\xcc\xc9\x55\x68\x31\xee\x2c\xf2\x6c\x4f\xa8\x6d\x8b\x90\x6b\x95\xc2\xb7\xc6\x6f\x67\xc6\x11\x7c\x12\xbb\x2c\x02\x77\x60\x65\x66\x47\xf9\x7c\xc4\xfb\x2a\x5a\xe1\xfa\x0a\x00\x80\x39\xb0\x66\x2e\xe3\x3a\xce\x94\xb9\x9a\xcd\x6e\xe3\xe7\xd4\x71\x24\x2a\x05\xf6\x96\x4a\x6a\x6b\x94\xf0\x4c\xe5\x9e\x71\xf7\xfa\xe7\xbf\xdf\x5c\xdd\x54\x6a\x25\xd1\x8e\x9b\x0d\xda\xe7\x76\x39\x51\x9a\x78\x5c\x02\x42\x9a\x10\xa4\x72\x22\x40\x49\x63\x5e\x68\x92\xfc\x41\x48\x07\xe5\x0f\xc0\xb8\x46\x17\x65\x69\x35\xae\x97\xfa\x25\x07\x35\x65\x9e\x82\xff\x28\xc1\xd7\xcd\x41\xf1\xd0\x71\x51\x9e\x39\x28\x89\xd2\x24\x28\x0a\xbf\x86\xc8\xed\x26\x47\x0f\xc2\x64\x4b\xd5\xb6\x3e\xa3\x25\xf9\x40\xe2\x33\x13\xa1\x22\x9d\x1b\x93\x18\x49\xca\x15\x3d\xb0\x6f\x9c\x95\xcc\x8f\x07\xe3\xdd\x78\x35\xb3\xe0\xc7\x92\x85\x63\x56\xfa\xc9\xdb\x9e\x50\xe8\x10\xaa\x21\xea\x20\x4a\x53\x3f\x80\xe8\x20\x45\xbd\x24\x7a\x02\x7f\x08\x8e\xe5\x3d\x12\xa9\xee\xdc\x74\x90\x0d\x03\xa7\xb7\x6c\x56\x47\xc9\x4f\x3f\x10\x52\xa3\x24\xcf\x28\x15\x13\xbc\x82\xe5\x4d\xb9\xa2\x84\xa6\x1e\xb1\x05\xe3\xaa\xbe\x20\x37\x88\x24\x10\xc2\xab\x5f\x8d\x9a\x2e\xd9\x60\x53\xae\xe3\x65\x89\x0a\xe5\x73\x93\x88\x4f\x77\x44\xef\x88\x42\x4d\x14\xfb\xa3\x2a\xd5\x5c\xca\xc7\xb4\x05\x54\x6a\x66\xb3\x80\x9e\x9d\xa1\xea\x6d\x1c\xf9\xaa\x1e\x53\xff\xe3\xde\x4d\x20\xa7\xe2\x27\xcc\x21\x0a\xbf\xa6\x61\x58\x1a\x1f\x57\x86\x39\x69\x89\x44\x1e\x7c\x2a\xdd\xcf\x46\x8c\x60\x69\x8d\x17\xd6\xa1\x91\xbe\x89\x1f\x4c\xcd\xc9\xc2\x88\x5b\xdf\xdb\x2f\xc9\x23\x73\x0e\x8f\x53\xf3\xdf\xe3\xd9\xca\xc8\x7e\x8f\x3f\x1f\x7f\x4f\xc6\x93\xf7\x06\xbc\x39\x0b\x50\x98\x7f\x32\x8d\x07\x78\xfb\xa5\x03\xf1\x78\x66\x19\x8b\x13\x01\x67\xba\x3b\xc4\xff\xca\x9c\x4e\x2c\x97\x2a\xd4\xae\x66\x9a\xa7\xc7\xc6\x86\x1b\x04\x1e\xb3\x0f\xb8\xe2\x7e\xf4\x9d\xed\xe8\xf0\x48\x89\x50\xda\x98\x96\x7a\x03\xf7\xa7\x3c\x35\x18\x8c\x46\x15\x89\x1e\x87\x22\x0f\xef\x72\xb4\xd0\x64\x25\x8e\x7d\x03\x2d\xd4\xed\xad\x4f\xc0\xf7\x90\x42\x93\x67\xe7\xa5\x85\x0e\x2b\xaf\x45\x0c\x27\x82\xfd\x4e\x6a\xe8\xb0\x56\x25\x87\xa6\x0d\x2d\xf4\x90\xdb\x72\xb9\x92\x4d\x29\x22\xef\x5f\xef\x71\x2c\x99\xc2\x3a\x86\xbc\xbe\x0c\xd2\x4e\x06\xb5\xb2\x47\xd3\xcd\xf3\x0a\x6d\x6c\xcd\x4d\xb3\xde\x9f\x32\xad\xe9\x1d\x41\xfe\x8c\x9e\x08\x10\x34\xee\x2a\x54\xbd\x8b\x66\xa7\xd0\xd3\x0d\x8b\x3e\x46\xaf\x90\xb5\x4b\x51\x14\x9a\x96\x15\x73\x39\xd5\xa1\xc4\xba\x37\xaa\x7f\xfc\x7c\xf3\xdb\xef\x47\x16\xfe\xef\xff\xea\x78\xf8\xb7\xdf\xcb\x43\x1c\xfa\x82\xc4\xdd\xa0\xca\xd9\x99\x2e\x2e\x38\xb6\xb2\xfa\x51\x57\x55\x4d\x82\x8c\xf9\x48\xd6\x22\xe4\x8e\x8a\x32\xf7\x8b\xa4\xdc\xc5\x98\x0c\xf3\x87\x89\x39\xe9\xd1\x49\x6c\xf7\x3a\xef\x87\xe3\x32\x37\x67\x5d\xdd\x1d\x0e\xf2\x93\xf9\x6c\xf5\x68\x46\x29\x8d\x5e\xa8\x53\x94\x1c\x77\xfa\x99\x7a\xd7\x83\x5e\x03\xc5\x60\x34\x92\xe8\xda\x1e\x55\xaa\xc2\xe8\x67\x43\xd1\xd8\xac\x4e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\x11\x3c\xe1\xfe\x78\xad\x62\x2e\xad\xc5\x78\x6a\xb6\xa0\xad\x12\xde\x89\x09\x8c\x4b\x69\xfc\xf0\x90\xb3\xd6\xc7\x47\xf8\xb0\x98\x3e\x8e\x17\x5f\xe0\x5f\xc6\x17\xb8\x66\xce\xe9\x3d\xf8\x82\x48\x9b\x6c\xb6\x61\x6d\xf5\xb3\x13\xed\x3a\x1b\x50\x52\x48\x53\xf3\xc1\xf8\xfc\x82\x46\x15\xef\xcb\xe9\x83\xb9\x59\xdf\xb6\x56\xcb\xa9\xf9\x4f\x58\x6b\x89\x08\xd7\x89\xf0\x6d\xa5\x2f\xd4\x79\x1a\xb5\xb7\xb3\xb9\x19\xf7\xca\x5e\x3e\x96\x3b\x6c\x9d\x6b\x87\x86\x7a\x36\xe7\x0e\xea\xfa\xb9\x57\xea\xe5\xb7\xd5\xb6\x5d\x5b\xe3\x04\xc9\x7a\x7f\x58\xff\x5e\xb7\x57\xe6\xf4\xe3\x2a\xf5\xbe\xa4\x3b\x8f\x21\xbd\x76\x2b\xb8\x5f\xf7\x9a\x7d\x9b\xde\xa0\x35\x79\x7e\xa4\xd5\x73\xfa\xcc\x9c\xde\xde\x1e\xa7\xfa\xdb\xda\x8b\x82\x0e\x04\x22\x20\xc1\x45\x40\x24\x8a\xf3\x38\x1a\xfa\xdf\x8b\x60\x55\xd1\x64\x37\x7a\xeb\xfd\xd9\x01\x15\x75\xe7\x31\xa5\x77\x95\x05\x10\xf5\xee\xe5\x4f\xef\x45\x7c\xac\x18\xe8\x77\x6c\x6b\xbc\x65\xdc\xc1\x1d\x29\xdf\xab\x13\xc1\x49\x72\x79\x7e\x56\xd7\x3b\xad\xe5\x71\x64\x97\xfc\x45\xf6\x3e\x08\x9e\x00\xe4\xcc\xe1\x6f\x33\xd4\xed\x7e\x67\x0a\x12\x0a\x88\xf4\x45\x73\xf1\x79\xe8\xbd\xd5\x44\x27\x01\x45\x42\x1d\x5e\x27\x87\x23\x52\x99\x5d\x72\x5f\xc2\xf5\x3a\x3b\x9d\x87\x34\x93\xec\x0f\xe2\xa2\x35\x53\xb0\xf3\x12\x8a\x69\x56\x57\xba\xc5\xbf\x70\x0a\x2a\x1f\x0d\x3a\xb1\x94\x36\xf4\x47\x96\xfb\x86\xf3\x3a\x99\xc9\x7f\x34\xea\x82\x95\x93\xed\x8f\xa8\xee\xf3\xd4\xeb\x40\xab\xfd\x30\xd6\x85\xb1\x6e\x53\x7f\xb0\xe9\xa4\xf8\x3a\x00\xb3\x8b\x9e\x2e\x50\x8d\x93\x7f\x51\xf5\xf1\x8e\xfc\xe2\xdc\x50\x36\x55\x3b\x55\x9d\xca\x10\x45\xa5\xc5\x7b\xe4\x4b\x50\x44\x9b\xbd\x3e\x80\x8a\x3b\x4e\x03\x77\xa1\x9e\x59\xb5\xd2\x0b\x48\x5d\xe7\x8c\x87\x66\xbd\xbb\xd0\x34\x9e\x28\x6e\x18\x08\x5f\x38\x8f\x57\x13\xd2\x9c\x8f\xfc\xf8\x79\xf1\xe3\x52\x35\xf6\xe2\x49\x58\x4b\xea\x60\x36\x1b\xa5\xef\x92\x64\x2d\xc4\xd3\x79\x0a\xaa\xc5\x40\xe7\x08\x76\x7d\x9d\x7e\x17\x1b\xfe\xfa\x2b\x0c\x94\xf0\x1c\x42\x95\x42\x1d\x97\xe2\x60\x34\xd2\xb8\xd3\x37\x37\xb7\xd0\x2c\x68\x0b\xa7\x9f\x20\x53\x2a\x44\xd9\x2c\xba\x16\xa1\xbb\xd5\xbd\xcc\x17\x44\xdb\x1d\x28\x88\x96\x5c\xb8\x81\x4f\xef\x8d\x85\x71\x38\x4f\x70\x0f\x3f\xfd\x94\xcb\x5e\xd3\xbf\xf9\xc0\x16\x7e\xe0\xa1\xc6\x38\x13\xf9\x3f\x02\x3e\x88\x6f\xfc\xca\x91\x22\x80\xf8\x3f\x4e\xf5\xe5\x62\x53\x65\x53\x07\xef\x3a\x04\x8b\x07\xaa\x6d\x53\x8e\x23\x7a\x89\xf5\xd7\x9c\xb6\xb6\x36\x99\xb4\xaa\xda\x64\xb2\x37\x96\x4c\xe8\xff\x01\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x6b\xb3\x40\x14\x85\xf7\xf3\x2b\xce\x2e\xca\xfb\x66\x91\x6d\x5c\x4d\xc6\x1b\x22\x8c\x63\x3b\x5e\xdb\x64\x25\xa2\x43\x3a\x90\x6a\xeb\xd8\xaf\x7f\x5f\x48\xd3\x0f\x08\x6d\xa1\xcb\x73\x78\xe0\x39\xdc\x3b\x9f\xe3\xdf\xad\xdf\x8f\xcd\xe4\x50\xdd\x09\x65\x49\x32\xa1\xa4\xcb\x8a\x8c\x22\xdc\xf8\x30\x0d\xe3\x4b\xdd\xb4\xed\xf0\xd0\x4f\xa1\xf6\x5d\x1d\xdc\xbd\x00\x80\x92\xa5\x65\x5c\x67\xbc\xc1\xe2\x58\x64\x46\x59\xca\xc9\x30\x56\xbb\x53\x65\x0a\xe4\x99\xb9\x92\xba\xa2\x8f\x2c\xb7\x9f\x59\x49\xb5\x21\x2c\x12\x51\x92\x26\xc5\x08\x6e\x7a\x6c\x0e\xd1\xec\x1b\xef\xec\x3f\xa2\x13\x99\xcb\x6d\xe4\xbb\x18\x6b\x5b\xe4\x67\x33\xe3\x38\x11\x52\x33\x59\xb0\x5c\x69\x42\x61\xf4\xee\x0c\xc2\x1b\xa1\x0a\x5d\xe5\x06\xbe\x43\x49\x8c\x94\xd6\xb2\xd2\x8c\xde\x3d\xff\xbc\x64\xb9\x1c\xdd\xbe\x3d\x34\x21\xc4\x89\x10\x5f\xcf\x98\x0e\x4f\xfd\x1f\xec\xa9\x2d\x2e\xde\xf5\x89\x38\xa6\xdf\xde\x90\x88\xd7\x00\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xef\x52\x70\xef\x14\x4d\x9d\xce\x44\x4a\x32\x38\x15\xd1\xa3\x06\x6a\xae\x5c\x82\xe2\xdb\xbb\xba\x88\x4f\xf0\x75\x1d\x36\x8f\x3c\xeb\xa5\x31\xd2\x6a\x2c\xc5\x61\x44\xb4\x3b\x1a\x10\x3c\x9d\x71\xcf\xb5\x89\xbe\xa7\x85\x6f\x33\x6b\x85\x01\xac\x73\xd8\x07\x4a\x47\x8f\x55\xa5\xc9\x55\x96\xe9\xc9\x5a\xb3\x14\xe4\xd2\x78\x66\x85\x1b\x0e\x36\x51\xc4\x16\x3e\x44\xf8\x44\xd4\x1b\xf3\x6d\x39\x79\x95\xff\x9a\x1b\xc3\xe9\x97\xd5\x9b\x4f\x00\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_create_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x51\x6f\xaa\x40\x10\x85\xdf\xf9\x15\x13\x9f\x30\x17\x93\x7b\x6f\x5a\x5f\x4c\x9a\x58\x25\xad\xa9\xc1\xd6\x4a\xd2\x37\xb2\xb0\x23\x6c\xa2\x2c\x99\x1d\xda\xf0\xef\x1b\x68\x69\x10\x57\xad\xaf\x9c\x39\x67\x38\xbb\x5f\x76\x34\x82\x3f\x7b\x95\x92\x60\x84\xb0\x70\x66\x6b\x7f\xba\xf1\x61\x33\xbd\x5f\xfa\x90\x29\xc3\x9a\xaa\x88\x49\x48\x34\xe0\x3a\x00\xf0\xf3\x51\x17\x48\x82\x95\xce\x23\x25\x21\x56\xa9\xca\x19\x82\xd5\x06\x82\x70\xb9\xf4\x9a\xc9\x81\x26\x89\x34\x00\x95\x33\xa6\x48\x1d\xb5\x91\xf5\x76\x8b\x64\x35\x37\xb2\xc1\xdd\xee\x84\x5e\xcb\x71\x59\x9d\x75\xeb\x9d\x8c\x84\x31\xc8\x11\x57\x05\x42\x92\x09\x12\x09\x23\xc1\xbb\xa0\x4a\xe5\xa9\x3b\xbe\x19\xf6\x22\x3b\x1e\x65\x4c\x89\x64\x71\xdd\x8e\xcf\xb8\x12\x2d\x6d\x9b\xfe\xfd\xb7\x7b\xf6\xba\xcc\xb9\xff\xff\x30\x7b\xf4\x67\x4f\xe0\x76\x47\xee\xe0\xef\xf0\xbb\x57\xac\xcb\x34\xe3\x6b\x9b\x1d\xb8\xae\xe8\x76\xe0\xfb\x75\xbb\xd6\x75\xb6\xdf\xe1\x50\xdd\xd0\x19\x4e\x9c\x96\xbf\x30\x58\xbc\x84\x3e\x2c\x82\xb9\xff\x06\x19\x93\x8c\x0a\x25\x61\x15\xf4\x91\x0c\x5f\x17\xc1\x03\xc4\x4c\x88\xe0\xda\xc8\xf4\x5a\x0a\x3b\xe1\x9d\xd4\xb8\x8a\x1a\x0c\x2f\x45\xb7\xac\xda\x52\xea\x90\xfa\xb6\x2e\x65\xf4\x90\xf4\xfa\xe4\x78\xc7\x00\x9e\x5a\xf7\x75\x78\x97\x16\x1e\xb1\xe2\x1d\x5f\xa8\x67\x63\xa3\x5e\xdb\x7d\x17\xe6\xfa\x23\x77\xe6\xeb\xd5\xb3\xfd\x5d\x48\x84\x49\x84\xc4\x89\xf3\x19\x00\x00\xff\xff\x79\x87\x24\x6b\x4c\x04\x00\x00")

func migrations5_create_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_create_trades_tableSql,
		"migrations/5_create_trades_table.sql",
	)
}

func migrations5_create_trades_tableSql() (*asset, error) {
	bytes, err := migrations5_create_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_create_trades_table.sql", size: 1100, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_create_assets_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4f\xc3\x30\x18\x84\x77\xff\x8a\x1b\x1d\x91\x0e\x20\xe8\x92\xc9\x34\x16\x58\x18\xa7\xb8\x31\xa2\x53\xe5\x26\x16\x78\x80\x54\xb6\x11\xca\xbf\x47\xaa\x28\xf9\x50\xe6\x7b\xf4\xbc\xef\xdd\x6a\x85\xab\x4f\xff\x1e\x6c\x72\x30\x27\xb2\xd1\x9c\xd5\x1c\x35\xbb\x97\x1c\x1f\x3e\xa6\x2e\xf4\x07\x1b\xa3\x4b\x11\x94\x00\x80\x6f\xb1\xe3\x5a\x30\x89\xad\x16\xcf\x4c\xef\xf1\xc4\xf7\xc8\xcf\xd9\x19\x3c\xa4\xfe\xe4\xf0\xca\xf4\xe6\x91\x69\xba\xbe\xcd\xa0\xaa\x1a\xca\x48\x39\x86\x9a\xae\x1d\xa0\xeb\x9b\x65\xc8\xc7\xf8\xed\xc2\x3f\x76\xb7\x9e\x63\x46\x89\x17\xc3\xe9\xa0\xcc\x47\x3f\xe4\x13\x4b\x46\xb2\x82\x5c\xfa\x09\x55\xf2\xb7\xbf\xf8\xd8\x5f\xee\x54\x6a\x5e\xd9\xec\x84\x7a\xc0\x31\x05\xe7\x40\x27\xb6\x82\x90\xf1\x74\x65\xf7\xf3\x45\x4a\x5d\x6d\x97\xa7\x6b\x6c\x6c\x6c\xeb\x8a\xdf\x00\x00\x00\xff\xff\xfb\x53\x3e\x81\x6e\x01\x00\x00")

func migrations6_create_assets_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_create_assets_tableSql,
		"migrations/6_create_assets_table.sql",
	)
}

func migrations6_create_assets_tableSql() (*asset, error) {
	bytes, err := migrations6_create_assets_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_create_assets_table.sql", size: 366, mode: os.FileMode(420), modTime: time.Unix(1509940350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_modify_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x8f\xda\x30\x14\xbc\xe7\x57\x3c\xed\x29\x51\xc3\xaa\xad\xda\xbd\x6c\x55\x09\x58\x97\x46\x65\xc3\x36\x04\xa9\xb7\xc8\x89\xdf\x06\xab\xc1\x8e\x6c\xa7\x88\x7f\x5f\x05\x08\xcd\x27\xb0\xbb\x87\x5e\x93\x99\x79\x6f\xec\xf1\x8c\x46\xf0\x6e\xc3\x53\x45\x0d\xc2\x2a\xb7\x46\x23\x60\x4a\xe6\x60\xd6\x08\x32\x63\x60\x14\x65\xa8\xc1\xd0\x38\xc3\x5b\xc8\x0b\x03\x14\x04\x6e\x41\x0a\x04\x2e\x20\xcf\x68\x82\xd6\x43\xb0\x78\x82\x70\x3c\x99\x13\x58\x73\x6d\xa4\xda\x45\x07\xde\xbd\x35\x0d\xc8\x38\x24\xbd\x3f\xc1\xb6\x00\xe0\xf4\x51\xe6\xa8\xa8\xe1\x52\x44\x9c\xc1\xc4\x9b\x79\x7e\x08\xfe\x22\x04\x7f\x35\x9f\xbb\x7b\xe4\x8d\x54\x0c\xd5\x0d\x78\x7e\x48\x66\x24\x68\xfd\xcd\x90\xa5\xa8\xa2\x24\x93\x1a\x59\x44\x0d\x84\xde\x23\x59\x86\xe3\xc7\xa7\x16\x50\x3e\x3f\xa3\x1a\x1c\x12\x53\x8d\x11\x4d\x12\x59\x08\xd3\x03\x82\x80\x7c\x23\x01\xf1\xa7\x64\x79\xda\xfc\x88\xd6\x36\x67\x4e\x5d\x44\x6b\xbc\x5a\xa2\xc4\x76\x04\x36\xa5\x6c\x87\x3e\xfd\x4e\xa6\x3f\xc0\xae\x43\xbe\xc2\xfb\x23\x71\xbf\x09\xaa\x37\x3b\x38\xe9\xbc\xc1\xc4\x49\xe3\xac\x8f\x16\xea\x9f\x95\xbd\x41\xae\x23\x8d\x59\x86\x0a\x26\x8b\xc5\x9c\x8c\xfd\xc3\xbf\x3d\xd7\x6e\x1e\xf3\x97\xce\xd2\x8e\xe5\xdc\x5b\x55\x04\x57\xbe\xf7\x73\x45\xc0\xf3\x1f\xc8\x2f\x58\x1b\xc5\xa2\x9c\x33\x58\xf8\xed\x54\xae\x96\x9e\x3f\x83\xd8\x28\x44\xb0\xfb\xc2\xe9\x56\x41\x74\x4e\xf1\xae\x8b\x52\xae\x22\xc3\x37\x18\x65\x52\xfe\x2e\xf2\xc1\x09\x93\x30\x20\xa4\x69\xc1\xed\x38\x70\x3b\xb1\xee\x1d\x5a\xd1\xae\x1a\xd9\x39\xa5\x3e\xc5\xeb\x1d\x5c\xb5\x60\xbc\x8b\xf6\xcf\xee\xd2\x79\x57\x6f\xb3\xbc\x37\xab\x5e\x4d\x0f\x72\x2b\x1a\xe5\x24\x70\x8b\xaa\xea\x25\x85\x5c\x68\x53\xe2\xaa\xde\x92\x02\x6f\x87\x7b\x09\x12\xaa\x13\xca\xf0\xd5\xfd\x14\xf3\x94\x0b\x33\xd0\x4f\x5c\x18\x4c\x51\x0d\xd5\x4e\x2f\xf7\x10\xf2\xc1\xdf\x71\xb1\x3b\x47\x96\x19\x3b\x5e\xa7\xd9\xe5\x08\xc9\x9a\x2a\x9a\x18\x54\xf0\x87\xaa\x1d\x17\xa9\x7d\xf7\xc9\x19\xe6\x70\xad\x0b\x54\x3d\xac\xcf\x77\x67\x58\x89\x64\x7d\x93\x3e\x7c\xec\xe7\x1c\x5e\x77\x6b\xfd\xaa\x03\xea\x90\x5a\x01\xc8\x22\x5d\x9b\x97\x1a\x6b\xb0\x5e\x60\xad\xc1\xbb\xda\x5c\xc5\x3a\x6b\xaf\x09\x2a\x0d\xfe\x87\x62\x7a\xc5\x13\x6c\x8b\x94\x1a\xe5\x55\x5d\x92\x68\xe5\xd1\x6d\xc7\xc6\xed\xa6\x6f\x60\xda\xe1\xe4\x2e\xcd\xeb\x04\xc5\xed\xde\xa6\xdb\x17\x0c\xe7\xfe\x6f\x00\x00\x00\xff\xff\x2a\xff\xe8\x4a\xff\x08\x00\x00")

func migrations7_modify_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_modify_trades_tableSql,
		"migrations/7_modify_trades_table.sql",
	)
}

func migrations7_modify_trades_tableSql() (*asset, error) {
	bytes, err := migrations7_modify_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_modify_trades_table.sql", size: 2303, mode: os.FileMode(420), modTime: time.Unix(1511216683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_add_aggregatorsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x31\x6f\xdb\x30\x14\x84\x77\xfe\x8a\x1b\x34\xd8\xa8\x65\xa3\x1d\x1b\x78\xa0\x65\x5a\x10\x40\x2b\xae\x48\x0d\x99\x02\x26\x61\x64\xa1\x32\xa5\x92\xcf\x30\xfc\xef\x0b\xaa\x4d\x6c\xb4\x05\x1a\x14\xcd\x46\x1c\xf8\x0e\x77\xdf\x7b\x69\x8a\x0f\x87\xb6\xf1\x86\x2c\xea\x81\xb1\x34\xc5\x9e\x68\x08\x9f\x17\x8b\x53\xfb\xb5\x9d\x0f\x7d\xa0\xc6\xdb\xf0\xad\x9b\xf7\xbe\x19\xb5\xc5\xa6\xf5\x81\x16\x9d\x09\x74\x3f\x31\x4d\xe3\x6d\x63\xc8\x4e\xe3\x68\xe6\x6d\x34\x32\x78\x3e\xba\x47\x6a\x7b\x07\xda\x1b\x82\xe9\x4e\xe6\x1c\xe0\x2d\x1d\xbd\x0b\xa0\xbd\xc5\x73\xf4\x80\xeb\x5d\x5a\xd6\x52\xa2\x25\x7b\x60\x59\x25\xb8\x16\xd8\xd4\x65\xa6\x8b\xdb\x12\xc3\xf1\xa1\x6b\x1f\xe7\xe3\xd7\x7b\xd3\x34\x98\xc0\xb8\xb3\xed\xec\xc1\x3a\x9a\x5d\xbd\x31\x65\x40\x25\x74\x5d\x95\xea\x5a\x96\xbc\xcc\x6b\x9e\x0b\xa8\x2f\x12\xc5\x76\x5b\x6b\xbe\x92\x02\x4a\x57\x45\xa6\xc1\x15\x92\x04\x4a\x48\x91\x69\x24\x1f\x91\x24\x37\x63\x7f\xee\x9e\x62\x44\x87\x93\x37\x03\x8c\xc3\x6b\x47\x18\xdf\x1f\xdd\x13\x5a\x7a\xc9\xca\xf3\xbc\x12\x79\x7c\xfd\x0c\xbb\x29\x2a\xa5\x31\x61\x2a\xb6\xc0\x12\xbb\x7a\x25\x8b\xec\xd2\x61\xc6\x56\x5c\x09\x7d\xb7\x13\x58\x82\x97\x77\x42\x8a\xad\x28\xf5\x8c\xa9\xdf\x34\x36\xfd\x91\xe7\xed\x50\xe3\x4a\xde\xc6\x74\x5c\xde\x7b\x23\xfd\xf4\x7f\x90\x4a\x3e\x12\x0d\xb1\x3e\x00\x2c\x7f\x2d\x31\x63\x0f\x26\x58\x3a\x0f\x16\xcb\xeb\x3a\x2c\x8c\xda\x38\x72\x91\x5f\xb0\xbe\x9e\xfd\xba\x3f\x39\xb6\xae\x6e\x77\xff\x74\x79\xc8\xb8\xca\xf8\x5a\xdc\xfc\xd9\xe2\x02\xfa\xaf\x06\xdf\x03\x00\x00\xff\xff\x7e\x17\x8e\x03\x8b\x03\x00\x00")

func migrations8_add_aggregatorsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_add_aggregatorsSql,
		"migrations/8_add_aggregators.sql",
	)
}

func migrations8_add_aggregatorsSql() (*asset, error) {
	bytes, err := migrations8_add_aggregatorsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_add_aggregators.sql", size: 907, mode: os.FileMode(420), modTime: time.Unix(1510796171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_create_asset_stats_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xc1\x6e\xf2\x30\x10\x84\xef\x79\x8a\x3d\x82\xfe\x9f\x5b\xd5\x0b\x27\x63\x6f\xa9\x55\xe3\x44\x1b\xa7\x2a\xa7\xc8\x24\x2e\x8d\x44\x92\x2a\x36\xaa\x78\xfb\xca\x84\x56\xa1\x8a\x4f\xb6\xf5\x69\x66\x67\x67\xb5\x82\x7f\x6d\x73\x1c\x6c\x70\x50\x7c\x26\x9c\x90\x19\x04\xc3\x36\x0a\xc1\x7a\xef\x42\xe9\x83\x0d\x1e\x16\x09\x00\x40\x53\xc3\xdd\xd9\xc8\xad\xd4\x66\xbc\x67\x24\x77\x8c\xf6\xf0\x82\x7b\x20\x7c\x42\x42\xcd\x31\x87\x8f\xc6\x87\x7e\xb8\x94\x57\x31\x0f\xa9\x06\x81\x0a\x0d\x02\x67\x39\x67\x02\xe3\x4f\x91\x89\xe8\x4a\x98\x1b\x92\xdc\xfc\xbf\x7a\xd9\xb6\x3f\x77\x61\xde\x4b\xa7\x06\x74\xa1\xd4\x48\x76\xe7\xb6\xb4\x55\x15\x71\x1f\xdf\x52\x1b\xdc\x22\xcd\x90\xef\x27\x7b\xf4\x93\xf9\xf3\x1d\x53\xea\xa6\x7a\x4f\x86\xbe\x3d\x4d\x93\xbe\x32\xe2\xcf\x8c\x16\x8f\x0f\xcb\x5f\x32\x59\xae\x93\x9f\x8d\x49\x2d\xf0\xed\xb6\xb1\xc3\xa5\xac\xfa\xda\xc5\x64\x7f\xd2\x17\xb9\xd4\x5b\x38\x84\xc1\x39\x58\x8c\x70\x24\xa3\xce\xb4\x08\xd1\x7f\x75\x89\xa0\x34\x9b\x29\xa2\xb2\xbe\xb2\xb5\x5b\x7f\x07\x00\x00\xff\xff\xa9\x7e\x10\x6f\xb9\x01\x00\x00")

func migrations8_create_asset_stats_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_create_asset_stats_tableSql,
		"migrations/8_create_asset_stats_table.sql",
	)
}

func migrations8_create_asset_stats_tableSql() (*asset, error) {
	bytes, err := migrations8_create_asset_stats_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_create_asset_stats_table.sql", size: 441, mode: os.FileMode(420), modTime: time.Unix(1518563051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_add_header_xdrSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xf0\xf7\xf3\x89\x54\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\xcf\x49\x4d\x49\x4f\x2d\x2a\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x80\x08\xc5\x67\xa4\x26\xa6\xa4\x16\x29\x94\xa4\x56\x94\x28\xf8\x85\xfa\xf8\x58\x73\x71\x21\x1b\xea\x92\x5f\x9e\x47\xd8\x58\x97\x20\xff\x00\xac\xe6\x5a\x03\x02\x00\x00\xff\xff\xe1\xe4\xef\x11\xa1\x00\x00\x00")

func migrations9_add_header_xdrSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_add_header_xdrSql,
		"migrations/9_add_header_xdr.sql",
	)
}

func migrations9_add_header_xdrSql() (*asset, error) {
	bytes, err := migrations9_add_header_xdrSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_add_header_xdr.sql", size: 161, mode: os.FileMode(420), modTime: time.Unix(1518563051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/10_add_trades_price.sql": migrations10_add_trades_priceSql,
	"migrations/11_add_trades_account_index.sql": migrations11_add_trades_account_indexSql,
	"migrations/12_asset_stats_amount_string.sql": migrations12_asset_stats_amount_stringSql,
	"migrations/13_trade_offer_ids.sql": migrations13_trade_offer_idsSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
	"migrations/5_create_trades_table.sql": migrations5_create_trades_tableSql,
	"migrations/6_create_assets_table.sql": migrations6_create_assets_tableSql,
	"migrations/7_modify_trades_table.sql": migrations7_modify_trades_tableSql,
	"migrations/8_add_aggregators.sql": migrations8_add_aggregatorsSql,
	"migrations/8_create_asset_stats_table.sql": migrations8_create_asset_stats_tableSql,
	"migrations/9_add_header_xdr.sql": migrations9_add_header_xdrSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"10_add_trades_price.sql": &bintree{migrations10_add_trades_priceSql, map[string]*bintree{}},
		"11_add_trades_account_index.sql": &bintree{migrations11_add_trades_account_indexSql, map[string]*bintree{}},
		"12_asset_stats_amount_string.sql": &bintree{migrations12_asset_stats_amount_stringSql, map[string]*bintree{}},
		"13_trade_offer_ids.sql": &bintree{migrations13_trade_offer_idsSql, map[string]*bintree{}},
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
		"5_create_trades_table.sql": &bintree{migrations5_create_trades_tableSql, map[string]*bintree{}},
		"6_create_assets_table.sql": &bintree{migrations6_create_assets_tableSql, map[string]*bintree{}},
		"7_modify_trades_table.sql": &bintree{migrations7_modify_trades_tableSql, map[string]*bintree{}},
		"8_add_aggregators.sql": &bintree{migrations8_add_aggregatorsSql, map[string]*bintree{}},
		"8_create_asset_stats_table.sql": &bintree{migrations8_create_asset_stats_tableSql, map[string]*bintree{}},
		"9_add_header_xdr.sql": &bintree{migrations9_add_header_xdrSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

