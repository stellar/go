// Code generated by go-bindata.
// sources:
// migrations/20190404184050-initial.sql
// migrations/20190405112544-increase_asset_code_size.sql
// migrations/20190408115724-add_new_asset_fields.sql
// migrations/20190408155841-add_issuers_table.sql
// migrations/20190409152216-add_trades_table.sql
// migrations/20190409172610-rename_assets_desc_description.sql
// migrations/20190410094830-add_assets_issuer_account_field.sql
// migrations/20190411165735-data_seed_and_indices.sql
// migrations/20190425110313-add_orderbook_stats.sql
// migrations/20190426092321-add_aggregated_orderbook_view.sql
// DO NOT EDIT!

package bdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20190404184050InitialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x8f\x9b\x30\x10\x85\xef\xfe\x15\x73\x64\xd5\xdd\x4a\xad\xaa\x5e\xf6\x44\x17\x2a\x45\xa5\xb0\xa5\x70\xc8\xc9\x32\x66\x14\x46\x6b\x3c\xd4\x36\x49\xe9\xaf\xaf\x20\x69\xab\xa4\x64\x95\x23\xf8\x7b\x6f\xac\xe7\x37\xe2\xe1\x01\xde\xf4\xb4\x73\x2a\x20\xd4\x83\x10\x4f\x65\x1a\x57\x29\x54\xf1\xa7\x2c\x85\x61\x6c\x0c\xe9\xb7\xca\x7b\x0c\x1e\x22\x01\x00\x40\x2d\x78\x74\xa4\x0c\xe4\x45\x05\x79\x9d\x65\xf0\x5c\x6e\xbe\xc6\xe5\x16\xbe\xa4\xdb\xfb\x85\xd1\xdc\x22\xe8\x4e\x39\xa5\x03\x3a\xd8\x2b\x37\x91\xdd\x45\xef\xde\xdf\xfd\x15\x1d\x41\xf2\x7e\x44\x07\x01\x7f\x86\x8b\x93\x30\x0d\x6b\x16\x1f\x3f\x5c\x5a\xd8\xb1\x97\x4a\x6b\x1e\x6d\xf0\x40\x36\xe0\x0e\xdd\x05\xa2\xc6\xd0\x49\x87\x3f\x46\x72\xd8\x42\xc3\x6c\x50\xd9\x75\x66\xcf\x5a\x35\x06\xaf\x41\xfd\x3c\x06\x5a\x1e\x67\x66\x70\xa8\xc9\x13\xff\x47\xcd\x71\x49\xcd\x36\x38\x36\x06\x5b\xd9\x4c\xb2\xe5\x5e\x91\xbd\x66\x6b\x75\xc7\x4e\xfe\xd1\xdd\x98\xdd\x99\xea\xe6\xb8\xc8\xcb\xbd\x32\x74\x2d\x86\xe5\x4c\x05\x62\x2b\xd1\x39\x5e\x7d\x1a\xa3\x7c\x38\x99\x04\xea\xd1\x07\xd5\x0f\x70\xa0\xd0\x2d\x9f\xf0\x8b\x2d\xae\x29\x74\x87\xfa\x05\x5f\xd1\x24\xe9\xe7\xb8\xce\x2a\xb0\x7c\x88\xfe\x5d\x5b\xdc\x3d\x0a\x11\x67\x55\x5a\x9e\x4a\x59\xe4\xd9\xf6\xbc\x99\xcb\x8c\x38\x49\xe0\xa9\xc8\xbf\x57\x65\xbc\xc9\xab\xe3\x23\xf8\x25\x4d\x79\x6c\x99\x7c\xc1\x09\xea\x7c\xf3\xad\x4e\x21\x9a\xff\xdf\x9f\xea\x37\x0f\x38\xdb\x83\x84\x0f\x56\x88\xa4\x2c\x9e\xd7\xf6\xe0\x51\xfc\x0e\x00\x00\xff\xff\x48\x16\x89\x51\x35\x03\x00\x00")

func migrations20190404184050InitialSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190404184050InitialSql,
		"migrations/20190404184050-initial.sql",
	)
}

func migrations20190404184050InitialSql() (*asset, error) {
	bytes, err := migrations20190404184050InitialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190404184050-initial.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190405112544Increase_asset_code_sizeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x4b\x2c\x2e\x4e\x2d\x29\xe6\x52\x50\x50\x50\x80\xc8\x3a\xfb\xfb\x84\xfa\xfa\x29\x24\xe7\xa7\xa4\x2a\x94\x54\x16\xa4\x2a\x24\x67\x24\x16\x25\x26\x97\xa4\x16\x29\x94\x25\x16\x55\x66\xe6\xa5\x6b\x98\x99\x68\x5a\x73\x91\x62\x58\x62\x5e\x72\x46\x7e\x51\x3c\x58\x3a\x9e\xb0\xc9\xc8\xae\x76\xc9\x2f\xcf\xa3\x96\xbb\x0d\x8d\x68\xe5\x6e\xb0\xc9\x80\x00\x00\x00\xff\xff\x5e\x84\x69\x2a\x6e\x01\x00\x00")

func migrations20190405112544Increase_asset_code_sizeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190405112544Increase_asset_code_sizeSql,
		"migrations/20190405112544-increase_asset_code_size.sql",
	)
}

func migrations20190405112544Increase_asset_code_sizeSql() (*asset, error) {
	bytes, err := migrations20190405112544Increase_asset_code_sizeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190405112544-increase_asset_code_size.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190408115724Add_new_asset_fieldsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4d\x8f\x9b\x30\x10\x86\xef\xfc\x8a\x51\x2e\x39\x34\xa9\x7a\xeb\x21\x27\x5a\xc8\x89\x40\x45\xe1\x6c\x19\x3c\xa5\xa3\x1a\x83\x3c\xb6\x9a\xfc\xfb\x2a\x1f\xdd\x64\xd7\x64\x13\xb4\x57\xfb\x7d\x07\x33\x7a\x9e\x68\xbd\x86\x4f\x3d\x75\x56\x3a\x84\x7a\x8c\xe2\xac\x4a\x4b\xa8\xe2\x6f\x59\x0a\xa3\x6f\x34\xb5\x9f\x25\x33\x3a\x8e\x00\x00\xca\x34\x8f\x77\x29\x7c\x2f\xb2\x7a\x97\x03\x31\x7b\xb4\x50\x15\x97\xa4\xf8\x83\x87\x4d\xf4\x60\x44\x9c\x24\xff\xfb\x8a\x78\xd4\xf2\x20\x14\xb6\xd4\x4b\xcd\x40\xc6\x61\x87\x16\xf2\xa2\x82\xbc\xce\x32\x48\xd2\x6d\x5c\x67\x15\x7c\x5d\xbd\xed\x2e\x8c\xec\x71\x01\x0e\xf7\x2e\x8c\x2f\x97\x61\x5e\x21\xb7\x33\xf2\xed\x60\x14\x39\x1a\x0c\x3f\xdf\x21\x16\xa7\x1f\x15\xd2\xb4\xbf\x07\x8b\x0a\x9a\x61\xd0\x28\x4d\xd8\xde\xc6\xd9\xcf\x34\x18\xf0\x8b\xf6\xa8\x84\xf1\x7d\x83\x16\x1a\xea\xc8\x4c\x7c\xf8\x4b\x50\xeb\xe5\x7e\x7e\x89\x58\x78\xa3\xa9\x27\xf7\xde\x3b\xab\xb2\x0e\x9f\x69\x51\x61\x3f\x1e\x97\x23\xc8\xb0\xb3\xbe\x9d\xb9\xa8\x76\xd0\x5a\x3a\xb4\x52\x0b\xa9\x94\x45\x66\xfc\x50\x5b\x30\x75\x46\x3a\x6f\xe7\x8d\xf1\xc6\x59\x9a\x53\x59\xb0\x93\xce\xf3\x7d\x8c\x36\xd1\x2b\x9f\x92\xe1\xaf\x99\x65\xd4\xd5\xa3\xa3\x55\x67\xbf\x1e\x1a\x95\x94\xc5\x8f\x7b\x4a\xad\x82\xc4\x59\x9c\x89\xf3\x93\x20\xe1\xf9\x55\x84\xf0\x2e\x00\x3e\x8c\xdc\x22\x1d\xde\x5e\xc9\x9d\x1c\xfe\x02\x68\x78\x7b\x87\xc1\xa9\xf7\x87\xac\x3d\x93\xba\x61\x6a\x2a\x7e\x61\x67\x62\x8f\x17\x46\x36\xd1\xbf\x00\x00\x00\xff\xff\xd3\x88\x81\xf2\x5b\x05\x00\x00")

func migrations20190408115724Add_new_asset_fieldsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190408115724Add_new_asset_fieldsSql,
		"migrations/20190408115724-add_new_asset_fields.sql",
	)
}

func migrations20190408115724Add_new_asset_fieldsSql() (*asset, error) {
	bytes, err := migrations20190408115724Add_new_asset_fieldsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190408115724-add_new_asset_fields.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190408155841Add_issuers_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x72\xda\x30\x10\xbd\xeb\x2b\x76\x72\x22\xd3\xa4\x3f\x90\x93\x8b\x45\xc7\x83\x23\x53\xc5\x3e\x70\xd2\x98\x68\x21\x9a\x1a\x89\x4a\xeb\xd2\xfc\x7d\xc7\xb6\x30\x1e\x06\x68\xaf\xfb\x9e\x76\xf7\xbd\xb7\x62\xcf\xcf\xf0\x65\x6f\x76\xbe\x26\x84\xea\xc0\xe6\x92\x27\x25\x87\x32\xf9\x96\x73\x38\xb4\x9b\xc6\xbc\x7f\x35\x21\xb4\xe8\x03\xcc\x18\x00\x80\xd1\x10\xd0\x9b\xba\x01\x51\x94\x20\xaa\x3c\x87\x95\xcc\x5e\x13\xb9\x86\x25\x5f\x3f\xf5\x9c\xe1\xa1\xfa\x89\x9f\x40\xf8\x87\x46\xe6\x80\xda\x7a\x8f\xd7\xea\xad\x6f\xae\x95\xc9\xed\x1b\x75\x03\xdb\xa2\x46\x5f\x93\x71\x56\x05\xf4\xbf\xd1\x5f\x23\xd5\x2d\x7d\xdc\x81\xc9\xd7\x36\x6c\xd1\xdf\xa1\x1c\x71\xa3\xfa\x2e\x68\xf5\xc1\x19\x4b\xd7\x48\x1a\x0f\x2e\x18\xba\xd3\xc6\xf9\x9d\xa2\xa3\x21\xba\x84\xd9\xe3\x0b\xeb\x92\xc8\x7a\xa7\xa3\x7d\xd0\xd9\x17\x3e\x5c\xdb\x68\xd8\x20\xb4\xd6\xfc\x6a\x91\x25\x79\xc9\x65\xcc\xa7\x10\xf9\xfa\x22\xa4\x7e\x4e\x92\xa6\x30\x2f\xc4\x5b\x29\x93\x4c\x94\x93\x34\xd4\xd0\x04\x2a\x91\xfd\xa8\x38\xcc\xce\x48\x5c\x20\xd1\x1a\x16\x4b\xd8\x7a\xb7\x87\x3a\x04\xa4\x00\xe4\xe0\xd4\x7b\x3a\x3b\x8e\x1d\x48\x93\xa9\x79\xf5\x2a\xe2\x03\x65\x34\x18\x4b\xb8\x43\x3f\x2a\x7d\x61\xff\xd5\x65\xdc\x7d\xdb\x6d\x3d\xc0\xea\x74\x87\x8b\x42\xf2\xec\xbb\xe8\xce\x0d\x66\xe3\xa8\x47\x90\x7c\xc1\x25\x17\x73\xfe\x06\xe3\xc9\x1a\x1d\x95\xa5\xd8\x20\x21\xac\x06\x6b\x97\xf8\x39\x15\xf9\x8f\x9d\x52\x59\xac\x4e\xd2\x1e\xce\x9e\x3d\x5c\x88\x99\xc6\x71\x5b\x51\x14\xf3\xee\x34\x46\x45\xfd\x3f\x39\x45\xd2\xd5\x9f\xce\x06\xc6\xed\xc7\x2f\x9a\xba\xa3\x65\xec\x6f\x00\x00\x00\xff\xff\xda\x82\x34\x58\xb6\x03\x00\x00")

func migrations20190408155841Add_issuers_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190408155841Add_issuers_tableSql,
		"migrations/20190408155841-add_issuers_table.sql",
	)
}

func migrations20190408155841Add_issuers_tableSql() (*asset, error) {
	bytes, err := migrations20190408155841Add_issuers_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190408155841-add_issuers_table.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190409152216Add_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6e\xc2\x30\x10\x45\xf7\x3e\xc5\x2c\x41\x85\x13\xb0\x4a\xc1\x95\x50\xd3\x40\xdd\x64\xc1\x2a\x72\xe2\x49\x34\x92\x13\x47\xf6\xa0\x56\x3d\x7d\x85\x4b\x53\x51\x11\x54\x36\xd9\xfc\x97\xff\x9f\xa5\x11\xcb\x25\x3c\x74\xd4\x7a\xcd\x08\xc5\x20\xd6\x4a\x26\xb9\x84\x3c\x79\x4c\x25\xb0\xd7\x06\x03\xcc\x04\x00\x00\x19\x08\xe8\x49\x5b\xc8\x76\x39\x64\x45\x9a\xc2\x5e\x6d\x5f\x12\x75\x80\x67\x79\x58\x44\xa6\xf1\xae\x67\x42\x5f\x92\x01\xc6\x0f\xfe\x45\x8b\x6c\xfb\x5a\xc8\x85\x88\x98\x45\xd3\xa2\x2f\x6b\xeb\x02\x96\x4c\x1d\xc2\xe9\x13\x58\x77\x03\x7f\x8e\xff\x7c\x57\xba\xa6\xb9\xd2\x77\x2e\xaa\x74\xc0\x72\x8a\x18\x01\x5d\xd7\xee\xd8\xf3\x74\xde\xc5\xd8\xb8\x63\x65\x11\x06\x8f\x35\x05\x72\xfd\x55\x34\x04\xe4\xd3\x16\xf5\x8c\x2d\x7a\x50\xf2\x49\x2a\x99\xad\xe5\x1b\xc4\x2c\xc0\x8c\xcc\xfc\xac\x17\x67\xd1\xdf\x34\xfc\x61\x6e\x48\x8e\xc8\xbf\x3c\x47\xfa\x2e\xd5\xf8\x3a\x0a\x65\x40\x6b\xd1\x43\xe5\x9c\x45\xfd\xb7\x7a\xf0\x54\xe3\xf4\xbe\x98\xaf\xc4\xc5\x3d\x6d\xdc\x7b\x2f\x36\x6a\xb7\xbf\xb8\xa7\x95\xf8\x0a\x00\x00\xff\xff\x34\x90\x14\x23\x75\x02\x00\x00")

func migrations20190409152216Add_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190409152216Add_trades_tableSql,
		"migrations/20190409152216-add_trades_table.sql",
	)
}

func migrations20190409152216Add_trades_tableSql() (*asset, error) {
	bytes, err := migrations20190409152216Add_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190409152216-add_trades_table.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190409172610Rename_assets_desc_descriptionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x4b\x2c\x2e\x4e\x2d\x29\xe6\x52\x50\x50\x50\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x50\x4a\x49\x2d\x4e\x56\x52\x08\xf1\x57\x00\x31\x8a\x32\x0b\x4a\x32\xf3\xf3\xac\xb9\x50\x8c\x74\xc9\x2f\xcf\x23\xc9\x50\x24\xa3\x40\x26\x43\xec\xb0\xe6\x02\x04\x00\x00\xff\xff\x80\x17\x6b\xa4\xa8\x00\x00\x00")

func migrations20190409172610Rename_assets_desc_descriptionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190409172610Rename_assets_desc_descriptionSql,
		"migrations/20190409172610-rename_assets_desc_description.sql",
	)
}

func migrations20190409172610Rename_assets_desc_descriptionSql() (*asset, error) {
	bytes, err := migrations20190409172610Rename_assets_desc_descriptionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190409172610-rename_assets_desc_description.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190410094830Add_assets_issuer_account_fieldSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xbf\xee\x82\x30\x1c\x04\xf0\xbd\x4f\x71\xe3\xef\x17\xc5\x17\x60\xaa\x94\x81\xa4\x7e\xab\xd8\x0e\x4e\x04\x6b\x63\x88\x0a\x84\x96\xa8\x6f\x6f\x8c\x3a\x48\xfc\x37\x5f\xf2\xc9\xdd\xb1\x28\xc2\xe8\x50\x6d\xbb\x32\x38\x98\x96\x71\xa9\xd3\x1c\x9a\x4f\x65\x8a\xb6\x5f\xef\x2b\x3b\x29\xbd\x77\xc1\x33\x00\xe0\x42\x20\x51\xd2\xcc\x08\x95\xf7\xbd\xeb\x8a\xd2\xda\xa6\xaf\x03\x82\x3b\x05\x90\xd2\x20\x23\x65\xcc\xbe\x38\x22\x57\x73\x24\x8a\x96\x3a\xe7\x19\x69\xdc\xa2\xc2\x36\x1b\x57\xdc\xe1\x9d\x3b\x0f\x18\x45\x72\xf5\xb6\xd3\x27\xea\xd1\xd1\x50\xb6\x30\x29\xfe\xae\xd9\x78\x30\xe0\x3f\x66\xec\xe9\x0b\xd1\x1c\xeb\xdf\x56\xbc\xb8\x23\x66\x97\x00\x00\x00\xff\xff\xd9\xd1\xc9\x0f\x58\x01\x00\x00")

func migrations20190410094830Add_assets_issuer_account_fieldSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190410094830Add_assets_issuer_account_fieldSql,
		"migrations/20190410094830-add_assets_issuer_account_field.sql",
	)
}

func migrations20190410094830Add_assets_issuer_account_fieldSql() (*asset, error) {
	bytes, err := migrations20190410094830Add_assets_issuer_account_fieldSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190410094830-add_assets_issuer_account_field.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190411165735Data_seed_and_indicesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xe2\x3c\x10\xbe\xe7\x57\xf8\x56\xd0\xdb\x42\x6f\xaf\xd4\x6a\x0f\xb4\x49\xb5\x48\x5d\x58\x01\xdd\xed\xcd\x32\xf6\x00\xa3\xfa\x23\x6b\x8f\xa1\xfc\xfb\x55\x12\xa7\x24\xa5\x95\xba\xa7\xcc\xc7\xe3\x99\x27\xf3\x95\x5d\x5d\xb1\xff\x0c\x6e\xbd\x20\x60\x4f\x65\xa5\x2e\x01\x14\x9b\x86\x10\xc1\xb3\x8d\xf3\xec\xc2\x0a\xc2\x3d\x5c\x30\x11\x02\x50\xc8\xa6\xb3\x65\xb1\x58\xb1\xe9\x6c\x35\x67\x65\x5c\x6b\x94\x23\xac\xd1\x81\x0d\x32\xc6\x58\x32\xf2\x17\x38\x5e\xd6\xba\x15\x06\x1a\x29\x7a\xdd\x08\xe4\x8c\xe6\x6f\xda\x06\x14\x78\x41\xe8\x2c\x0f\xe0\xf7\xe0\x1b\xb3\x88\xb4\xeb\x19\xc8\x0b\x1b\x36\xe0\x7b\xc6\x03\xac\x79\x8d\x04\xab\x4a\x87\x96\x1a\xb3\x82\xd2\x05\xa4\x1e\xd4\xf9\x2d\xa7\x03\x12\x81\xcf\x86\xec\xd7\xe4\xf1\xa9\x58\x26\xce\xed\x4f\x36\xc0\x8b\x1c\xb7\x48\x42\xdf\x21\x05\x96\xc3\x1e\xb4\x2b\x0d\x58\x62\x0f\x2e\x5a\x55\x33\x6d\x91\x3b\xa2\xf2\x66\x3c\x56\xcd\x83\x35\x52\x18\x39\xbf\x6d\xbd\xff\xfa\xad\xa2\x85\x9b\xf1\x38\xb1\x1c\x49\x67\xba\xa1\xab\xc8\xd9\xf0\x36\xfb\xa8\x07\x4d\x77\xd2\xef\x48\xa7\x52\xc9\xe9\x58\x26\xc9\x46\xc3\x85\x94\x2e\x5a\x0a\x9d\x02\x7b\xf8\x13\xd1\x83\xea\x99\xf6\x4e\x8a\xb5\x4e\x0f\x85\xa9\xde\x24\xb9\xca\xc2\xa5\xb3\xe4\x9d\xd6\xa0\xf8\xfa\xc8\x95\x33\x02\x6d\xf2\x5b\xb9\x73\x9e\xb7\xb0\x96\x45\xcf\x7c\xa2\x84\x81\xef\x85\xc6\x94\xbb\x16\x9b\x31\x00\xef\x5d\x6a\x9a\x16\x81\xba\xa8\x5a\x97\x3b\x90\x2f\x2d\x67\x85\xa1\xd4\xe2\xc8\x15\x48\x34\x42\x87\xf7\x53\xa7\x20\x48\x8f\x65\x15\xf8\x32\x55\xc7\x2a\xac\xd4\xf0\x46\xa3\x61\xd6\xd0\x6c\xe3\x6e\xf0\x15\x14\xb7\xd1\xac\xdb\x01\x32\xe2\xb5\xa7\x63\xe0\xd1\x6a\x34\x48\xed\x1b\x0f\x0a\x4c\x9d\x8a\xa3\x0d\xe4\xa3\xec\xe4\x91\x4e\x6b\x41\xe0\x85\xe6\x42\x29\x0f\x21\xc0\xa7\x1e\x1e\x70\x6b\x05\x45\x7f\x82\x44\x4b\x1e\x5b\x35\x90\xa0\xf8\xc6\xbf\x5a\x3f\xde\x56\x28\xa9\xa9\xd7\x67\x93\xfe\x9c\xdf\xb5\xe3\xd6\x1b\xfa\xeb\xe6\xf3\x30\x79\x5c\x16\x67\xe2\xf5\x28\xb9\x57\x8b\xa7\xe2\xe3\xe1\x3d\xf7\x58\x77\x18\x0c\xcf\xc4\xff\x3f\xda\xb1\x93\xfc\xc9\x6a\x74\xb9\x7c\xc6\xf7\xab\x6b\x36\x58\x16\x8f\xc5\xfd\x8a\xa1\x62\x0f\x8b\xf9\x8f\xf7\x57\xec\xf7\xf7\x62\x51\x74\xae\x18\xfb\x76\xba\x81\x93\x59\xde\x3d\x23\x95\xeb\x0b\x3b\x3b\xec\xd7\xbb\x5e\xe1\xfb\x45\x31\x59\x15\x6c\x3a\xcb\x8b\xe7\xea\xb2\x29\x08\x5c\x83\xda\x82\xe7\x52\xbb\x00\x9c\xd0\x00\x47\xf5\xca\xe6\xb3\x96\x61\x03\x63\x83\x33\x1c\xcb\x8b\xe5\x7d\x15\xb5\x77\xcf\x73\x77\xb0\x59\xbe\x98\xff\xfc\x42\x96\xdb\xec\x6f\x00\x00\x00\xff\xff\x16\x93\x3a\xb5\x0b\x06\x00\x00")

func migrations20190411165735Data_seed_and_indicesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190411165735Data_seed_and_indicesSql,
		"migrations/20190411165735-data_seed_and_indices.sql",
	)
}

func migrations20190411165735Data_seed_and_indicesSql() (*asset, error) {
	bytes, err := migrations20190411165735Data_seed_and_indicesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190411165735-data_seed_and_indices.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190425110313Add_orderbook_statsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x59\x82\x2e\xdc\x17\x60\x95\x4b\x7c\x25\xd4\x34\xa1\x26\x59\xb0\xb2\x1c\x3c\x0a\xa3\xfc\x38\xf2\x38\x45\xed\xd3\x57\x44\x15\x15\x69\x0b\x55\xd7\x3e\xe7\x7c\x23\xf9\x13\xcb\x25\xfc\x69\xa9\xf2\x26\x20\x14\xbd\x58\x2b\x19\xe5\x12\xf2\xe8\x5f\x22\xc1\x79\x8b\xbe\x74\xae\xd6\x1c\x4c\x60\x98\x09\x00\x00\xb2\xc0\xe8\xc9\x34\x90\x66\x39\xa4\x45\x92\xc0\x56\x6d\x1e\x23\xb5\x87\x07\xb9\x5f\x88\x31\x54\x1a\x46\x6d\x98\x31\x68\xb2\x40\x5d\xc0\x0a\x3d\x28\xf9\x5f\x2a\x99\xae\xe5\x0e\xc6\x37\x86\x19\xd9\xf9\x65\x67\x31\x56\x0f\x6e\xe8\x02\xfa\x5f\xb4\xc7\x7a\x37\xb4\xba\x24\xcb\x50\x52\x45\x5d\x98\x8c\x97\x64\xf5\xb3\x6b\x86\x16\xc1\xba\xa1\x6c\x10\x7a\x8f\x07\x62\x72\xdd\x24\x79\xa4\xea\x88\x1c\xce\x5b\xb7\xa2\x17\xa6\xe1\xfa\x1b\xa6\xe1\xfa\x87\xcc\xc6\x9d\xce\x48\xc3\xf5\x5d\x24\xf7\x1e\xcd\xcd\xcb\x3e\x52\xba\x25\xab\x7b\x77\xbe\xec\xde\xec\xd0\x5b\x13\xd0\x6a\x13\x20\x50\x8b\x1c\x4c\xdb\x87\xd7\x4b\x4a\xcc\x57\x22\x4a\x72\xa9\xde\x0d\xc9\xd2\x64\x0f\xfd\x50\x36\x74\xf8\x3b\xb1\x65\x9c\x8b\xe2\x18\xd6\x59\xba\xcb\x55\xb4\x49\xf3\xa9\x50\x7a\xb4\xe4\xfa\xbf\x6b\x7c\x81\x22\xdd\x3c\x15\x12\x66\x57\x12\x2d\x3e\x89\x31\x5f\x89\x2b\x7d\x63\x77\xea\x44\xac\xb2\xed\xd7\xfa\xae\xc4\x5b\x00\x00\x00\xff\xff\x06\x01\x94\xcd\xed\x02\x00\x00")

func migrations20190425110313Add_orderbook_statsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190425110313Add_orderbook_statsSql,
		"migrations/20190425110313-add_orderbook_stats.sql",
	)
}

func migrations20190425110313Add_orderbook_statsSql() (*asset, error) {
	bytes, err := migrations20190425110313Add_orderbook_statsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190425110313-add_orderbook_stats.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190426092321Add_aggregated_orderbook_viewSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\xcf\x6e\xb2\x40\x14\xc5\xf7\x3c\xc5\xdd\xa9\xf9\xd0\x7c\x7b\xd3\x05\xc5\xb1\xa1\xb1\x62\x40\xfb\x67\x35\xb9\x30\x13\x9c\x20\x8c\xe1\x0e\xb5\x8f\xdf\x0c\x44\x81\x88\x65\x45\x0e\xf7\x77\x39\x99\x73\xc6\x99\xcf\xe1\x5f\xa1\xb2\x0a\x8d\x84\xc3\xd9\xf1\x23\xe6\xed\x19\x84\x11\x44\x6c\xb7\xf1\x7c\x06\xef\x01\xfb\x00\xcc\xb2\x4a\x66\x68\xa4\xe0\xba\x12\xb2\x4a\xb4\xce\xc1\x8b\x1d\x00\x80\x98\x6d\x98\xbf\x6f\x5e\xed\x93\xea\x32\x45\x33\x4d\x3c\x22\x69\x16\xa9\x16\xd2\x85\x09\x9f\xb8\x90\x76\xca\x0c\x90\xc0\x54\x28\x24\x3f\xa3\xaa\x78\x89\x85\x74\x6f\x1b\x7a\xa8\x9d\x4b\x90\x24\x47\x2b\xf1\x66\x5b\xf7\xa7\xe1\x5c\xaa\xeb\xd2\xc8\x6a\x74\xd4\x0f\xbd\x0d\x8b\x7d\x36\xa5\xba\x98\x6a\x5a\x94\x75\xc1\x13\x25\x68\xe6\xc2\xff\x19\x78\x31\x5c\x85\xc7\x48\xa2\x04\xff\xd6\xa7\xba\x90\x16\x5a\xb4\x58\x27\x8e\x80\x05\xfe\x58\xf0\xa8\xb2\xa3\x24\x63\xd7\xf7\xc8\x9e\xfa\xb7\x4d\xa4\x7c\x68\xd3\x0a\x8f\x11\xa4\xfc\xde\x66\x27\x8e\xd9\x54\xa5\x05\x4f\xfa\x62\xfd\x20\xe5\x3d\xb0\x13\x1b\x6e\x1d\x85\x6f\x70\x2b\x00\x27\x83\x86\xec\x98\xa6\xe6\xf3\x6b\x18\x6c\xa1\x39\xfe\x46\x6d\x73\x84\x70\x0b\xf6\xf8\xba\x14\x95\x80\xa7\x6b\xc8\x4a\x8c\x91\x6d\xb2\xa0\x4b\x4b\x0e\x73\x6d\xe0\x74\x00\xbf\x44\xe1\x61\x07\xcf\x5f\x77\x8d\xba\xab\xce\x48\x47\x96\xce\xe0\x0a\xac\xf4\xa5\x74\x56\x51\xb8\x6b\x7b\x1f\xac\x81\x7d\x06\xf1\x3e\x1e\xbd\x01\x4b\xe7\x37\x00\x00\xff\xff\x72\xc3\x7e\xff\x3f\x03\x00\x00")

func migrations20190426092321Add_aggregated_orderbook_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190426092321Add_aggregated_orderbook_viewSql,
		"migrations/20190426092321-add_aggregated_orderbook_view.sql",
	)
}

func migrations20190426092321Add_aggregated_orderbook_viewSql() (*asset, error) {
	bytes, err := migrations20190426092321Add_aggregated_orderbook_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190426092321-add_aggregated_orderbook_view.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20190404184050-initial.sql": migrations20190404184050InitialSql,
	"migrations/20190405112544-increase_asset_code_size.sql": migrations20190405112544Increase_asset_code_sizeSql,
	"migrations/20190408115724-add_new_asset_fields.sql": migrations20190408115724Add_new_asset_fieldsSql,
	"migrations/20190408155841-add_issuers_table.sql": migrations20190408155841Add_issuers_tableSql,
	"migrations/20190409152216-add_trades_table.sql": migrations20190409152216Add_trades_tableSql,
	"migrations/20190409172610-rename_assets_desc_description.sql": migrations20190409172610Rename_assets_desc_descriptionSql,
	"migrations/20190410094830-add_assets_issuer_account_field.sql": migrations20190410094830Add_assets_issuer_account_fieldSql,
	"migrations/20190411165735-data_seed_and_indices.sql": migrations20190411165735Data_seed_and_indicesSql,
	"migrations/20190425110313-add_orderbook_stats.sql": migrations20190425110313Add_orderbook_statsSql,
	"migrations/20190426092321-add_aggregated_orderbook_view.sql": migrations20190426092321Add_aggregated_orderbook_viewSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20190404184050-initial.sql": &bintree{migrations20190404184050InitialSql, map[string]*bintree{}},
		"20190405112544-increase_asset_code_size.sql": &bintree{migrations20190405112544Increase_asset_code_sizeSql, map[string]*bintree{}},
		"20190408115724-add_new_asset_fields.sql": &bintree{migrations20190408115724Add_new_asset_fieldsSql, map[string]*bintree{}},
		"20190408155841-add_issuers_table.sql": &bintree{migrations20190408155841Add_issuers_tableSql, map[string]*bintree{}},
		"20190409152216-add_trades_table.sql": &bintree{migrations20190409152216Add_trades_tableSql, map[string]*bintree{}},
		"20190409172610-rename_assets_desc_description.sql": &bintree{migrations20190409172610Rename_assets_desc_descriptionSql, map[string]*bintree{}},
		"20190410094830-add_assets_issuer_account_field.sql": &bintree{migrations20190410094830Add_assets_issuer_account_fieldSql, map[string]*bintree{}},
		"20190411165735-data_seed_and_indices.sql": &bintree{migrations20190411165735Data_seed_and_indicesSql, map[string]*bintree{}},
		"20190425110313-add_orderbook_stats.sql": &bintree{migrations20190425110313Add_orderbook_statsSql, map[string]*bintree{}},
		"20190426092321-add_aggregated_orderbook_view.sql": &bintree{migrations20190426092321Add_aggregated_orderbook_viewSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

