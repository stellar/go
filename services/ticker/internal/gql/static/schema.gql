schema {
	query: 	Query
}

type Query {
	# retrieve all validated assets on the Stellar network.
	assets: [Asset!]!

	# retrieve all validated issuers on the Stellar network.
	issuers: [Issuer!]!

	# retrieve trade stats from the last <numHoursAgo> hours
	# (default = 24 hours). optionally provide counter and
	# base asset info for filtering. optionally provide whether
	# or not the query comes from the new version of the endpoint,
	# as this affects how the base/counter are interpreted.
	markets(
		baseAssetCode: String
		baseAssetIssuer: String
		counterAssetCode: String
		counterAssetIssuer: String
		numHoursAgo: Int
		isNewEndpoint: Boolean
	): [Market]!

	# retrieve aggregated trade stats for the last <numHoursAgo>
	# hours. optionally provide the name of the trade pair (e.g.
	# XLM_BTC) for filtering results. optionally provide whether
	# or not the query comes from the new version of the endpoint,
	# as this affects how the trade pair is interpreted.
	ticker(
		pairName: String
		numHoursAgo: Int
		isNewEndpoint: Boolean
	): [AggregatedMarket]!
}

scalar BigInt
scalar Time

type Asset {
	code: String!
	issuerAccount: String!
	type: String!
	numAccounts: Int!
	authRequired: Boolean!
	authRevocable: Boolean!
	amount: Float!
	assetControlledByDomain: Boolean!
	anchorAssetCode: String!
	anchorAssetType: String!
	isAssetAnchored: Boolean!
	displayDecimals: BigInt!
	name: String!
	desc: String!
	conditions: String!
	fixedNumber: BigInt!
	maxNumber: BigInt!
	isUnlimited: Boolean!
	redemptionInstructions: String!
	collateralAddresses: String!
	collateralAddressSignatures: String!
	countries: String!
	status: String!
	issuerID: Int!
}

type Market {
	tradePair: String!
	baseAssetCode: String!
	baseAssetIssuer: String!
	counterAssetCode: String!
	counterAssetIssuer: String!
	baseVolume: Float!
	counterVolume: Float!
	tradeCount: Int!
	open: Float!
	low: Float!
	high: Float!
	change: Float!
	close: Float!
	intervalStart: Time!
	firstLedgerCloseTime: Time!
	lastLedgerCloseTime: Time!
	orderbookStats: OrderbookStats!
}

type AggregatedMarket {
	tradePair: String!
	baseAssetCode: String!
	counterAssetCode: String!
	baseVolume: Float!
	counterVolume: Float!
	tradeCount: Int!
	open: Float!
	low: Float!
	high: Float!
	change: Float!
	close: Float!
	intervalStart: Time!
	firstLedgerCloseTime: Time!
	lastLedgerCloseTime: Time!
	orderbookStats: OrderbookStats!
}

type OrderbookStats {
 	bidCount: BigInt!
	bidVolume: Float!
	bidMax: Float!
	askCount: BigInt!
	askVolume: Float!
	askMin: Float!
	spread: Float!
	spreadMidPoint: Float!
}

type Issuer {
	publicKey: String!
	name: String!
	url: String!
	tomlURL: String!
	federationServer: String!
	authServer: String!
	transferServer: String!
	webAuthEndpoint: String!
	depositServer: String!
	orgTwitter: String!
}
