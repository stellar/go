// Code generated by go-bindata.
// sources:
// graphiql.html
// schema.gql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _graphiqlHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func graphiqlHtmlBytes() ([]byte, error) {
	return bindataRead(
		_graphiqlHtml,
		"graphiql.html",
	)
}

func graphiqlHtml() (*asset, error) {
	bytes, err := graphiqlHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "graphiql.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x41\x6f\x23\x37\x0f\x3d\xcf\xfc\x0a\x26\x7b\x49\x80\x0f\x39\x7c\xe8\x69\xd0\x16\xb0\xe3\x16\x0d\xba\xd9\x6e\xd7\x49\x51\xc0\x08\x0a\x7a\x44\x8f\x09\x6b\xa4\x59\x4a\x72\x62\x2c\xf2\xdf\x0b\x69\x6c\x47\xe3\x49\x52\xf4\xdc\xd3\x0c\x1f\xf9\x28\xea\x89\xa4\xab\xd7\xd4\x22\x7c\x2b\x8b\xaf\x81\x64\x57\x41\xf1\x7b\xfc\x96\xcf\x65\xe9\x77\x1d\x41\xb2\xa2\xfb\x03\x08\x79\x61\xda\x12\xa0\xd6\xb0\x45\xcd\x0a\x3d\x29\x40\xe7\xc8\x3b\xb0\x06\xfc\x9a\x60\xc6\x0d\x7b\xd4\x53\xf6\x0e\x0c\xf9\x47\x2b\x9b\xab\xb2\xe8\x63\x2a\x58\x4c\xe2\xcf\xd9\xc3\x59\xf9\x4e\x42\x76\x2e\x90\xfc\x43\xc6\x7d\x50\x05\x8b\x9b\xf4\x37\xca\xe9\x05\x15\x81\xf3\xe8\x1d\xac\xc4\xb6\x29\x97\x46\xe7\xe1\x7b\x13\xda\x5f\x6c\x10\x37\x69\xec\x8f\xb0\x8e\x7f\x91\x79\xa1\x68\x85\x41\x7b\xf8\x01\xfe\xff\x5d\x0f\x5f\x5e\x81\xed\x3c\x5b\x83\x5a\xef\xa0\x13\xbb\x65\x45\x50\xdb\x60\x3c\x09\xa0\x51\x91\xb7\x44\x47\xbd\x08\xc0\x66\x65\x61\x65\x05\x56\xac\x3d\x09\x9b\xe6\xaa\x2c\x5a\x94\x0d\x79\x77\x51\x16\x45\x0c\x4d\x0a\x5c\x5b\x45\x15\xcc\x7d\x0c\xc9\xf1\xfe\x2e\x99\x67\x7f\xd6\x6b\xa4\xdc\x35\xe2\x65\x57\xac\xe0\xc6\xf8\xb2\xb8\xac\x60\x71\x9b\x4a\x19\xa9\xdf\x34\x42\x4d\x92\x7e\x20\x9a\x95\x37\x34\x8b\xec\xa4\xcf\xab\xf2\x20\x68\x76\x1e\xec\x0a\x3a\x64\xf9\x84\x2d\x39\xb8\xa0\xab\x28\xc5\x07\x58\x9c\xff\x39\x9b\xfe\x35\xbd\xbb\x3e\xff\x1f\xa4\xdf\xfb\xf9\xec\xfc\xe1\x12\xac\x00\x82\x63\xd3\x68\x82\x3a\x88\x90\xa9\x77\x3d\x2b\x85\x9d\x5f\x46\xf2\x40\x59\x10\x72\x41\x7b\x77\x55\x16\x9e\xeb\x0d\xc9\x45\xd2\x64\x20\xd1\xb1\x80\x0a\x16\x3d\xf8\xf0\xa6\x36\x93\xa3\x0a\x47\x95\x9e\xcb\xd2\xd5\xa8\x51\x60\xca\x4d\x0c\xdc\x5b\x77\xdc\xd2\x7e\x3c\x92\xfa\x71\x3c\xf2\x93\xcf\x0e\xed\x39\xa9\xd3\x23\x65\x78\x24\x65\xa6\x09\xed\x3e\xc6\xa5\x52\xce\xca\x02\x83\x5f\x7f\xa1\xaf\x81\x85\x54\x05\x53\x6b\x35\xa1\x39\xe2\x5b\x5b\xe3\x52\xd3\xc0\xd1\xf6\x67\xfc\xac\x2d\xa6\x04\x7d\xaf\x18\x2f\x56\x6b\x52\xd3\xdd\xcc\xb6\xc8\x66\x40\x31\xf5\xda\x8e\x9b\x6a\xe8\xb9\x1b\x96\xca\x2e\xa1\x93\x14\x30\x2c\x4d\xb1\xeb\x34\xee\x66\x54\x73\x8b\xda\x55\x7b\xb9\xe2\xfd\xb0\xcd\x73\x28\x72\x75\x66\xd6\xd6\x28\x8e\xfd\xe3\x32\x70\xc5\x4f\xa4\x3e\x85\x76\x19\xfb\xf9\x98\xa8\xc5\xa7\x11\xc6\xee\xde\x68\x6e\xd9\x0f\xab\x11\x52\xd4\xa6\xb6\xbc\x31\xce\x4b\xa8\x4f\x4f\xa8\xad\xd6\xe8\x49\x50\x4f\x94\x12\x72\x8e\xde\xf5\xce\xb9\x31\xe8\x83\x9c\x44\x05\x13\xc7\x27\xc7\xe2\xd8\x04\x37\x6a\x82\x9b\xd9\xfe\x69\x0f\x2b\xb5\xef\xaf\xd8\x34\x69\xdc\x3e\x23\x4b\x46\x7a\x75\x47\xe4\xf8\x70\xd6\x0f\xb5\xbc\xb2\x23\x4e\x5c\x23\x5e\xcc\xf8\x87\xd5\x21\x3e\xd1\xa1\x79\xf6\x84\x53\x38\x15\x7a\xdd\xf7\x59\x2f\xbe\xed\xc8\xbc\xf8\xb5\x7d\x7c\x31\xd6\xdc\xac\xb3\x8c\x6b\x34\x4d\x7e\x82\xb6\x2e\x33\x39\x1e\xb7\x45\x3d\xf7\x28\xbe\x4a\xa3\x95\x9a\x40\x9c\xff\x48\xaa\x21\xb9\x8e\xf1\x11\x3e\x3a\xe3\x42\x7a\xcb\x67\x45\x91\x2c\xad\xdd\xcc\xe3\x0e\xab\xe0\xb7\x81\xfd\xf2\x06\xa7\xd3\xfe\x6f\x5f\xe3\x1d\xcd\xff\xcb\xb2\x0e\x71\xf8\x56\x42\xb1\x64\xb5\xbf\xe1\x71\x70\x97\xac\x4e\x95\x58\xb2\xba\xc5\xa7\x7c\x89\x6d\x4e\x59\xe8\x36\xa7\x2c\x74\x9b\x5b\xce\xf4\x72\x9d\x10\xaa\x53\xfb\x96\xd5\x67\xcb\xd9\x8a\x3c\x54\xdb\x4f\x44\x7c\xfa\x2e\x2c\x35\xd7\xbf\xd2\x2e\xdf\xcd\xc3\xdd\x15\x44\xe7\x7b\xdc\xb6\xfa\xfe\xcb\xc7\x7c\x6f\x91\x22\xc1\xb8\x6b\xe6\x24\xdb\xc1\xa0\xc5\xd5\x3d\x02\xbd\xa0\x71\x2b\x92\x91\xe3\x91\x96\x93\xe0\xd7\x3f\x19\xd5\xf5\x55\x67\xeb\xb3\xb3\x8e\xfd\x88\x61\xa5\xb9\x7b\x64\xef\x73\xf0\xb9\xfc\x3b\x00\x00\xff\xff\x5e\x58\x16\x8c\xda\x09\x00\x00")

func schemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGql,
		"schema.gql",
	)
}

func schemaGql() (*asset, error) {
	bytes, err := schemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.gql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": graphiqlHtml,
	"schema.gql": schemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"graphiql.html": &bintree{graphiqlHtml, map[string]*bintree{}},
	"schema.gql": &bintree{schemaGql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

