// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html (1.182kB)
// schema.gql (2.743kB)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _graphiqlHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func graphiqlHtmlBytes() ([]byte, error) {
	return bindataRead(
		_graphiqlHtml,
		"graphiql.html",
	)
}

func graphiqlHtml() (*asset, error) {
	bytes, err := graphiqlHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "graphiql.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x8, 0xb4, 0x3a, 0xe7, 0xdb, 0xc8, 0x3d, 0x2d, 0x1f, 0x1c, 0x2d, 0xd3, 0x9b, 0xf2, 0xd8, 0xe5, 0xd6, 0x5f, 0x3a, 0x7c, 0x6d, 0x80, 0xf7, 0x40, 0xdc, 0x58, 0xf1, 0x75, 0xbd, 0xf0, 0xa1}}
	return a, nil
}

var _schemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x41\x2f\x1b\xa0\x48\x81\xa2\x27\xa3\x2d\xe0\x24\x2d\x1a\x34\x4e\xb7\xeb\x6c\x51\x20\x28\x8a\xb1\x38\x92\x08\x53\xa4\x76\x38\xb2\x63\x2c\xf2\xef\x05\x29\xd9\xa1\x24\x6f\x0e\x3d\xf4\xd2\x93\xc5\x19\xbe\xd1\x68\xde\x9b\x67\x5f\xd4\xd4\x20\x7c\xce\xb3\x4f\x1d\xf1\x61\x01\xd9\xef\xe1\x37\x7f\xc9\x73\x39\xb4\x04\xf1\x14\xd2\x5f\x01\x93\xb0\xa6\x1d\x01\x1a\x03\x3b\x34\x5a\xa1\x90\x02\xf4\x9e\xc4\x83\xb3\x20\x35\xc1\x5a\xc8\x18\x64\xb0\x24\x7b\xc7\xdb\xab\x3c\xeb\xf3\x0b\x78\x5a\x86\x87\x8b\xbf\x2e\xf2\x37\x8a\x69\xef\x3b\xe2\x37\xaa\x0d\x17\x16\xf0\x74\x17\x9f\x66\xf5\x84\x51\x11\x78\x41\xf1\x50\xb2\x6b\x62\x1d\x83\x5e\xe0\x7b\xdb\x35\xbf\xb8\x8e\xfd\xb2\x72\x3f\x42\x1d\x9e\x02\xf2\x9d\xa2\x12\x3b\x23\xf0\x03\x7c\xfb\x5d\x1f\xbe\xbc\x02\xd7\x8a\x76\x16\x8d\x39\x40\xcb\x6e\xa7\x15\x41\xe1\x3a\x2b\xc4\x80\x56\x05\xdc\x06\x3d\xf5\x1f\x0f\xda\x96\x0e\x4a\xc7\x50\x6a\x23\xc4\xda\x56\x67\x0b\xec\x6b\x92\x9a\x38\x80\x1d\x83\x75\x12\x7b\x8b\x73\x87\xc2\x35\x94\x34\x6c\x69\x0f\x3b\x62\xaf\x9d\x05\x57\xc6\x10\x59\xd5\x3a\x6d\xe5\xeb\x80\x47\x0f\x52\x6b\x0f\x58\x96\x54\x88\x87\xda\xed\xe3\xa5\xd0\xd4\x37\xa7\x46\x99\x40\x87\xa7\x96\x49\x48\x5d\xe5\x59\x83\xbc\x25\xf1\xef\xf2\x2c\x0b\x37\x23\x23\x37\x4e\xd1\x02\xd6\x12\xda\x4e\xe3\xfd\x7c\x93\xcc\x50\xf6\x1c\x28\x4d\xcd\x70\xc9\xd8\x17\x70\x67\x25\xcf\x32\xed\x1f\x68\xff\xd3\xf0\x41\x0b\xb8\x76\xce\x10\xda\x3c\xbb\x5c\xc0\xd3\x2a\xf6\x38\x93\x49\x55\x31\x55\x51\x23\x23\x86\x1d\x7f\x81\xe0\x80\x8e\x64\x9e\xa5\x22\xce\x18\x1b\x3a\x0e\xb7\xaf\xd9\xa2\x66\x78\x47\x57\xd5\x55\x40\xff\x79\xbf\xfa\xfb\xfa\xf1\xe6\x72\xcc\x2c\x30\xf9\xce\xc8\xf9\xb2\xff\x01\xc3\x49\xa7\xda\x4f\xe8\x15\x5d\x6c\x89\x03\xbb\x21\xff\x80\x0d\xfd\x7b\x1a\x96\xa7\x81\x9f\x08\x79\xc9\x73\x5f\x60\xd8\xc7\x6b\x5d\x85\x0a\xc3\xe9\x51\x37\x34\xd8\x45\x54\x40\xb0\x8b\x22\x11\xc8\xc5\x71\x6d\x97\x45\x14\x4a\x12\x0f\xa0\xe4\x68\xbb\x66\xb8\xe3\x63\x8f\x17\x79\x86\x9d\xd4\x1f\xe8\x53\xa7\x99\xd4\xa9\xc5\x53\x7c\xe7\x0a\xdc\x18\x1a\x25\x9a\xfe\x1d\x3f\x1b\x87\xb1\x40\xaf\x57\x2b\xec\x8c\x21\x75\x7d\xb8\x75\x0d\x6a\x3b\x82\xd8\xa2\x76\x73\x61\x8f\x33\x8f\xe3\x56\xb5\x8f\xd1\x65\xbc\x30\x6e\x4d\x69\xdf\x1a\x3c\xdc\x52\xa1\x1b\x34\x7e\x31\x8c\x2b\x7c\x5f\x42\x49\xb8\x48\xbe\x48\x8e\x85\xb3\x4a\x07\x4d\xf9\x24\x58\xea\x67\x52\x0f\x5d\xb3\x09\x3b\x75\x2a\xd4\xe0\xf3\x2c\xa6\xfd\x47\x6b\x74\xa3\x65\xdc\x0d\x93\xa2\x26\x4a\xf5\xce\x7a\xe1\xae\x98\xbe\xa1\x70\xc6\xa0\x10\xa3\x59\x2a\xc5\xe4\x3d\xbd\x99\x5d\xeb\xca\xa2\x74\x3c\xb9\xd5\xd9\xb0\xa9\x69\x2c\x6c\x68\xe7\x67\x22\xb8\xbb\x1d\xa8\x3d\xfe\xc5\xf4\xfa\x0a\xa2\x89\xda\x7e\x8f\x9a\x13\xd0\x59\x9f\x4a\xe3\x63\xbf\x39\xf6\x72\xc6\xa7\x26\xa9\x19\x2e\x54\xfc\xc3\x99\x2e\x50\x74\x14\xcf\x00\x98\x86\x63\xa3\x37\xbd\xce\xfa\xe1\xbb\x96\xec\x6b\xde\xb8\xfd\xeb\xa1\xd6\x55\x9d\x54\xac\xd1\x56\xe9\x1b\x8c\xf3\xc9\x31\x2e\xf4\x0e\xcd\x5a\x90\x65\x11\x57\x2b\x8a\x80\xbd\xdc\x93\xaa\x88\x6f\xc2\xfd\x10\x3e\x25\x83\xf7\x7d\x29\xe7\x58\x11\x6f\x9c\xdb\xae\x83\x5d\x2e\xe0\xb7\xd1\xf9\x95\x83\xe9\xb6\xbf\xc5\xc6\xff\x75\x46\xe3\x38\x7c\xce\x21\xdb\x68\x35\x7c\xe1\x69\x0b\x37\x5a\x4d\x27\xb1\xd1\x6a\x85\xcf\xa9\x23\x6d\xa7\x28\xf4\xdb\x29\x0a\xfd\x76\xa5\x93\x79\xf9\x96\x09\xd5\xf4\xbc\xd2\xea\x7d\xef\xde\x43\xfc\xd8\x6d\x2f\xef\xc0\x63\xdb\x6d\x8c\x2e\x7e\xa5\x43\x6a\xb4\x63\x23\xea\xd8\xa4\xa6\xec\x1a\xf3\xf1\xc3\x7d\x6a\x42\xa4\x88\x31\x18\xc7\x9a\x78\x37\xda\x9a\xe0\xc3\xb3\xa0\x30\x5a\x5f\x12\xcf\x12\x7b\xda\x2c\x3b\xa9\x5f\xff\x73\x12\x2f\x6c\x9d\xd7\x32\x43\x38\xae\x1e\xf7\x5a\x24\x0d\xbe\xe4\xff\x04\x00\x00\xff\xff\xd6\x12\x1d\x20\xb7\x0a\x00\x00")

func schemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGql,
		"schema.gql",
	)
}

func schemaGql() (*asset, error) {
	bytes, err := schemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.gql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x73, 0x58, 0xbe, 0xe8, 0x7a, 0x9e, 0x1d, 0x91, 0x3f, 0xd9, 0x60, 0x83, 0xfd, 0xe, 0xfa, 0xfa, 0x8f, 0xc8, 0x28, 0x93, 0xbb, 0x4a, 0x22, 0xc7, 0x1c, 0x27, 0x6e, 0xcc, 0x57, 0x58, 0xc5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": graphiqlHtml,
	"schema.gql":    schemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"graphiql.html": &bintree{graphiqlHtml, map[string]*bintree{}},
	"schema.gql":    &bintree{schemaGql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
