// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html (1.182kB)
// schema.gql (2.891kB)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _graphiqlHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func graphiqlHtmlBytes() ([]byte, error) {
	return bindataRead(
		_graphiqlHtml,
		"graphiql.html",
	)
}

func graphiqlHtml() (*asset, error) {
	bytes, err := graphiqlHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "graphiql.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x8, 0xb4, 0x3a, 0xe7, 0xdb, 0xc8, 0x3d, 0x2d, 0x1f, 0x1c, 0x2d, 0xd3, 0x9b, 0xf2, 0xd8, 0xe5, 0xd6, 0x5f, 0x3a, 0x7c, 0x6d, 0x80, 0xf7, 0x40, 0xdc, 0x58, 0xf1, 0x75, 0xbd, 0xf0, 0xa1}}
	return a, nil
}

var _schemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4d\x6f\x23\x37\x0c\x3d\xcf\xfc\x0a\x06\xbd\x24\xc0\xc2\x87\xa2\x27\xf7\x03\x70\x92\x16\x0d\x9a\x6c\xb7\x71\xb6\x28\x10\x14\x5d\xce\x88\x9e\x11\xac\x11\xbd\x94\x64\xc7\x58\xe4\xbf\x17\xd2\x8c\x1d\x8d\xed\x4d\x51\x14\xe8\x65\x4f\x1e\x91\x7c\x14\x45\x3e\x3e\xbb\xba\xa5\x0e\xe1\x53\x59\x7c\x0c\x24\xdb\x29\x14\xbf\xc5\xdf\xf2\xb9\x2c\xfd\x76\x45\x90\x4e\xd1\xfd\x15\x08\x79\xd1\xb4\x26\x40\x63\x60\x8d\x46\x2b\xf4\xa4\x00\x9d\x23\xef\x80\x2d\xf8\x96\x60\xee\xc9\x18\x14\xb0\xe4\x37\x2c\xcb\x49\x59\xf4\xfe\x29\x3c\xce\xe2\xc7\xd9\x9f\x67\xe5\x2b\xc9\xb4\x73\x81\xe4\x95\x6c\x43\xc0\x14\x1e\x6f\xd2\xd7\x51\x3e\x2f\xa8\x08\x9c\x47\xef\x60\x21\xdc\xa5\x3c\x06\x9d\x87\xef\x6c\xe8\x7e\xe6\x20\x6e\xd6\xf0\x0f\xd0\xc6\xaf\x88\x3c\x57\xb4\xc0\x60\x3c\x7c\x0f\x5f\x7f\xd3\x9b\x2f\x26\xc0\x2b\xaf\xd9\xa2\x31\x5b\x58\x09\xaf\xb5\x22\xa8\x39\x58\x4f\x02\x68\x55\xc4\x55\xe8\xa8\x7f\x3c\x68\xbb\x60\x58\xb0\xc0\x42\x1b\x4f\xa2\x6d\x73\x32\xc1\xa6\x25\xdf\x92\x44\x30\x0b\x58\xf6\xa9\xb6\xc1\xab\xa0\x43\x59\xc6\x4e\xba\x96\x83\x51\x50\x11\x08\xad\x49\x1c\xa9\x6f\x53\xe0\x50\x67\x84\x7b\x5d\x2f\x49\xa0\xa2\x16\xd7\x9a\x65\x17\xe8\xc6\x09\xfb\x0a\xad\xda\x55\xfe\x26\x42\x1d\xa7\xa0\xe0\x48\xa0\x0b\xce\xef\xab\xfb\xb0\x40\xe3\xe8\x03\x78\x06\x5c\xb3\x56\xe0\x5b\xf4\x13\x28\x8b\xa1\xae\xf3\xb2\x28\x62\xc6\x34\xc6\x2b\x56\x34\x85\xb9\x8f\x6f\xcd\xed\xfd\x50\x32\xcf\x70\xf5\x29\x50\xee\x3a\xc2\x65\xb3\x9a\xc2\x8d\xf5\x65\x51\xf4\x7d\xb9\xef\x9f\x7a\xd7\x17\x35\x85\x4b\x66\x43\x68\xcb\xe2\x62\x0a\x8f\xbd\xf5\x88\x62\x4d\x23\xd4\x24\x7e\x8d\xd8\xc1\xf2\x19\x72\x44\x74\x22\xc2\xc9\x31\x46\x8c\xc5\x8e\x80\x17\xe9\xbb\xcf\xb9\x42\x2d\x70\x4e\x93\x66\x12\xd1\x7f\xdc\xde\xfd\x75\xf9\x70\x75\x31\x66\x05\x08\xb9\x60\xfc\xe9\xb4\xff\x0f\x3b\xba\x37\xff\xc8\x80\x94\xe2\x85\x04\xda\x4d\xca\xa2\x4f\x19\x29\x10\xdf\xf9\x16\x3b\xfa\xcf\xb3\x9a\xed\xa7\xb2\x9f\xda\x73\x59\xba\x1a\xe3\xc2\x5f\xea\x26\x26\x1a\x4e\x0f\xba\xa3\x41\x8f\x12\x5b\xa2\x1e\xd5\x19\x99\xce\x76\xba\x30\xab\x13\xa9\x32\x7b\x04\x65\x47\x1b\xba\x21\xc6\xa5\x52\xcf\xca\x02\x83\x6f\xef\xe9\x63\xd0\x42\x6a\x5f\xe2\xde\xbe\xe6\x1a\x2b\x43\x23\x47\xd7\xdf\xf1\x93\x61\x4c\x09\x7a\x6e\x5b\x2f\x6c\x0c\xa9\xcb\xed\x35\x77\xa8\xed\x08\x62\xeb\x96\x8f\x97\x60\xec\x79\x18\x97\xaa\x5d\xb2\xce\x52\xc0\xb8\x34\xa5\xdd\xca\xe0\xf6\x9a\x6a\xdd\xa1\x89\x8d\x4d\xed\x8a\xef\xcb\x26\x13\x03\xc9\xd5\xd9\xb1\x66\xab\x74\x24\x9e\xcb\x8c\x0b\xfd\x44\xea\x6d\xe8\xaa\xb8\x7f\xfb\x44\x1d\x3e\x1d\xd9\xb4\x7b\x6f\x8d\xee\xb4\x1f\x57\x23\xa4\xa8\x4b\x7c\xbe\xb1\xce\x4b\xa8\x0f\x6f\xa8\xd9\x18\xf4\x24\x68\x66\x4a\x09\x39\x47\xaf\x7a\xe7\xba\xb1\xe8\x83\x1c\x44\x05\x1b\xd7\x39\xb7\xc5\x35\x0e\xee\x88\x04\x37\xd7\xc3\x68\x77\xff\x61\x3d\xbf\x22\x69\xd2\xaa\xbe\x43\x2d\x19\xe8\xa4\xa6\xe5\xf6\xb1\x36\xed\x6a\x39\xa1\x69\x07\xae\x23\x5c\xcc\xf8\x3b\x9b\x10\x47\xb4\x23\xcf\x00\x38\x34\xa7\x42\xaf\x7a\x9e\xf5\xcd\xe7\x15\xd9\x17\xbf\xe1\xcd\xcb\xa1\xd5\x4d\x9b\x65\x6c\xd1\x36\xf9\x0d\x86\x5d\x76\xd4\xf1\xba\x35\x9a\xb9\x47\xf1\xd3\xb4\x5a\x89\x04\xe2\xfc\x2d\xa9\x86\xe4\x2a\xc6\x47\xf3\xde\x19\x05\xf2\x73\x3e\x16\x45\x52\x31\x2f\xe7\x51\x53\xa7\xf0\xeb\xe8\xfc\x32\x83\xc3\x6d\xff\xb7\xd3\x78\xa5\xe7\x5f\x72\x5b\xc7\x76\xf8\x54\x42\x51\x69\x35\xbc\x70\xbf\xb8\x95\x56\x87\x9d\xa8\xb4\xba\xc3\xa7\x5c\xc4\x96\x87\x28\x74\xcb\x43\x14\xba\xe5\x9d\xce\xfa\xe5\x56\x42\xa8\x0e\xcf\x77\x5a\xbd\x63\x9d\x49\xe4\xae\xda\x7e\x23\xe2\xe8\x57\xa1\x32\xba\xfe\x85\xb6\xb9\x36\x8f\xb5\x2b\x88\xc9\x75\x9c\x3b\xf3\xfe\xfe\x36\xd7\x2d\x52\x24\x18\xb5\x66\x4e\xb2\x1e\x2d\x5a\x94\xee\x23\xa3\x17\xb4\x6e\x41\x72\xe4\xd8\x50\x35\x0b\xbe\xfd\xd1\xaa\x55\x5f\x75\x26\x9f\x2b\x76\xda\x1f\x21\x58\x9a\x87\x8d\xf6\x3e\x37\x3e\x97\x7f\x07\x00\x00\xff\xff\x43\x6f\xdd\x49\x4b\x0b\x00\x00")

func schemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGql,
		"schema.gql",
	)
}

func schemaGql() (*asset, error) {
	bytes, err := schemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.gql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x3a, 0x55, 0x3c, 0x10, 0xe9, 0x6c, 0xb3, 0x8f, 0xe9, 0x8f, 0xf8, 0xfc, 0xfd, 0x74, 0x4a, 0xb, 0xd1, 0x2, 0xcd, 0x55, 0x12, 0x72, 0xbc, 0xcb, 0xef, 0xa3, 0xe2, 0x2e, 0xb1, 0xf9, 0xff}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": graphiqlHtml,
	"schema.gql":    schemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"graphiql.html": &bintree{graphiqlHtml, map[string]*bintree{}},
	"schema.gql":    &bintree{schemaGql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
