// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html (1.182kB)
// schema.gql (2.463kB)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _graphiqlHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func graphiqlHtmlBytes() ([]byte, error) {
	return bindataRead(
		_graphiqlHtml,
		"graphiql.html",
	)
}

func graphiqlHtml() (*asset, error) {
	bytes, err := graphiqlHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "graphiql.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x8, 0xb4, 0x3a, 0xe7, 0xdb, 0xc8, 0x3d, 0x2d, 0x1f, 0x1c, 0x2d, 0xd3, 0x9b, 0xf2, 0xd8, 0xe5, 0xd6, 0x5f, 0x3a, 0x7c, 0x6d, 0x80, 0xf7, 0x40, 0xdc, 0x58, 0xf1, 0x75, 0xbd, 0xf0, 0xa1}}
	return a, nil
}

var _schemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xd1\x6e\xeb\x36\x0f\xbe\xb6\x9f\x82\xed\xb9\x69\x81\x1f\xb9\xf8\xb1\x2b\x63\x1b\x90\xb6\x1b\x56\xac\x39\x3b\x3b\x69\x87\x01\x41\x31\x30\x16\xe3\x10\x91\x25\x1f\x4a\x4a\x1b\x1c\xf4\xdd\x07\xc9\x49\x2a\xc7\x6d\x5f\x60\x57\x36\x3f\xf2\xa3\xa8\x4f\x24\x5d\xbd\xa6\x16\xe1\x7b\x59\x7c\x0b\x24\xbb\x0a\x8a\x3f\xe3\xb7\x7c\x29\x4b\xbf\xeb\x08\x92\x15\xdd\x9f\x40\xc8\x0b\xd3\x96\x00\xb5\x86\x2d\x6a\x56\xe8\x49\x01\x3a\x47\xde\x81\x35\xe0\xd7\x04\x73\x4f\x5a\xa3\x80\x21\xff\x64\x65\x33\x29\x8b\xde\x5f\xc1\x62\x1a\x7f\xce\x1e\xcf\xca\x0f\x92\xb1\x73\x81\xe4\x83\x6c\xfb\x80\x0a\x16\xb7\xe9\x6f\x94\xcf\x0b\x2a\x02\xe7\xd1\x3b\x58\x89\x6d\x53\x1e\x8d\xce\xc3\x8f\x26\xb4\xbf\xd9\x20\x6e\xda\xd8\x9f\x61\x1d\xff\x22\xf3\x42\xd1\x0a\x83\xf6\xf0\x13\xfc\xff\x87\x1e\xbe\x9c\x80\xed\x3c\x5b\x83\x5a\xef\xa0\x13\xbb\x65\x45\x50\xdb\x60\x3c\x09\xa0\x51\x91\xb7\x44\x47\xfd\xe5\x81\xcd\xca\xc2\xca\x0a\xac\x58\x7b\x12\x36\xcd\xa4\x2c\x5a\x94\x0d\x79\x77\x51\x16\x45\x0c\x4d\xb7\xbf\xb6\x8a\x2a\x98\xfb\x18\x92\xe3\xfd\x5d\x32\xcf\xfe\xac\xb7\x48\xb9\x6b\xc4\xcb\xae\x58\xc1\xad\xf1\x65\x71\x59\xc1\x62\x96\x4a\x19\x29\xdf\x34\x42\x4d\x92\x7d\x20\x9a\x95\x77\x34\x8b\xec\xa4\xcf\x9b\xf2\x20\x68\x76\x1e\xec\x0a\x3a\x64\xf9\x8c\x2d\x39\xb8\xa0\x49\x94\xe2\x13\x2c\xce\xff\xbe\x9b\xfd\x73\x75\x7f\x7d\xfe\x3f\x48\xbf\x0f\xf3\x9b\xf3\xc7\x4b\xb0\x02\x08\x8e\x4d\xa3\x09\xea\x20\x42\xa6\xde\xf5\xac\x14\x76\x7e\x19\xc9\x03\x65\x41\xc8\x05\xed\xdd\xa4\x2c\x3c\xd7\x1b\x92\x8b\xa4\xc9\x40\xa2\x63\x01\x15\x2c\x7a\xf0\xf1\x5d\x6d\xa6\x47\x15\x8e\x2a\xbd\x94\xa5\xab\x31\xf6\xdd\x15\x37\x31\x70\x6f\xdd\x73\x4b\xfb\xb1\x48\xea\xc7\xb1\xc8\x4f\x3e\x3b\xb4\xe7\xb4\x4e\x8f\x94\xe1\x91\x94\x99\x26\xb4\xfb\x18\x97\x4a\x39\x2b\x0b\x0c\x7e\xfd\x95\xbe\x05\x16\x52\x15\x5c\x59\xab\x09\xcd\x11\xdf\xda\x1a\x97\x9a\x06\x8e\xb6\x3f\xe3\x57\x6d\x31\x25\xe8\x7b\xc5\x78\xb1\x5a\x93\xba\xda\xdd\xd8\x16\xd9\x0c\x28\xa6\x5e\xdb\x71\x53\x0d\x3d\xf7\xc3\x52\xd9\x25\x74\x9a\x02\x86\xa5\x29\x76\x9d\xc6\xdd\x0d\xd5\xdc\xa2\x76\xd5\x5e\xae\x78\x3f\x6c\xf3\x1c\x8a\x5c\x9d\x99\xb5\x35\x8a\x63\xff\xb8\x0c\x5c\xf1\x33\xa9\xcf\xa1\x5d\xc6\x7e\x3e\x26\x6a\xf1\x79\x84\xb1\x7b\x30\x9a\x5b\xf6\xc3\x6a\x84\x14\xb5\xa9\x2d\x6f\x8d\xf3\x12\xea\xd3\x13\x6a\xab\x35\x7a\x12\xd4\x53\xa5\x84\x9c\xa3\x0f\xbd\x73\x6e\x0c\xfa\x20\x27\x51\xc1\xc4\xf1\xc9\xb1\x38\x36\xc1\x8d\x9a\xe0\xf6\x66\xff\xb4\x87\x55\xda\xf7\x57\x6c\x9a\x34\x6e\x5f\x90\x25\x23\xbd\xb9\x23\x72\x7c\x38\xeb\x87\x5a\xde\xd8\x11\x27\xae\x11\x2f\x66\xfc\xcb\xea\x10\x9f\xe8\xd0\x3c\x7b\xc2\x29\x9c\x0a\xbd\xee\xfb\xac\x17\xdf\x76\x64\x5e\xfd\xda\x3e\xbd\x1a\x6b\x6e\xd6\x59\xc6\x35\x9a\x26\x3f\x41\x5b\x97\x99\x1c\x8f\xdb\xa2\x9e\x7b\x14\x5f\xa5\xd1\x4a\x4d\x20\xce\xdf\x91\x6a\x48\xae\x63\x7c\x84\x8f\xce\xb8\x90\xde\xf3\x59\x51\x24\x4b\x6b\x37\xf3\xb8\xc3\x2a\xf8\x63\x60\xbf\xbe\xc1\xe9\xb4\x7f\xf4\x1a\xff\x55\x8d\x86\x38\x7c\x2f\xa1\x58\xb2\xda\xdf\xf0\x38\x85\x4b\x56\xa7\x4a\x2c\x59\xcd\xf0\x39\xdf\x48\x9b\x53\x16\xba\xcd\x29\x0b\xdd\x66\xc6\x99\x5e\xae\x13\x42\x75\x6a\xcf\x58\x7d\xb1\x9c\xed\xbb\x43\xb5\x7d\x7b\xc7\x77\xec\xc2\x52\x73\xfd\x3b\xed\xf2\x45\x3b\x5c\x44\x41\x74\xbe\x94\x6d\xab\x1f\xbe\xde\xe5\x4b\x88\x14\x09\xc6\xc5\x31\x27\xd9\x0e\xa6\x26\xee\xe1\x11\xe8\x05\x8d\x5b\x91\x8c\x1c\x4f\xb4\x9c\x06\xbf\xfe\xc5\xa8\xae\xaf\x3a\xdb\x85\x9d\x75\xec\x47\x0c\x2b\xcd\xfd\x13\x7b\x9f\x83\x2f\xe5\xbf\x01\x00\x00\xff\xff\xeb\xca\x3a\x2c\x9f\x09\x00\x00")

func schemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGql,
		"schema.gql",
	)
}

func schemaGql() (*asset, error) {
	bytes, err := schemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.gql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0xdd, 0x93, 0x50, 0xa4, 0x42, 0x52, 0xd2, 0x6c, 0x6e, 0x72, 0x44, 0xf3, 0x53, 0xc6, 0x37, 0x1e, 0x99, 0x10, 0x34, 0xc8, 0xf1, 0xee, 0x6d, 0xf8, 0x95, 0xe7, 0x50, 0x3, 0xed, 0xef, 0x42}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": graphiqlHtml,
	"schema.gql":    schemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"graphiql.html": &bintree{graphiqlHtml, map[string]*bintree{}},
	"schema.gql":    &bintree{schemaGql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
