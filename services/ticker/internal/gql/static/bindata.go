// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html (1.182kB)
// schema.gql (2.403kB)

package static

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _graphiqlHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func graphiqlHtmlBytes() ([]byte, error) {
	return bindataRead(
		_graphiqlHtml,
		"graphiql.html",
	)
}

func graphiqlHtml() (*asset, error) {
	bytes, err := graphiqlHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "graphiql.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x8, 0xb4, 0x3a, 0xe7, 0xdb, 0xc8, 0x3d, 0x2d, 0x1f, 0x1c, 0x2d, 0xd3, 0x9b, 0xf2, 0xd8, 0xe5, 0xd6, 0x5f, 0x3a, 0x7c, 0x6d, 0x80, 0xf7, 0x40, 0xdc, 0x58, 0xf1, 0x75, 0xbd, 0xf0, 0xa1}}
	return a, nil
}

var _schemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xc1\x6e\xe4\x36\x0c\x3d\xdb\x5f\xc1\x60\x2f\xc9\x25\x87\xa2\x27\xa3\x2d\x30\x49\x5a\x34\x68\x66\xbb\xdd\xc9\x16\x05\x82\x45\xc1\xb1\x38\x1e\x62\x64\xc9\x4b\x49\x93\x0c\x16\xf9\xf7\x42\xb2\x67\x22\xdb\x49\x7e\xa0\x27\x5b\x24\x1f\x45\x3e\x3d\xd2\xd5\x5b\x6a\x11\xbe\x97\xc5\xb7\x40\x72\xa8\xa0\xf8\x2b\x7e\xcb\xe7\xb2\xf4\x87\x8e\x20\x9d\xa2\xfb\x03\x08\x79\x61\xda\x13\xa0\xd6\xb0\x47\xcd\x0a\x3d\x29\x40\xe7\xc8\x3b\xb0\x06\xfc\x96\x60\xe5\x49\x6b\x14\x30\xe4\x1f\xad\xec\x2e\xcb\xa2\xf7\x57\xf0\xb0\x88\x3f\x67\x5f\xcf\xca\x77\x92\xb1\x73\x81\xe4\x9d\x6c\x43\x40\x05\x0f\xb7\xe9\x6f\x96\xcf\x0b\x2a\x02\xe7\xd1\x3b\xd8\x88\x6d\x53\x1e\x8d\xce\xc3\x4f\x26\xb4\xbf\xdb\x20\x6e\xd1\xd8\x5f\x60\x1b\xff\x22\xf2\x5c\xd1\x06\x83\xf6\xf0\x33\xfc\xf0\x63\x6f\xbe\xb8\x04\xdb\x79\xb6\x06\xb5\x3e\x40\x27\x76\xcf\x8a\xa0\xb6\xc1\x78\x12\x40\xa3\x22\x6e\x8d\x8e\xfa\xe6\x81\xcd\xc6\xc2\xc6\x0a\x6c\x58\x7b\x12\x36\xcd\x65\x59\xb4\x28\x3b\xf2\xee\xbc\x2c\x8a\x18\x9a\xba\xbf\xb6\x8a\x2a\x58\xf9\x18\x92\xdb\xfb\x5e\x32\xcf\x70\xd7\x6b\xa0\xdc\x35\xc3\x65\x2d\x56\x70\x6b\x7c\x59\x5c\x54\xf0\xb0\x4c\xa5\xcc\x98\x6f\x1a\xa1\x26\xd1\x3e\x22\xcd\xca\x1b\x9c\x45\x74\xe2\xe7\x55\x7a\x22\xc6\x60\x4b\x60\x37\xe9\xbf\xcf\xd9\x21\x0b\x9c\xd3\x65\x64\xe4\x03\xfc\x73\xb7\xfc\xf7\xea\xfe\xfa\x62\x4c\x16\x08\xb9\xa0\xbd\xbb\x2c\x0b\xcf\xf5\x8e\x24\x72\x16\x81\x1f\xb1\xa5\xf8\xd4\x7d\x7b\x5f\xdf\xec\x6f\x71\xea\xe4\xd4\xe9\x73\x59\xba\x1a\xa3\x76\xae\xb8\x89\x81\xc3\xe9\x9e\x5b\x1a\xa4\x9d\x18\x8c\xd2\xae\x33\x82\xcf\x8e\x12\x5b\xd4\x89\xe8\xcc\x1e\x41\xd9\xd1\x84\x76\x88\x71\xa9\x94\xb3\xb2\xc0\xe0\xb7\x9f\xe9\x5b\x60\x21\x55\xc1\x95\xb5\x9a\xd0\x9c\xec\x7b\x5b\xe3\x5a\xd3\xc8\xd1\xf6\x77\xfc\xa6\x2d\xa6\x04\xfd\x7b\x1b\x2f\x56\x6b\x52\x57\x87\x1b\xdb\x22\x9b\x11\xc4\xd4\x5b\x3b\x17\xc6\xd8\x73\x3f\x2e\x95\x5d\xb2\x2e\x52\xc0\xb8\x34\xc5\xae\xd3\x78\xb8\xa1\x9a\x5b\xd4\xae\x1a\xe8\x8a\xfd\x61\x9b\xe7\x50\xe4\xea\xec\x58\x5b\xa3\x38\x6a\xc0\x65\xc6\x0d\x3f\x91\xfa\x18\xda\x75\xd4\xe4\x29\x51\x8b\x4f\x33\x1b\xbb\x2f\x46\x73\xcb\x7e\x5c\x8d\x90\xa2\x36\x49\xeb\xd6\x38\x2f\xa1\x9e\xde\x50\x5b\xad\xd1\x93\xa0\x5e\x28\x25\xe4\x1c\xbd\xeb\x5d\x71\x63\xd0\x07\x99\x44\x05\x13\x47\x20\xb7\x45\xe9\x07\x37\x13\xc1\xed\xcd\xf0\xb4\xc7\x75\xd8\xeb\x2b\x8a\x26\xc9\xfb\x13\xb2\x64\xa0\x57\xe7\x3c\xb7\x8f\xe7\xf5\x58\xcb\x2b\x73\x3e\x71\xcd\x70\x31\xe3\xdf\x56\x87\xf8\x44\x47\xf1\x0c\x80\xa9\x39\x15\x7a\xdd\xeb\xac\x27\xdf\x76\x64\x5e\xfc\xda\x3e\xbe\x1c\xb6\xdc\x6c\xb3\x8c\x5b\x34\x4d\x7e\x83\xb6\x2e\x3b\x72\xbc\x6e\x8f\x7a\xe5\x51\x7c\x95\x46\x2b\x89\x40\x9c\xbf\x23\xd5\x90\x5c\xc7\xf8\x68\x3e\x39\xe3\x52\x79\xcb\x67\x45\x91\xac\xad\xdd\xad\xe2\x1e\xaa\xe0\xcf\xd1\xf9\xe5\x0d\xa6\xd3\xfe\xde\x6b\xfc\x5f\x39\x1a\xdb\xe1\x7b\x09\xc5\x9a\xd5\xd0\xe1\x69\x0a\xd7\xac\xa6\x4c\xac\x59\x2d\xf1\x29\xdf\x48\xbb\x29\x0a\xdd\x6e\x8a\x42\xb7\x5b\x72\xc6\x97\xeb\x84\x50\x4d\xcf\x4b\x56\x9f\x2c\x67\xfb\xee\x58\x6d\x2f\xef\xf8\x8e\x5d\x58\x6b\xae\xff\xa0\x43\xbe\x68\xc7\x8b\x28\x88\xce\x97\xb2\x6d\xf5\x97\xcf\x77\xf9\x12\x22\x45\x82\x71\x71\xac\x48\xf6\xa3\xa9\x89\x7b\x78\x66\xf4\x82\xc6\x6d\x48\x66\x8e\x47\x5a\x2f\x82\xdf\xfe\x6a\x54\xd7\x57\x9d\xed\xc2\xce\x3a\xf6\x33\x84\x95\xe6\xfe\x91\xbd\xcf\x8d\xcf\xe5\x7f\x01\x00\x00\xff\xff\x34\x3a\xda\xac\x63\x09\x00\x00")

func schemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGql,
		"schema.gql",
	)
}

func schemaGql() (*asset, error) {
	bytes, err := schemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.gql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x6d, 0xc5, 0xeb, 0xe9, 0x4b, 0x72, 0x9f, 0x55, 0xd9, 0x52, 0x35, 0xff, 0x8b, 0x68, 0x4a, 0x22, 0x35, 0xf9, 0x99, 0x73, 0xb2, 0x47, 0xa0, 0xdb, 0x28, 0xf7, 0x95, 0x57, 0xce, 0x38, 0x16}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": graphiqlHtml,
	"schema.gql":    schemaGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"graphiql.html": &bintree{graphiqlHtml, map[string]*bintree{}},
	"schema.gql":    &bintree{schemaGql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
