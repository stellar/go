// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphiql.html
// schema.gql

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGraphiqlhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\x13\x3f\x10\x3d\x6f\x3e\x85\x7f\x96\x7e\xd2\x46\x2a\x76" +
		"\x52\x24\x0e\x9b\x4d\x0e\xd0\xaa\x02\x15\x4a\x81\x0b\x47\xd7\x9e\x5d\x3b\x78\xed\xed\xd8\x9b\x36\xaa\xf2\xdd\x91" +
		"\xf7\x4f\x28\x7f\x2a\x21\x04\x17\xaf\x3d\x7e\xf3\xde\xf3\xcc\x68\xcb\xff\xce\xae\x5e\x7d\xfa\xfc\xfe\x9c\xe8\xd8" +
		"\xd8\xcd\xac\x1c\x3e\x59\xa9\x41\xa8\xcd\x2c\xcb\x4a\x6b\xdc\x17\x82\x60\xd7\x34\xc4\xbd\x85\xa0\x01\x22\x25\x1a" +
		"\xa1\x5a\x53\x1d\x63\x1b\x0a\xce\xa5\x72\xdb\xc0\xa4\xf5\x9d\xaa\xac\x40\x60\xd2\x37\x5c\x6c\xc5\x3d\xb7\xe6\x26" +
		"\xf0\x1a\x45\xab\xcd\xad\xe5\x0b\xb6\x5c\xb2\xe5\xf2\x18\x60\x32\x04\xca\x7b\x99\x20\xd1\xb4\x91\x04\x94\xbf\x4d" +
		"\x5b\x41\x94\x9a\x9f\xb2\x05\x7b\x3e\xec\x59\x63\x1c\xdb\x06\xba\x29\xf9\x40\xf7\xa7\xcc\x08\x42\x46\xbe\x7c\xc1" +
		"\x4e\xd9\x82\x77\x8d\x1a\x02\xac\x45\xaf\x3a\x19\x8d\x77\x7f\x57\xe9\x99\xf2\xcd\x4f\x6a\x29\xf8\x2f\x14\x9f\x6e" +
		"\xc6\x2f\x14\x4a\x3e\xce\x41\x79\xe3\xd5\x9e\xf4\x13\xb0\xa6\x77\x46\x45\x5d\x90\xe5\x62\xf1\xff\x8a\x68\x30\xb5" +
		"\x8e\xd3\xa9\x11\x58\x1b\x57\x90\xc5\x8a\xf8\x1d\x60\x65\xfd\x5d\x41\xb4\x51\x0a\xdc\x8a\xf6\x96\x95\xd9\x11\xa3" +
		"\xd6\x74\x92\xa5\x13\xeb\x23\xa2\x9d\x5e\xd1\xcd\xa5\x17\xca\xb8\x9a\x31\x56\x72\x65\x76\x8f\xde\x9b\xb6\x59\xd5" +
		"\xb9\xbe\x30\xa4\x6f\xfd\xc5\xf5\x65\xde\x0a\x14\x4d\x98\x93\x87\x74\x9d\x21\xc4\x0e\xc7\xdb\x9c\x0e\xaf\xbc\xb5" +
		"\xf4\x64\xbc\xce\x1a\x88\xda\xab\x82\xd0\xd6\x87\x48\x4f\x86\x60\x7a\x65\x41\xde\x7c\xbc\x7a\xc7\x42\x44\xe3\x6a" +
		"\x53\xed\x27\xde\x11\x22\x11\x14\xb8\x68\x84\x0d\x05\xa1\xc6\x49\xdb\x29\x18\xf3\x0f\x73\x16\x35\xb8\xfc\xe8\x2d" +
		"\x47\x08\xed\xe4\x68\xb2\x94\x62\x2c\xc2\x7d\xcc\xe7\xab\x27\xd2\x92\x8f\x63\x5a\xc4\xfd\xb4\x9d\x28\x7a\x87\xad" +
		"\xc0\x00\x03\x74\xe0\xc9\x0e\x44\x8a\x28\x35\xc9\x01\xd1\xe3\xfc\xc7\xac\x04\x9d\x90\xa3\x70\x7f\x3c\xcc\xd2\xfa" +
		"\x21\x4d\xdd\xd9\xd5\x5b\x86\xe0\x14\x60\xde\x23\xfa\x20\x93\x08\x22\xc2\xb9\x85\x06\x5c\xcc\x2f\xfa\xce\x5d\x5f" +
		"\x9e\x90\x87\xbe\xba\x80\xc5\xb1\x09\x87\xb1\x4c\xca\xcb\x2e\x81\x59\x0d\x71\xcc\x7b\xb9\x7f\xad\xf2\x6f\x6d\x9f" +
		"\x27\x5c\x5a\xbe\x1b\xb7\x64\x71\x33\x2b\xf9\xf0\x1b\xfa\x1a\x00\x00\xff\xff\xdb\x8e\x2c\x18\x9e\x04\x00\x00")

func bindataGraphiqlhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphiqlhtml,
		"graphiql.html",
	)
}

func bindataGraphiqlhtml() (*asset, error) {
	bytes, err := bindataGraphiqlhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "graphiql.html",
		size:        1182,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556057220, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSchemagql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x54\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x82\xbd\x24\x17\x1f\x8a\x9e" +
		"\x84\xb6\x80\x9d\xb4\x68\xd0\x64\xbb\x5d\x67\x8b\x02\x41\x51\x8c\xc5\xb1\x44\x98\x22\xb5\x43\xd2\x5e\x63\x91\xff" +
		"\x5e\x0c\xe5\x0f\xca\x4a\xd3\xfb\x9e\xa4\x79\xf3\xc1\x99\xc7\xc7\xf1\x75\x4b\x1d\xc2\xd7\xb2\xf8\x1c\x89\xf7\x15" +
		"\x14\x7f\xc8\xb7\x7c\x29\xcb\xb0\xef\x09\x92\x25\xee\x77\xc0\x14\x58\xd3\x96\x00\x8d\x81\x2d\x1a\xad\x30\x90\x02" +
		"\xf4\x9e\x82\x07\x67\x21\xb4\x04\xcb\x40\xc6\x20\x83\xa5\xb0\x73\xbc\x99\x95\xc5\xe0\xaf\xe0\x79\x2e\x3f\x57\x7f" +
		"\x5f\x95\x6f\x14\xd3\xde\x47\xe2\x37\xaa\x1d\x02\x2a\x78\xbe\x4f\x7f\x93\x7a\x81\x51\x11\xf8\x80\xc1\xc3\x9a\x5d" +
		"\x97\xea\x18\xf4\x01\x7e\xb0\xb1\xfb\xd5\x45\xf6\xf3\xc6\xfd\x04\xad\xfc\x49\xe6\xb5\xa2\x35\x46\x13\xe0\x47\xf8" +
		"\xee\xfb\x01\xbe\x99\x81\xeb\x83\x76\x16\x8d\xd9\x43\xcf\x6e\xab\x15\x41\xed\xa2\x0d\xc4\x80\x56\x49\xde\x0a\x3d" +
		"\x0d\xc3\x83\xb6\x6b\x07\x6b\xc7\xb0\xd6\x26\x10\x6b\xdb\xcc\xca\xa2\x43\xde\x50\xf0\xd7\x65\x51\x48\x68\x9a\xfe" +
		"\xd6\x29\xaa\x60\x19\x24\x24\xc7\x87\x59\x32\xcf\xe1\xac\xd7\x92\x72\xd7\x24\x2f\x1b\xb1\x82\x7b\x1b\xca\xe2\xa6" +
		"\x82\xe7\xc7\xd4\xca\x84\xf9\xa6\x61\x6a\x12\xed\x23\xd2\x1c\xff\x07\x67\x92\x9d\xf8\x79\x95\x1e\xc9\xb1\xd8\x11" +
		"\xb8\x75\xfa\x1f\x6a\xf6\xa8\x19\xae\x69\x26\x8c\xbc\x83\xbf\x1e\x1e\xff\x59\x3c\xdd\xde\x8c\xc9\x02\x26\x1f\x4d" +
		"\xf0\xb3\xb2\x08\xba\xde\x10\x0b\x67\x92\xf8\x1e\x3b\xfa\xdf\xe1\xe6\xa7\x31\x4e\x63\xbe\x94\xa5\xaf\x51\x84\xb3" +
		"\xd0\x8d\x04\x1e\xac\x27\xdd\xd1\x41\xd7\x89\x3e\xd1\x75\x9d\xb1\x7b\x75\xd4\xd7\xbc\x4e\x2c\x67\xb8\x24\x65\xa6" +
		"\x8d\xdd\x21\xc6\xa7\x56\xae\xca\x02\x63\x68\x3f\xd2\xe7\xa8\x99\x54\x05\x0b\xe7\x0c\xa1\x3d\xe1\x5b\x57\xe3\xca" +
		"\xd0\xc8\xd1\x0d\x67\xfc\x62\x1c\xa6\x02\xc3\x65\xdb\xc0\xce\x18\x52\x8b\xfd\x9d\xeb\x50\xdb\x51\x8a\xad\x5b\x37" +
		"\x55\xc5\xd8\xf3\x34\x6e\x55\xfb\x84\xce\x53\xc0\xb8\x35\xa5\x7d\x6f\x70\x7f\x47\xb5\xee\xd0\xf8\xea\x40\x97\xcc" +
		"\x97\x31\x2f\x81\xe4\xeb\xcc\xac\x9d\x55\x5a\x04\xe0\x33\x70\xad\xbf\x90\x7a\x1f\xbb\x95\x08\xf2\x54\xa8\xc3\x2f" +
		"\x13\x4c\xfb\x4f\xd6\xe8\x4e\x87\x71\x37\x4c\x8a\xba\xa4\xab\x7b\xeb\x03\xc7\xfa\xf2\x84\xda\x19\x83\x81\x18\xcd" +
		"\x5c\x29\x26\xef\xe9\x4d\xef\x52\x37\x16\x43\xe4\x8b\xa8\x68\x45\xff\x39\x26\xba\x8f\x7e\x22\x82\xfb\xbb\xc3\xd5" +
		"\x1e\x77\xe1\xa0\x2f\x11\x4d\xd2\xf6\x07\xd4\x9c\x25\xbd\xfa\xc8\x73\x7c\xfc\x58\x8f\xbd\xbc\xf2\xc8\x2f\x5c\x93" +
		"\x3c\xa9\xf8\xa7\x33\x51\xae\xe8\x28\x9e\x43\xc2\x25\x9c\x1a\xbd\x1d\x74\x36\x90\xef\x7a\xb2\x67\xbf\x71\xbb\xb3" +
		"\xd1\xea\xa6\xcd\x2a\xb6\x68\x9b\xfc\x04\xe3\x7c\x66\x6a\x39\x6e\x8b\x66\x19\x90\x43\x95\x9e\x56\x12\x01\xfb\xf0" +
		"\x40\xaa\x21\xbe\x95\x78\x81\x4f\x4e\xc7\x8a\x78\xe5\xdc\x66\x29\x8b\xa6\x82\xdf\x47\xf6\x99\xe7\xcb\x17\xfd\x16" +
		"\xe3\xdf\x32\x0f\x63\x1c\xbe\x96\x20\x7b\x67\xa1\x55\xfe\x52\x57\x5a\x5d\x0e\x2b\xfd\x93\x0f\x0b\xad\xce\x98\x2c" +
		"\x2c\xbf\xc9\x13\xd1\x6f\x2e\x13\x8d\xdb\x91\x0f\x73\xbf\x39\x43\xbe\x67\x42\x75\x69\x3f\x6a\xf5\xc1\xe9\x6c\x79" +
		"\x1d\x5b\x1e\xb4\x2a\x17\xd6\xc7\x95\xd1\xf5\x6f\xb4\xcf\xb7\xe6\x78\xab\x44\x36\xf9\x86\x75\x9d\xf9\xf4\xf1\x21" +
		"\xdf\x28\xa4\x88\x51\xb6\xc0\x92\x78\x3b\x7a\x02\xb2\x54\x27\x60\x60\xb4\x7e\x4d\x3c\x71\xec\x68\x35\x8f\xa1\xfd" +
		"\xd9\xaa\x7e\xe8\x3a\x5b\x6c\xbd\xf3\x3a\x4c\x32\x1c\x37\x4f\x3b\x1d\x42\x0e\xbe\x94\xff\x06\x00\x00\xff\xff\xdb" +
		"\x43\x51\x05\x2d\x09\x00\x00")

func bindataSchemagqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagql,
		"schema.gql",
	)
}

func bindataSchemagql() (*asset, error) {
	bytes, err := bindataSchemagqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "schema.gql",
		size:        2349,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1556717875, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"graphiql.html": bindataGraphiqlhtml,
	"schema.gql":    bindataSchemagql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"graphiql.html": {Func: bindataGraphiqlhtml, Children: map[string]*bintree{}},
	"schema.gql":    {Func: bindataSchemagql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
