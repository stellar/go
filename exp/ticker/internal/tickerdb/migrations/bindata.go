// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20190404184050-initial.sql
// migrations/20190405112544-increase_asset_code_size.sql
// migrations/20190408115724-add_new_asset_fields.sql
// migrations/20190408155841-add_issuers_table.sql
// migrations/20190409152216-add_trades_table.sql
// migrations/20190409172610-rename_assets_desc_description.sql
// migrations/20190410094830-add_assets_issuer_account_field.sql
// migrations/20190411165735-data_seed_and_indices.sql

package bdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataMigrations20190404184050initialsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x78\x6b\x8a\x35\x05\x3a\x0c\x3b" +
		"\x24\x27\xd7\xd1\xd0\x60\x8e\xbc\x3a\xf6\xba\x9c\x04\x45\x26\x12\xa1\xb6\xe4\x4a\x72\xd2\xec\xeb\x07\x27\x76\xb3" +
		"\x66\x76\x9b\x61\xc0\x8e\x24\x1f\x1f\x1f\x29\x9a\xf6\x86\x43\xf8\x50\xc8\x95\xe1\x0e\x21\x2d\x3d\x6f\x38\xac\x5d" +
		"\x94\x17\x38\x02\x6e\x2d\x3a\x3b\x86\x64\x57\xe2\x08\x12\xff\x36\x24\x63\x98\x8b\x35\x16\x7c\x04\x65\xb5\xcc\xa5" +
		"\x18\x43\xb4\x55\x68\x46\x50\xa7\x79\x5e\x10\x13\x3f\x21\x07\x68\x83\xb8\x3e\xb0\xc0\xc0\x03\x00\x90\x19\x48\xe5" +
		"\x70\x85\x06\x68\x94\x00\x4d\xc3\xf0\x6a\x1f\x10\x3a\x43\x10\x6b\x6e\xb8\x70\x68\x60\xc3\xcd\x4e\xaa\xd5\xe0\xe6" +
		"\xe3\xe5\x09\x50\x5a\x5b\xa1\x01\x87\xcf\xee\x24\xe2\x76\x65\x17\xc5\xe7\x4f\xa7\x14\xaa\x2a\x18\x17\x42\x57\xca" +
		"\xd9\x1e\x39\xbc\x72\x6b\x66\xf0\xa9\x92\x06\x33\x58\x6a\x9d\x23\x57\xdd\x98\x8d\x16\x7c\x99\x63\x1f\xa8\xa8\xcb" +
		"\x40\xa6\xab\x1a\x53\x1a\x14\xd2\x4a\xfd\x07\xaa\x9e\x11\x13\x5a\x39\xa3\xf3\x1c\x33\xb6\xdc\xb1\x4c\x17\x5c\xaa" +
		"\x3e\x5a\x25\xd6\xda\xb0\x36\xef\xcc\xd9\xbd\xca\x3a\x7b\x5c\xd2\xb2\x0d\xcf\x65\xdf\x18\xf6\x31\xee\xa4\x56\x0c" +
		"\x8d\xd1\x9d\x4f\x93\x73\xeb\x1a\x12\x27\x0b\xb4\x8e\x17\x25\x6c\xa5\x5b\xef\x4d\xf8\xa9\x15\x76\x65\x88\x35\x8a" +
		"\x47\x7c\x23\x67\x42\xbe\xf8\x69\x98\x80\xd2\xdb\xc1\x51\xb6\x77\x39\xf6\xba\x36\x99\xc9\x8c\x59\x7c\x6a\x17\x7a" +
		"\x4e\xee\x53\x42\x83\x33\x77\xba\x45\xbf\x5e\xeb\x86\x72\x2f\xd9\x9f\xb7\xcb\xb4\x37\xe7\x89\x1f\x27\xf0\x30\x4d" +
		"\xee\xe0\x66\xef\x98\xd2\x20\x26\x33\x42\x13\xb8\x5d\x34\x2e\x1a\xc1\x6c\x4a\xbf\xfb\x61\x4a\x5e\x6c\xff\xc7\xd1" +
		"\x0e\xfc\xe0\x8e\xc0\xcd\x5f\xb5\x03\xd1\x03\x25\x13\xb8\x5d\xbc\xd3\x97\x1f\x26\x24\x7e\xbb\xad\x17\xaa\xd7\xd1" +
		"\x6b\x99\x75\x2b\x02\x99\xb5\x6a\x9a\x97\x39\x4b\xc3\xe1\x5c\x44\x34\x3c\xa9\x03\x87\x70\x10\x85\xe9\x8c\xd6\xa7" +
		"\x63\x4e\x92\xe3\x93\xe3\xb3\xdb\xf0\x7c\x70\xd1\x25\xfc\x62\x34\x32\xb8\x12\x39\xb7\xb6\x67\x17\xda\x19\xd6\xdf" +
		"\x0e\x3b\xdc\x14\xf6\x88\xbb\x56\x7e\x10\xd1\x79\x12\xfb\x53\xfa\x6f\x1d\x1c\xf6\x62\x32\xf9\x8d\xaf\xa7\x30\xa4" +
		"\x74\x7a\x9f\x12\x18\xd4\xfe\xab\xe6\xca\xbd\xa3\xbd\xfc\xaf\x82\xeb\x6a\xf0\x2d\x9e\xce\xfc\x78\x01\x5f\xc9\x02" +
		"\x06\x32\x6b\x04\x1e\x7f\x21\x13\xbd\x55\xde\xaf\x00\x00\x00\xff\xff\x9c\xad\x4f\xe2\x55\x06\x00\x00")

func bindataMigrations20190404184050initialsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20190404184050initialsql,
		"migrations/20190404184050-initial.sql",
	)
}

func bindataMigrations20190404184050initialsql() (*asset, error) {
	bytes, err := bindataMigrations20190404184050initialsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/20190404184050-initial.sql",
		size:        1621,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1554814712, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrations20190405112544increaseassetcodesizesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4" +
		"\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x4b\x2c\x2e\x4e\x2d\x29\xe6\x52\x50\x50\x50" +
		"\x80\xc8\x3a\xfb\xfb\x84\xfa\xfa\x29\x24\xe7\xa7\xa4\x2a\x94\x54\x16\xa4\x2a\x24\x67\x24\x16\x25\x26\x97\xa4\x16" +
		"\x29\x94\x25\x16\x55\x66\xe6\xa5\x6b\x98\x99\x68\x5a\x73\x91\x62\x58\x62\x5e\x72\x46\x7e\x51\x3c\x58\x3a\x9e\xb0" +
		"\xc9\xc8\xae\x76\xc9\x2f\xcf\xa3\x96\xbb\x0d\x8d\x68\xe5\x6e\xb0\xc9\x80\x00\x00\x00\xff\xff\x5e\x84\x69\x2a\x6e" +
		"\x01\x00\x00")

func bindataMigrations20190405112544increaseassetcodesizesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20190405112544increaseassetcodesizesql,
		"migrations/20190405112544-increase_asset_code_size.sql",
	)
}

func bindataMigrations20190405112544increaseassetcodesizesql() (*asset, error) {
	bytes, err := bindataMigrations20190405112544increaseassetcodesizesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/20190405112544-increase_asset_code_size.sql",
		size:        366,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1554814712, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrations20190408115724addnewassetfieldssql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4d\x8f\x9b\x30\x10\x86\xef\xfc\x8a\x51\x2e\x39\x34\xa9\x7a\xeb" +
		"\x21\x27\x5a\xc8\x89\x40\x45\xe1\x6c\x19\x3c\xa5\xa3\x1a\x83\x3c\xb6\x9a\xfc\xfb\x2a\x1f\xdd\x64\xd7\x64\x13\xb4" +
		"\x57\xfb\x7d\x07\x33\x7a\x9e\x68\xbd\x86\x4f\x3d\x75\x56\x3a\x84\x7a\x8c\xe2\xac\x4a\x4b\xa8\xe2\x6f\x59\x0a\xa3" +
		"\x6f\x34\xb5\x9f\x25\x33\x3a\x8e\x00\x00\xca\x34\x8f\x77\x29\x7c\x2f\xb2\x7a\x97\x03\x31\x7b\xb4\x50\x15\x97\xa4" +
		"\xf8\x83\x87\x4d\xf4\x60\x44\x9c\x24\xff\xfb\x8a\x78\xd4\xf2\x20\x14\xb6\xd4\x4b\xcd\x40\xc6\x61\x87\x16\xf2\xa2" +
		"\x82\xbc\xce\x32\x48\xd2\x6d\x5c\x67\x15\x7c\x5d\xbd\xed\x2e\x8c\xec\x71\x01\x0e\xf7\x2e\x8c\x2f\x97\x61\x5e\x21" +
		"\xb7\x33\xf2\xed\x60\x14\x39\x1a\x0c\x3f\xdf\x21\x16\xa7\x1f\x15\xd2\xb4\xbf\x07\x8b\x0a\x9a\x61\xd0\x28\x4d\xd8" +
		"\xde\xc6\xd9\xcf\x34\x18\xf0\x8b\xf6\xa8\x84\xf1\x7d\x83\x16\x1a\xea\xc8\x4c\x7c\xf8\x4b\x50\xeb\xe5\x7e\x7e\x89" +
		"\x58\x78\xa3\xa9\x27\xf7\xde\x3b\xab\xb2\x0e\x9f\x69\x51\x61\x3f\x1e\x97\x23\xc8\xb0\xb3\xbe\x9d\xb9\xa8\x76\xd0" +
		"\x5a\x3a\xb4\x52\x0b\xa9\x94\x45\x66\xfc\x50\x5b\x30\x75\x46\x3a\x6f\xe7\x8d\xf1\xc6\x59\x9a\x53\x59\xb0\x93\xce" +
		"\xf3\x7d\x8c\x36\xd1\x2b\x9f\x92\xe1\xaf\x99\x65\xd4\xd5\xa3\xa3\x55\x67\xbf\x1e\x1a\x95\x94\xc5\x8f\x7b\x4a\xad" +
		"\x82\xc4\x59\x9c\x89\xf3\x93\x20\xe1\xf9\x55\x84\xf0\x2e\x00\x3e\x8c\xdc\x22\x1d\xde\x5e\xc9\x9d\x1c\xfe\x02\x68" +
		"\x78\x7b\x87\xc1\xa9\xf7\x87\xac\x3d\x93\xba\x61\x6a\x2a\x7e\x61\x67\x62\x8f\x17\x46\x36\xd1\xbf\x00\x00\x00\xff" +
		"\xff\xd3\x88\x81\xf2\x5b\x05\x00\x00")

func bindataMigrations20190408115724addnewassetfieldssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20190408115724addnewassetfieldssql,
		"migrations/20190408115724-add_new_asset_fields.sql",
	)
}

func bindataMigrations20190408115724addnewassetfieldssql() (*asset, error) {
	bytes, err := bindataMigrations20190408115724addnewassetfieldssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/20190408115724-add_new_asset_fields.sql",
		size:        1371,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1554814712, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrations20190408155841addissuerstablesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x72\xda\x30\x10\xbd\xeb\x2b\x76\x72\x22\xd3\xa4\x3f\x90\x93" +
		"\x8b\x45\xc7\x83\x23\x53\xc5\x3e\x70\xd2\x98\x68\x21\x9a\x1a\x89\x4a\xeb\xd2\xfc\x7d\xc7\xb6\x30\x1e\x06\x68\xaf" +
		"\xfb\x9e\x76\xf7\xbd\xb7\x62\xcf\xcf\xf0\x65\x6f\x76\xbe\x26\x84\xea\xc0\xe6\x92\x27\x25\x87\x32\xf9\x96\x73\x38" +
		"\xb4\x9b\xc6\xbc\x7f\x35\x21\xb4\xe8\x03\xcc\x18\x00\x80\xd1\x10\xd0\x9b\xba\x01\x51\x94\x20\xaa\x3c\x87\x95\xcc" +
		"\x5e\x13\xb9\x86\x25\x5f\x3f\xf5\x9c\xe1\xa1\xfa\x89\x9f\x40\xf8\x87\x46\xe6\x80\xda\x7a\x8f\xd7\xea\xad\x6f\xae" +
		"\x95\xc9\xed\x1b\x75\x03\xdb\xa2\x46\x5f\x93\x71\x56\x05\xf4\xbf\xd1\x5f\x23\xd5\x2d\x7d\xdc\x81\xc9\xd7\x36\x6c" +
		"\xd1\xdf\xa1\x1c\x71\xa3\xfa\x2e\x68\xf5\xc1\x19\x4b\xd7\x48\x1a\x0f\x2e\x18\xba\xd3\xc6\xf9\x9d\xa2\xa3\x21\xba" +
		"\x84\xd9\xe3\x0b\xeb\x92\xc8\x7a\xa7\xa3\x7d\xd0\xd9\x17\x3e\x5c\xdb\x68\xd8\x20\xb4\xd6\xfc\x6a\x91\x25\x79\xc9" +
		"\x65\xcc\xa7\x10\xf9\xfa\x22\xa4\x7e\x4e\x92\xa6\x30\x2f\xc4\x5b\x29\x93\x4c\x94\x93\x34\xd4\xd0\x04\x2a\x91\xfd" +
		"\xa8\x38\xcc\xce\x48\x5c\x20\xd1\x1a\x16\x4b\xd8\x7a\xb7\x87\x3a\x04\xa4\x00\xe4\xe0\xd4\x7b\x3a\x3b\x8e\x1d\x48" +
		"\x93\xa9\x79\xf5\x2a\xe2\x03\x65\x34\x18\x4b\xb8\x43\x3f\x2a\x7d\x61\xff\xd5\x65\xdc\x7d\xdb\x6d\x3d\xc0\xea\x74" +
		"\x87\x8b\x42\xf2\xec\xbb\xe8\xce\x0d\x66\xe3\xa8\x47\x90\x7c\xc1\x25\x17\x73\xfe\x06\xe3\xc9\x1a\x1d\x95\xa5\xd8" +
		"\x20\x21\xac\x06\x6b\x97\xf8\x39\x15\xf9\x8f\x9d\x52\x59\xac\x4e\xd2\x1e\xce\x9e\x3d\x5c\x88\x99\xc6\x71\x5b\x51" +
		"\x14\xf3\xee\x34\x46\x45\xfd\x3f\x39\x45\xd2\xd5\x9f\xce\x06\xc6\xed\xc7\x2f\x9a\xba\xa3\x65\xec\x6f\x00\x00\x00" +
		"\xff\xff\xda\x82\x34\x58\xb6\x03\x00\x00")

func bindataMigrations20190408155841addissuerstablesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20190408155841addissuerstablesql,
		"migrations/20190408155841-add_issuers_table.sql",
	)
}

func bindataMigrations20190408155841addissuerstablesql() (*asset, error) {
	bytes, err := bindataMigrations20190408155841addissuerstablesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/20190408155841-add_issuers_table.sql",
		size:        950,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1554986405, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrations20190409152216addtradestablesql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6e\xc2\x30\x10\x45\xf7\x3e\xc5\x2c\x41\x85\x13\xb0\x4a\xc1" +
		"\x95\x50\xd3\x40\xdd\x64\xc1\x2a\x72\xe2\x21\x1d\xc9\x89\x23\x8f\x51\x2b\x4e\x5f\xe1\xd2\x54\xb4\x0d\x2a\x9b\x6c" +
		"\xfe\xcb\xff\xcf\xd2\x88\xf9\x1c\xee\x5a\x6a\xbc\x0e\x08\x45\x2f\x96\x4a\x26\xb9\x84\x3c\xb9\x4f\x25\x04\xaf\x0d" +
		"\x32\x4c\x04\x00\x00\x19\x60\xf4\xa4\x2d\x64\x9b\x1c\xb2\x22\x4d\x61\xab\xd6\x4f\x89\xda\xc1\xa3\xdc\xcd\x22\xf3" +
		"\xea\x3c\x1d\x5d\x57\x92\x81\x80\xef\xe1\x9b\x2c\xb2\xf5\x73\x21\x67\x22\x52\x16\x4d\x83\xbe\xac\xad\x63\x2c\x03" +
		"\xb5\x08\xa7\x0f\x07\xdd\xf6\xe1\x38\xfc\xf3\xd9\xe8\xf6\x7b\xf4\xbf\xfa\xce\x45\x95\x66\x2c\xc7\x88\x01\xd0\x75" +
		"\xed\x0e\x5d\x18\xcf\xdb\x18\x1b\x77\xa8\x2c\x42\xef\xb1\x26\x26\xd7\xfd\x89\x32\x63\x38\x6d\x51\x17\xb0\x41\x0f" +
		"\x4a\x3e\x48\x25\xb3\xa5\x7c\x81\x98\x31\x4c\xc8\x4c\xcf\x7a\x71\x16\xfd\x55\xc3\x2f\xe6\x8a\xe4\x80\xfc\xcb\x73" +
		"\xa0\x6f\x52\x8d\xaf\x23\x2e\x19\xad\x45\x0f\x95\x73\x16\xf5\xcf\xea\xde\x53\x8d\xe3\xfb\x62\xba\x10\x17\xe7\xb4" +
		"\x72\x6f\x9d\x58\xa9\xcd\xf6\xe2\x9c\x16\xe2\x23\x00\x00\xff\xff\xab\x60\xb3\x30\x74\x02\x00\x00")

func bindataMigrations20190409152216addtradestablesqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20190409152216addtradestablesql,
		"migrations/20190409152216-add_trades_table.sql",
	)
}

func bindataMigrations20190409152216addtradestablesql() (*asset, error) {
	bytes, err := bindataMigrations20190409152216addtradestablesqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/20190409152216-add_trades_table.sql",
		size:        628,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1555072610, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrations20190409172610renameassetsdescdescriptionsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4" +
		"\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x4b\x2c\x2e\x4e\x2d\x29\xe6\x52\x50\x50\x50" +
		"\x08\x72\xf5\x73\xf4\x75\x55\x70\xf6\xf7\x09\xf5\xf5\x53\x50\x4a\x49\x2d\x4e\x56\x52\x08\xf1\x57\x00\x31\x8a\x32" +
		"\x0b\x4a\x32\xf3\xf3\xac\xb9\x50\x8c\x74\xc9\x2f\xcf\x23\xc9\x50\x24\xa3\x40\x26\x43\xec\xb0\xe6\x02\x04\x00\x00" +
		"\xff\xff\x80\x17\x6b\xa4\xa8\x00\x00\x00")

func bindataMigrations20190409172610renameassetsdescdescriptionsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20190409172610renameassetsdescdescriptionsql,
		"migrations/20190409172610-rename_assets_desc_description.sql",
	)
}

func bindataMigrations20190409172610renameassetsdescdescriptionsql() (*asset, error) {
	bytes, err := bindataMigrations20190409172610renameassetsdescdescriptionsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/20190409172610-rename_assets_desc_description.sql",
		size:        168,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1555072610, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrations20190410094830addassetsissueraccountfieldsql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xbf\xee\x82\x30\x1c\x04\xf0\xbd\x4f\x71\xe3\xef\x17\xc5\x17\x60" +
		"\xaa\x94\x81\xa4\x7e\xab\xd8\x0e\x4e\x04\x6b\x63\x88\x0a\x84\x96\xa8\x6f\x6f\x8c\x3a\x48\xfc\x37\x5f\xf2\xc9\xdd" +
		"\xb1\x28\xc2\xe8\x50\x6d\xbb\x32\x38\x98\x96\x71\xa9\xd3\x1c\x9a\x4f\x65\x8a\xb6\x5f\xef\x2b\x3b\x29\xbd\x77\xc1" +
		"\x33\x00\xe0\x42\x20\x51\xd2\xcc\x08\x95\xf7\xbd\xeb\x8a\xd2\xda\xa6\xaf\x03\x82\x3b\x05\x90\xd2\x20\x23\x65\xcc" +
		"\xbe\x38\x22\x57\x73\x24\x8a\x96\x3a\xe7\x19\x69\xdc\xa2\xc2\x36\x1b\x57\xdc\xe1\x9d\x3b\x0f\x18\x45\x72\xf5\xb6" +
		"\xd3\x27\xea\xd1\xd1\x50\xb6\x30\x29\xfe\xae\xd9\x78\x30\xe0\x3f\x66\xec\xe9\x0b\xd1\x1c\xeb\xdf\x56\xbc\xb8\x23" +
		"\x66\x97\x00\x00\x00\xff\xff\xd9\xd1\xc9\x0f\x58\x01\x00\x00")

func bindataMigrations20190410094830addassetsissueraccountfieldsqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20190410094830addassetsissueraccountfieldsql,
		"migrations/20190410094830-add_assets_issuer_account_field.sql",
	)
}

func bindataMigrations20190410094830addassetsissueraccountfieldsql() (*asset, error) {
	bytes, err := bindataMigrations20190410094830addassetsissueraccountfieldsqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/20190410094830-add_assets_issuer_account_field.sql",
		size:        344,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1555009433, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMigrations20190411165735dataseedandindicessql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\x1a\x3d\x10\xbe\xef\xaf\xf0\x2d\xa0\x37\x81\xdc\x5e\x29" +
		"\x51\x0f\x28\x6c\x54\x24\x02\x15\x90\x36\x37\xcb\xd8\x03\x58\xf1\xc7\xd6\x33\x86\xf0\xef\xab\xdd\xb5\x13\x36\x24" +
		"\x6a\x7a\xda\xf9\x78\x3c\xf3\xec\x7c\x15\x57\x57\xec\x3f\xab\xb7\x41\x10\xb0\xc7\xaa\x56\x97\x00\x8a\x4d\x10\x23" +
		"\x04\xb6\xf1\x81\x5d\x38\x41\x7a\x0f\x17\x4c\x20\x02\x61\x31\x99\x2d\xcb\xc5\x8a\x4d\x66\xab\x39\xab\xe2\xda\x68" +
		"\x39\xd0\x0d\x1a\x59\xaf\x60\x8c\x25\x23\x7f\x86\xe3\x65\xa3\x3b\x61\xa1\x95\x62\x30\xad\x40\xde\x1a\xfe\xaa\x6d" +
		"\x40\x41\x10\xa4\xbd\xe3\x08\x61\x0f\xa1\x35\x8b\x48\xbb\x8e\x81\x82\x70\xb8\x81\xd0\x31\x1e\x60\xcd\x1b\x24\x38" +
		"\x55\x79\xed\xa8\x35\x2b\xa8\x3c\x6a\xea\x40\x7d\xd8\x72\x3a\x68\x22\x08\x45\x9f\xfd\x1c\x4d\x1f\xcb\x65\xe2\x9c" +
		"\x7f\xb2\x05\x5e\x2c\x09\x8c\x11\x81\x8d\x61\x0f\xc6\x57\x16\x1c\xb1\x7b\x1f\x9d\x6a\x58\x66\xd4\x8e\xa8\xba\x19" +
		"\x0e\xb1\x05\x0f\x7c\xd8\x66\xcf\xbf\x7e\xeb\x48\x78\x33\x1c\x26\x76\x03\xe9\x6d\x0e\x5b\x47\x2d\xfa\xb7\xc5\x47" +
		"\x75\x6f\x3b\x92\x7e\x41\x7a\x95\xca\x4c\xc7\x2a\x49\x2e\x5a\x2e\xa4\xf4\xd1\x11\x9e\x14\x35\xc0\xef\xa8\x03\xa8" +
		"\x8e\x69\xef\xa5\x58\x9b\xf4\x50\xd8\xfa\x4d\x92\xeb\x2c\x5c\x7a\x47\xc1\x1b\x03\x8a\xaf\x8f\x5c\x79\x2b\xb4\x4b" +
		"\x7e\x27\x77\x3e\xf0\x0c\xcb\x2c\x3a\xe6\x37\x4a\x1a\xf9\x5e\x18\x9d\x72\x37\x62\xdb\x7a\x08\xc1\xa7\x46\x19\x81" +
		"\x74\x8a\x6a\x74\xb9\x03\xf9\x9c\x39\x2b\x8d\x95\x11\x47\xae\x40\x6a\x2b\x0c\xbe\x9f\x34\x05\x28\x83\xae\xea\xc0" +
		"\x97\xa9\x3a\x4e\xe9\x5a\xc5\x57\x1a\x2d\xb3\x96\x66\x8e\xbb\xd1\x2f\xa0\xb8\x8b\x76\x9d\x87\xc6\x8a\x97\x8e\xae" +
		"\x91\x47\x67\xb4\xd5\x94\xdf\x04\x50\x60\x9b\x54\x5c\x3b\xa4\x10\xe5\x49\x1e\xe9\x8d\x11\x04\x41\x18\x2e\x94\x0a" +
		"\x80\x08\x9f\x7a\x38\xea\xad\x13\x14\xc3\x1b\x24\x3a\x0a\x3a\xab\x48\x82\xe2\x2b\xff\x7a\xe5\x78\xae\x50\x52\x53" +
		"\xaf\xcf\xa6\xfb\x69\xfa\x90\x47\xad\x33\xe8\xd7\xed\xe7\x7e\x34\x5d\x96\x67\xe2\xf5\x20\xb9\x57\x8b\xc7\xf2\xe3" +
		"\xc1\x3d\xf7\x38\x7f\xe8\xf5\xcf\xc4\xff\xdf\xed\xd5\x34\x5a\x70\xf8\xc9\x36\x9c\x52\xf8\x8c\xe6\x57\x37\xab\xb7" +
		"\x2c\xa7\xe5\xdd\x8a\x69\xc5\xee\x17\xf3\x87\xf7\x07\xeb\xd7\xf7\x72\x51\x9e\x1c\x2c\xf6\xed\xed\xdc\x8d\x66\xe3" +
		"\xd3\x8b\x51\xbb\xfe\xb2\xa6\xfd\x6e\x89\x9b\xad\xbd\x5b\x94\xa3\x55\xc9\x26\xb3\x71\xf9\x54\x1f\x30\x05\xc8\x0d" +
		"\xa8\x2d\x04\x2e\x8d\x47\xe0\xa4\x2d\x70\xad\x5e\xd8\x7c\x96\xd9\xb5\x30\xd6\x3b\xc3\xb1\x71\xb9\xbc\xab\xa3\x76" +
		"\xce\xf6\xd8\x1f\x5c\x31\x5e\xcc\x7f\x7c\x21\xcb\x6d\xf1\x27\x00\x00\xff\xff\xa1\x61\x7e\x4c\xf2\x05\x00\x00")

func bindataMigrations20190411165735dataseedandindicessqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataMigrations20190411165735dataseedandindicessql,
		"migrations/20190411165735-data_seed_and_indices.sql",
	)
}

func bindataMigrations20190411165735dataseedandindicessql() (*asset, error) {
	bytes, err := bindataMigrations20190411165735dataseedandindicessqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "migrations/20190411165735-data_seed_and_indices.sql",
		size:        1522,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1555072794, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"migrations/20190404184050-initial.sql":                         bindataMigrations20190404184050initialsql,
	"migrations/20190405112544-increase_asset_code_size.sql":        bindataMigrations20190405112544increaseassetcodesizesql,
	"migrations/20190408115724-add_new_asset_fields.sql":            bindataMigrations20190408115724addnewassetfieldssql,
	"migrations/20190408155841-add_issuers_table.sql":               bindataMigrations20190408155841addissuerstablesql,
	"migrations/20190409152216-add_trades_table.sql":                bindataMigrations20190409152216addtradestablesql,
	"migrations/20190409172610-rename_assets_desc_description.sql":  bindataMigrations20190409172610renameassetsdescdescriptionsql,
	"migrations/20190410094830-add_assets_issuer_account_field.sql": bindataMigrations20190410094830addassetsissueraccountfieldsql,
	"migrations/20190411165735-data_seed_and_indices.sql":           bindataMigrations20190411165735dataseedandindicessql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"migrations": {Func: nil, Children: map[string]*bintree{
		"20190404184050-initial.sql":                         {Func: bindataMigrations20190404184050initialsql, Children: map[string]*bintree{}},
		"20190405112544-increase_asset_code_size.sql":        {Func: bindataMigrations20190405112544increaseassetcodesizesql, Children: map[string]*bintree{}},
		"20190408115724-add_new_asset_fields.sql":            {Func: bindataMigrations20190408115724addnewassetfieldssql, Children: map[string]*bintree{}},
		"20190408155841-add_issuers_table.sql":               {Func: bindataMigrations20190408155841addissuerstablesql, Children: map[string]*bintree{}},
		"20190409152216-add_trades_table.sql":                {Func: bindataMigrations20190409152216addtradestablesql, Children: map[string]*bintree{}},
		"20190409172610-rename_assets_desc_description.sql":  {Func: bindataMigrations20190409172610renameassetsdescdescriptionsql, Children: map[string]*bintree{}},
		"20190410094830-add_assets_issuer_account_field.sql": {Func: bindataMigrations20190410094830addassetsissueraccountfieldsql, Children: map[string]*bintree{}},
		"20190411165735-data_seed_and_indices.sql":           {Func: bindataMigrations20190411165735dataseedandindicessql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
