// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (259B)
// migrations/20200311000001-create-identities.sql (324B)
// migrations/20200311000002-create-auth-methods.sql (653B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\x03\x31\x10\x86\xef\xf3\x14\xff\x71\x17\xed\x13\xf4\x94\x9a\x51\x83\xd9\x24\xa6\x13\xda\x7a\x91\xb0\x09\xd2\x83\xad\xec\x46\x7c\x7d\xb1\x48\x5d\x3c\x0e\xcc\xf7\xf3\x7d\xab\x15\x6e\xde\x8f\x6f\x53\x6e\x15\xe9\x83\xe8\x2e\xb2\x12\x86\xa8\x8d\x65\xe4\x71\x3c\x7f\x9e\xda\x8c\x8e\x80\x63\xc1\xc6\x3c\x6c\x39\x1a\x65\xe1\xbc\xc0\x25\x6b\x11\xa2\x19\x54\x3c\xe0\x89\x0f\xb7\x44\xc0\x38\xd5\xdc\x6a\x79\xcd\x0d\x62\x06\xde\x8a\x1a\x02\x76\x46\x1e\x2f\x27\x5e\xbc\xe3\x3f\x58\xf3\xbd\x4a\x56\xe0\xfc\xae\xeb\x2f\x78\x2e\x65\xaa\xf3\x0c\xe1\xbd\x5c\xff\xa8\x5f\x5f\xc5\x92\x33\xcf\x89\x61\x9c\xe6\x3d\xbc\x5b\x28\xa6\x10\x38\x76\xbf\x03\xfd\x0f\xb2\x6c\xd3\xe7\xaf\x13\x91\x8e\x3e\xfc\x6b\x5b\xd3\x77\x00\x00\x00\xff\xff\x0e\x26\x86\x89\x03\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x50, 0xa4, 0xa1, 0xfd, 0x14, 0x93, 0x7b, 0xd1, 0xbd, 0x83, 0x59, 0x57, 0x19, 0x30, 0xfa, 0xcf, 0x99, 0x7b, 0x1b, 0x8e, 0x7f, 0xa7, 0x25, 0x6, 0x10, 0x5c, 0xb5, 0x6, 0xf4, 0xa2, 0x81}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\x73\xb4\x69\xf2\x05\x39\x29\xd6\xa6\x15\x95\x65\x23\xaf\x49\xd2\x4b\x30\xb6\x28\x82\xd6\x2e\x8e\x4a\x7f\xbf\x38\xa5\x75\xa0\xc7\x85\x9d\xe1\xbd\xd9\x6e\xf1\xf0\x1e\x5f\xe7\x2e\x05\xb4\x1f\x44\x85\x67\x25\x0c\x51\x7b\xcb\x88\x43\x18\x53\x4c\x31\x5c\x91\x11\xd0\xf5\xfd\xf4\x39\xa6\x4b\x1c\xb0\x37\x8f\xc6\x09\x5c\x25\x70\xad\xb5\xf0\x7c\x60\xcf\xae\xe0\xe6\xf7\xeb\x8a\x2c\x0e\x39\x2a\x07\xcd\x96\x85\x51\xa8\xa6\x50\x9a\x37\x04\xfc\x14\x34\xec\x8d\xb2\x6b\x47\xed\x4d\xa9\xfc\x19\xcf\x7c\xde\x10\x01\xfd\x1c\xba\x14\x86\x4b\x97\x20\xa6\xe4\x46\x54\x59\xe3\x68\xe4\xe9\x76\xe2\xa5\x72\xbc\x86\x35\x1f\x54\x6b\x17\xa2\x63\x96\xdf\xe2\xf3\xf4\x16\x20\x7c\x5a\x29\x29\xdf\xfd\x09\x1a\xa7\xf9\xb4\xd0\xdd\x3b\xae\x82\xcb\xe7\xfd\x34\x7a\xfa\x1a\x89\xb4\xaf\xea\x7f\xd3\xec\xe8\x3b\x00\x00\xff\xff\xae\x52\x60\xe9\x44\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xbb, 0xf9, 0x30, 0xfc, 0xda, 0xa8, 0x1e, 0x22, 0xc6, 0x11, 0x18, 0x9e, 0x84, 0xae, 0x3d, 0x3a, 0xb3, 0xd8, 0xd, 0xc8, 0x9d, 0x4f, 0x64, 0x1f, 0x31, 0x7a, 0x4d, 0x96, 0x25, 0xe9, 0xd0}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcb\x6e\xb3\x30\x10\x85\xf7\x7e\x8a\x51\x36\x09\xfa\x93\x27\x60\xe5\xc0\xe4\x2f\x2a\x18\x04\x46\x69\xba\x41\x6e\x18\x35\x96\xb8\x44\x60\xda\xe6\xed\x2b\xe7\x52\x12\x35\x6a\x96\x0c\xe7\x7c\x3e\x3e\x9e\xc5\x02\xfe\xd5\xfa\xbd\x53\x86\x20\xdf\x33\xe6\xa5\xc8\x25\x82\xdc\x24\x08\x6a\x30\xbb\xa2\x26\xb3\x6b\xcb\xc2\x1c\xf6\x04\x3c\x03\x14\x79\x04\x33\x06\x30\xed\x0d\x55\x95\xea\x0a\x55\x96\x1d\xf5\xfd\x74\x6e\x87\xfb\x5d\xdb\x50\xd1\x0c\xf5\x1b\x75\xa7\x09\xd5\x4a\x57\x53\xe6\xb8\x23\x9b\x2f\xc3\x1b\x78\x7f\x04\xaa\xed\xb6\x1d\x1a\x53\xe8\x12\x96\xc1\xff\x40\x48\x10\xb1\x04\x91\x87\x21\xa4\xb8\xc2\x14\x85\x87\xd9\x45\xd5\xc3\x4c\x97\x0e\xc4\x02\x7c\x0c\x51\x22\x78\x3c\xf3\xb8\x8f\xf6\x48\x5d\x52\x63\xb4\x39\x3c\x20\x9d\x65\x9a\xfe\x66\x59\x44\x86\x69\xc0\xc3\x91\x92\xa4\x41\xc4\xd3\x0d\x3c\xe3\x66\xce\x18\xc0\xb6\x23\x65\xa8\x2c\x94\x01\x19\x44\x98\x49\x1e\x25\xb0\x0e\xe4\xd3\xf1\x13\x5e\x63\x81\xa3\xd9\xc7\x15\xcf\x43\x9b\x69\x3d\x73\x8e\xf6\x89\x2d\x77\xf2\xbb\xee\x8b\xc5\x06\xf9\x50\xd5\x40\x60\xe8\xcb\xfc\x8c\xaf\x3b\x0d\x84\x8f\x2f\xf6\x0a\xb7\xb5\x8e\x9d\x3a\xee\x03\xe9\x55\x6b\x0f\xb5\xa7\xc0\xf3\x53\x28\x9b\xe2\x7a\x8b\xfc\xf6\xb3\x61\xcc\x4f\xe3\xe4\xce\x4b\xbb\xe7\x1f\xf7\xd6\xcb\x65\xdf\x01\x00\x00\xff\xff\xd8\xfe\x49\x48\x8d\x02\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0xce, 0xc8, 0xad, 0x9e, 0x16, 0xf0, 0xc2, 0x9b, 0xb2, 0xc1, 0x3d, 0xb6, 0x4b, 0xf1, 0x98, 0x6b, 0xd, 0x9, 0xe3, 0x52, 0xf5, 0x38, 0xd3, 0x49, 0x43, 0xa1, 0xab, 0x26, 0xd8, 0x1, 0x85}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
