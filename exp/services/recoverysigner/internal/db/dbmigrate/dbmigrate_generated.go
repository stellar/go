// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (298B)
// migrations/20200311000001-create-identities.sql (363B)
// migrations/20200311000002-create-auth-methods.sql (690B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x4e\xc3\x30\x10\x86\xf7\x7b\x8a\x7f\x4c\x44\xfb\x04\x9d\x5c\x72\x80\x85\x63\x1b\xf7\xac\xb6\x2c\xc8\x8a\x2d\xd4\x81\xb6\x4a\x5c\xf1\xfa\x88\x0a\x95\x88\x85\xf1\x86\xef\xbb\xbb\x6f\xb9\xc4\xdd\xc7\xe1\x7d\x4c\xb5\x20\x9e\x89\xee\x03\x2b\x61\x88\x5a\x1b\x46\x1a\x86\xd3\xe5\x58\x27\x34\x04\x1c\x32\xd6\xfa\x71\xc3\x41\x2b\x03\xeb\x04\x36\x1a\x03\x1f\x74\xaf\xc2\x1e\xcf\xbc\x5f\x10\x01\xc3\x58\x52\x2d\xf9\x2d\x55\x88\xee\x79\x23\xaa\xf7\xd8\x6a\x79\xba\x8e\x78\x75\x96\x7f\xe1\x8e\x1f\x54\x34\x02\xeb\xb6\x4d\xbb\x20\xe0\x72\xce\xff\xd1\xd7\x2d\x29\xe7\xb1\x4c\x13\x84\x77\x72\xd3\x51\xbb\xba\xdd\x1f\xad\x7e\x89\x0c\x6d\x3b\xde\xc1\xd9\xd9\x27\xd1\x7b\x0e\xcd\x8f\xa0\xfd\x46\xe6\x09\xba\xd3\xe7\x91\xa8\x0b\xce\xff\x49\xb0\xa2\xaf\x00\x00\x00\xff\xff\xa8\xf1\x1d\x4d\x2a\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x8f, 0x2d, 0xd, 0xed, 0xc4, 0x97, 0xbc, 0x53, 0x35, 0x95, 0xe4, 0xe1, 0x6b, 0xae, 0xd3, 0xdf, 0xf4, 0x91, 0x1f, 0x49, 0xce, 0x1c, 0x38, 0xe3, 0x27, 0x3d, 0x7b, 0x85, 0xed, 0xc8, 0xc}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4d\x6a\xc3\x30\x10\x85\xf7\x73\x8a\xb7\xb4\x69\x72\x82\xac\x14\x6b\xd2\x8a\xca\xb2\x91\x65\x92\x74\x13\x8c\x25\x8a\xa0\xb5\x83\xa3\xd0\xeb\x17\xa7\xb4\x0e\x74\x91\xe5\xc0\xfb\x99\xf7\xad\xd7\x78\xfa\x8c\xef\x53\x97\x02\xda\x33\x51\x61\x59\x38\x86\x13\x5b\xcd\x88\x3e\x0c\x29\xa6\x18\x2e\xc8\x08\xe8\xfa\x7e\xbc\x0e\xe9\x14\x3d\xb6\xea\x59\x19\x07\x53\x39\x98\x56\x6b\x58\xde\xb1\x65\x53\x70\xf3\xab\xba\x20\x8b\x3e\x47\x65\x20\x59\xb3\x63\x14\xa2\x29\x84\xe4\x15\x01\x3f\x01\x0d\x5b\x25\xf4\x92\x51\x5b\x55\x0a\x7b\xc4\x2b\x1f\x57\x44\x40\x3f\x85\x2e\x05\x7f\xea\x12\x9c\x2a\xb9\x71\xa2\xac\xb1\x57\xee\xe5\x76\xe2\xad\x32\xbc\x98\x25\xef\x44\xab\xe7\x8f\xf6\x59\x3e\x77\x5c\xcf\xfe\x91\xfb\xd6\x32\x8d\x1f\x01\x8e\x0f\xcb\x18\xca\x37\x7f\x1c\x94\x91\x7c\x98\x47\xdc\xa3\x58\x38\xcc\xca\x7b\x82\x72\xfc\x1a\x88\xa4\xad\xea\x7f\x04\x37\xf4\x1d\x00\x00\xff\xff\xe2\x23\x3a\x6b\x6b\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0x91, 0x2f, 0xbb, 0xe6, 0x8e, 0x60, 0x8b, 0xb, 0xed, 0xa7, 0xe3, 0x47, 0x61, 0x51, 0xc, 0xaa, 0x38, 0x64, 0xc3, 0xca, 0xb3, 0xd0, 0x50, 0xcf, 0x2d, 0x56, 0xde, 0x83, 0xbc, 0x51, 0x50}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcd\x6e\xab\x30\x10\x85\xf7\x7e\x8a\xd9\x25\xe8\x26\x4f\xc0\xca\x81\xc9\x2d\x2a\x18\x04\x46\x69\xba\x41\x6e\x6c\x35\x96\xf8\x13\x98\xb6\x79\xfb\xca\x24\x29\x89\x1a\x95\x25\xc3\x99\x6f\x8e\xcf\xcc\x7a\x0d\xff\x2a\xfd\xde\x09\xa3\x20\x6f\x09\xf1\x52\xa4\x1c\x81\xef\x13\x04\x31\x98\x63\x51\x29\x73\x6c\x64\x61\x4e\xad\x02\x9a\x01\xb2\x3c\x82\x25\x01\x58\xf4\x46\x95\xa5\xe8\x0a\x21\x65\xa7\xfa\x7e\xb1\xb2\xc5\xf6\xd8\xd4\xaa\xa8\x87\xea\x4d\x75\xe7\x8a\xaa\x84\x2e\x17\xc4\x71\x27\x36\xdd\x84\x77\xf0\x7e\x04\x8a\xc3\xa1\x19\x6a\x53\x68\x09\x9b\xe0\x7f\xc0\x38\xb0\x98\x03\xcb\xc3\x10\x52\xdc\x62\x8a\xcc\xc3\xec\xaa\xea\x61\xa9\xa5\x03\x31\x03\x1f\x43\xe4\x08\x1e\xcd\x3c\xea\xa3\x1d\xa9\xa5\xaa\x8d\x36\xa7\x19\xd2\x45\xa6\xd5\xdf\x2c\x8b\xc8\x30\x0d\x68\x38\x51\x92\x34\x88\x68\xba\x87\x67\xdc\xaf\x08\x01\x38\x74\x4a\x18\x25\x0b\x61\x80\x07\x11\x66\x9c\x46\x09\xec\x02\xfe\x34\x7e\xc2\x6b\xcc\x70\x6a\xf6\x71\x4b\xf3\xd0\x7a\xda\x2d\x1d\x3b\x63\x68\xe5\x5c\xf7\x38\xc5\xae\xa0\xf8\xbd\x94\x2b\xd8\xa2\x3e\x44\x39\x28\x30\xea\xcb\xfc\x94\x6f\x93\x0f\x98\x8f\x2f\xf6\xa1\xf7\xe1\x4f\xc9\x3b\xee\x8c\xf4\x26\xdb\x59\xed\xe8\x77\x75\xf6\x64\x4d\xdc\x9e\x9a\xdf\x7c\xd6\x84\xf8\x69\x9c\x3c\x38\x07\xf7\xf2\xe3\xd1\x0d\xba\xe4\x3b\x00\x00\xff\xff\xd0\xcd\xe2\x01\xb2\x02\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x1c, 0x43, 0x1, 0x53, 0xbc, 0x90, 0x81, 0x61, 0xff, 0xba, 0xce, 0x3e, 0xee, 0xfa, 0xc8, 0x15, 0x88, 0x72, 0x9e, 0x3b, 0x45, 0xf7, 0x64, 0xf, 0xa6, 0x79, 0xf, 0xfb, 0x66, 0xfb, 0xc0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
