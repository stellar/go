// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (335B)
// migrations/20200311000001-create-identities.sql (444B)
// migrations/20200311000002-create-auth-methods.sql (953B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4f\x4b\xc4\x30\x14\xc4\xef\xef\x53\xcc\xb1\x45\xf7\x13\xf4\x94\xb5\x0f\x37\xd8\xa6\x31\x7d\x61\x77\xbd\x2c\xa1\x09\x52\xd0\x5d\x69\x2b\x7e\x7d\xa1\x68\x09\x5e\x3c\xbe\x3f\xf3\x63\x66\x76\x3b\xdc\xbd\x8f\xaf\x53\x58\x12\xfc\x07\xd1\x83\x63\x25\x0c\x51\xfb\x86\x11\x86\xe1\xf6\x79\x5d\x66\x14\x04\x8c\x11\x7b\xfd\xd8\xb3\xd3\xaa\x81\xe9\x04\xc6\x37\xcd\x3d\x11\x60\x9d\x6e\x95\x3b\xe3\x89\xcf\x28\xc6\x58\xae\xcb\x61\x4a\x61\x49\xf1\x12\x16\x88\x6e\xb9\x17\xd5\x5a\x1c\xb5\x1c\xd6\x11\x2f\x9d\xe1\x8c\x02\xc4\xf4\x96\xfe\xf9\x5f\xb9\x21\xc6\x29\xcd\x33\x84\x4f\xb2\x01\xa8\xac\x36\xeb\xde\xe8\x67\xcf\xd0\xa6\xe6\xd3\x96\xe0\xf2\x2b\xeb\x4c\x96\xca\x5b\xcb\xae\xf8\x39\x95\x25\x8e\x07\x76\x9c\x3b\xd1\xfd\x8a\xaf\x88\xf2\x9e\xea\xdb\xd7\x95\xa8\x76\x9d\xfd\xd3\x53\x45\xdf\x01\x00\x00\xff\xff\x6e\xdf\x97\x68\x4f\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x6e, 0x3e, 0x48, 0x39, 0xd6, 0x5, 0xcb, 0xd0, 0x73, 0x7, 0xdc, 0xb8, 0x76, 0x93, 0x8f, 0x2a, 0xde, 0x35, 0xbd, 0x6c, 0xb, 0x1a, 0x1a, 0x3e, 0x3d, 0xf6, 0x79, 0xae, 0x2d, 0xa0, 0xcb}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcb\x6e\xab\x30\x10\x86\xf7\xf3\x14\xff\x32\xe8\x24\x4f\xc0\xca\x81\x49\x62\x1d\x30\xc8\x38\x4a\xd2\x0d\x42\xd8\xaa\x2c\xa5\x50\x11\x57\x7d\xfd\x0a\x7a\x89\xdb\x2e\xba\xb4\x67\xf4\xcd\x7f\xd9\x6c\xf0\xef\xc9\x3f\x4e\x5d\x70\x38\x3e\x13\x65\x9a\x85\x61\x18\xb1\x2d\x18\xde\xba\x21\xf8\xe0\xdd\x0d\x2b\x02\xba\xbe\x1f\x5f\x86\xd0\x7a\x8b\xad\xdc\x4b\x65\xa0\x2a\x03\x75\x2c\x8a\x35\x01\xef\xbf\x0d\x6b\x29\x8a\x68\x40\xc0\xae\xd2\x2c\xf7\x0a\xff\xf9\x82\xd5\x1d\x92\x40\xf3\x8e\x35\xab\x8c\x9b\x4f\xf6\x0d\xab\x79\x50\x29\xe4\x5c\xb0\x61\x64\xa2\xc9\x44\xce\xf3\x81\x5a\xcb\x52\xe8\xcb\x4f\xcc\x1a\xde\x26\xcb\x9d\x7e\x72\x5d\x70\xb6\xed\x02\x8c\x2c\xb9\x31\xa2\xac\x71\x92\xe6\xb0\x3c\xf1\x50\x29\xfe\xa6\xd8\xba\xab\xfb\x63\x7f\xe1\x4e\xe3\xd5\xc1\xf0\xf9\xee\x97\x92\xf4\x2b\x2a\xa9\x72\x3e\x47\x51\xb5\x1f\xd2\xbc\x9d\x6d\xc4\x11\xc6\xd6\x4f\x07\xd6\x1c\x2b\x90\xcd\x42\x4e\x89\xe2\x4a\xf2\xf1\x75\x20\xca\x75\x55\xff\xaa\x24\xa5\xb7\x00\x00\x00\xff\xff\x65\x2a\xe7\xa1\xbc\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x76, 0xdc, 0x95, 0x43, 0x7e, 0x2, 0x98, 0x5, 0xc6, 0xb5, 0x40, 0xc1, 0x36, 0x95, 0x8d, 0x1, 0xb6, 0x28, 0xfa, 0x6e, 0x45, 0xa, 0xb3, 0x0, 0xfb, 0x66, 0xf3, 0xab, 0xf9, 0x45, 0x5a}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x4d\x6e\xdb\x30\x10\x85\xf7\x3c\xc5\x20\x1b\x3b\xa8\x72\x02\xad\x18\x69\x92\x10\x95\x28\x81\xa2\x91\xba\x1b\x82\x35\x07\xb5\x00\xfd\x18\x12\xd5\x36\xb7\x2f\x24\x3b\x8d\x94\xd8\x6e\xd1\x25\x67\xc8\xef\x71\xde\xc3\xdc\xdd\xc1\xa7\xba\xfc\xde\x59\x4f\xb0\x39\x30\x16\x29\xe4\x1a\x41\x6f\x73\x04\x3b\xf8\xbd\xa9\xc9\xef\x5b\x67\xfc\xcb\x81\x80\x17\x80\x72\x93\xc2\x7a\xd5\x7b\xaa\x2a\xdb\x19\xeb\x5c\x47\x7d\xbf\x0a\x60\x75\xd8\xb7\x0d\x99\x66\xa8\xbf\x51\x37\x9e\xa9\xb6\x65\xb5\xba\x0d\xdf\x98\xfc\x3e\x59\x40\x7b\x58\x33\x00\xbb\xdb\xb5\x43\xe3\x4d\xe9\xe0\x5e\x3c\x0a\xa9\x41\x66\x1a\xe4\x26\x49\x02\x06\x50\x3a\x6a\x7c\xe9\x5f\x2e\xb6\xc7\x6a\x81\x4a\xf0\x64\xd6\x60\x00\x0f\x99\x42\xf1\x28\xe1\x33\x6e\x61\xfd\xa6\x71\x0b\x0a\x1f\x50\xa1\x8c\xb0\x78\x95\xee\x61\x3d\x36\x32\x09\x31\x26\xa8\x11\x22\x5e\x44\x3c\xc6\xe0\x32\x26\x98\x7f\x6c\xc1\x3c\xd5\x4b\xea\xdf\xdf\xbf\xa0\x90\x2b\x91\x72\xb5\xbd\xaa\x30\x3d\x9f\xc6\xda\x75\x64\x3d\x39\x63\x3d\x68\x91\x62\xa1\x79\x9a\xc3\xb3\xd0\x4f\xd3\x11\xbe\x66\x12\x17\x06\x39\xaa\xe8\x2f\xf7\x27\xee\xcd\x18\xf0\xcd\xc7\xc8\xe7\xac\x1f\xb6\x1a\x08\x3c\xfd\xf2\x7f\xca\x6c\x96\xaf\x90\x31\x7e\x59\xe4\x6b\x4e\xe3\x94\x6e\x1c\x7d\x99\xfc\x3c\x92\xe7\x27\x54\x38\xff\xaa\x28\x26\x7a\xf8\x2f\x68\xf3\xea\xd3\x75\x95\x77\x89\xfd\x8f\xe4\x68\x88\x39\x9a\xf0\x41\xe8\xe8\x5f\x70\xf4\xe8\x1a\x9e\xcd\x37\x2e\x6e\x7f\x36\x8c\xc5\x2a\xcb\xcf\x6c\x47\x78\x6a\x9c\x5b\xc5\x90\xfd\x0e\x00\x00\xff\xff\x4f\xdd\x17\x99\xb9\x03\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0xeb, 0xec, 0x12, 0x9d, 0x78, 0x9b, 0xcf, 0xbb, 0x6b, 0xb1, 0x1e, 0xbe, 0x50, 0x1, 0xa5, 0xa2, 0xb8, 0x5, 0x64, 0x3, 0x14, 0x9, 0xe7, 0x9d, 0x72, 0xf8, 0x72, 0x98, 0x60, 0x52, 0x37}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
