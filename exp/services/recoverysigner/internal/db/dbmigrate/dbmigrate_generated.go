// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (320B)
// migrations/20200311000001-create-identities.sql (387B)
// migrations/20200311000002-create-auth-methods.sql (644B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x4b\x03\x31\x14\x84\xef\xef\x57\xcc\xb1\x8b\xed\x2f\xd8\xd3\x6a\x1e\x34\xb8\x9b\xc4\xf4\x85\xb6\x5e\x4a\xd8\x04\x29\x68\x2b\xbb\x11\xff\xbe\x58\x34\x2c\x5e\x3c\x3e\xde\xcc\xf0\xcd\x6c\x36\xb8\x7b\x3b\xbf\x4c\xb1\x64\x84\x77\xa2\x07\xcf\x9d\x30\xa4\xbb\xef\x19\x71\x1c\xaf\x1f\x97\x32\x63\x45\xc0\x39\x21\x04\xad\x60\xac\xc0\x84\xbe\x87\xf3\x7a\xe8\xfc\x11\x8f\x7c\x5c\x13\x30\x4e\x39\x96\x9c\x4e\xb1\x40\xf4\xc0\x3b\xe9\x06\x87\xbd\x96\xed\xed\xc4\xb3\x35\x5c\xbd\xdf\xfa\x94\x5f\xf3\x3f\xfa\x35\x11\x10\x53\x9a\xf2\x3c\x43\xf8\x20\x35\x80\x9a\xb6\xb2\x06\xa3\x9f\x02\x43\x1b\xc5\x87\x8a\x7c\xfa\xb5\x59\xb3\xa8\x11\x9c\x63\xbf\xfa\x79\x35\x0d\xf6\x5b\xf6\xbc\x24\xd1\xbb\x5b\x7c\x4b\xb4\x1c\x46\x5d\x3f\x2f\x44\xca\x5b\xf7\x67\x98\x96\xbe\x02\x00\x00\xff\xff\x64\xd2\x16\x2f\x40\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x75, 0x28, 0x6d, 0xa1, 0x18, 0xaf, 0x77, 0xed, 0x85, 0xc9, 0x20, 0xed, 0xa8, 0x77, 0x17, 0xdb, 0x2, 0xa1, 0xd4, 0x2f, 0x56, 0x58, 0x62, 0xfa, 0x81, 0xca, 0x25, 0x59, 0xa8, 0x48, 0x37}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6a\xc3\x30\x14\x44\xf7\xff\x14\xb3\x8c\x69\x72\x02\xaf\x54\xeb\x97\x88\xda\x92\x91\x65\x92\x74\x63\x8c\x25\x8a\x20\xb5\x8b\xa3\xd2\xeb\x97\x04\xea\xba\x64\x91\xa5\xd0\xcc\x1f\xde\xdb\xed\xf0\xf4\x11\xdf\xe7\x3e\x05\xb4\x9f\x44\x85\x65\xe1\x18\x4e\x3c\x97\x8c\xe8\xc3\x98\x62\x8a\xe1\x82\x0d\x01\xd1\xa3\x6d\x95\x84\x36\x0e\xba\x2d\x4b\xd4\x56\x55\xc2\x9e\xf0\xca\xa7\x2d\x01\xc3\x1c\xfa\x14\x7c\xd7\x27\x38\x55\x71\xe3\x44\x55\xe3\xa0\xdc\xfe\xf6\xc4\x9b\xd1\xbc\x74\xaf\x79\x1f\xce\xe1\x41\x7e\x4b\x04\xf4\xc3\x30\x7d\x8d\xa9\xbb\xdb\xb7\xfc\xc2\x96\x75\xc1\xcd\x6f\xe6\xb2\x89\x3e\x83\xd1\x90\x5c\xb2\x63\x14\xa2\x29\x84\xe4\xeb\xda\x3c\x9d\x03\x1c\x1f\xdd\xd2\xa7\x2c\x5f\x80\x95\x96\x7c\x5c\x01\x77\xab\x51\xa3\xff\x99\xf8\xfb\xc9\x70\xd8\xb3\xe5\x35\x88\x6a\x6e\xa7\x73\xa2\xb5\x59\x39\x7d\x8f\x44\xd2\x9a\xfa\xce\x6c\x4e\x3f\x01\x00\x00\xff\xff\x28\x71\x2c\xa6\x83\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x86, 0xa8, 0x5c, 0x1e, 0x13, 0xd5, 0xea, 0xb1, 0x21, 0xf1, 0xf0, 0xc6, 0x52, 0x56, 0xd3, 0x2, 0xa9, 0xea, 0x1b, 0x2c, 0xb3, 0x2, 0xa5, 0xe, 0x82, 0x3c, 0x92, 0x9d, 0x5e, 0x2d, 0x81}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x6e\x82\x40\x10\x86\xef\xfb\x14\x13\x2f\x68\x8a\x4f\xc0\x69\x0b\xd3\x48\x0a\x0b\x59\x96\x58\x7b\xd9\x6c\xbb\x93\x4a\x02\x68\x60\x6d\xeb\xdb\x37\x68\x6b\xb1\x1a\x7b\x1c\x66\xf8\xff\x6f\xfe\x9d\xf9\x1c\xee\x9a\xea\xad\x33\x8e\xa0\xdc\x32\x16\x4a\xe4\x0a\x41\xad\x72\x04\xb3\x73\x6b\xdd\x90\x5b\x6f\xac\x76\xfb\x2d\x01\x2f\x00\x45\x99\xc2\xd4\xeb\x1d\xd5\xb5\xe9\xb4\xb1\xb6\xa3\xbe\xf7\x7c\xf0\xb6\xeb\x4d\x4b\xba\xdd\x35\x2f\xd4\x0d\x35\x35\xa6\xaa\xbd\x59\xf0\xab\xc9\xef\x93\x33\xd1\x1e\xa6\x0c\xa0\xb2\x50\x96\x71\x04\x22\x53\x20\xca\x24\x81\x5c\xc6\x29\x97\x2b\x78\xc4\x95\xcf\x00\x5e\x3b\x32\x8e\xac\x36\x0e\x54\x9c\x62\xa1\x78\x9a\xc3\x32\x56\x8b\x43\x09\xcf\x99\xc0\xd3\xbf\xc3\xbc\xa5\x9a\xfe\x99\xf7\xd9\xc1\x97\x5a\x57\xb9\xbd\xbe\x00\x90\xf8\x80\x12\x45\x88\xc5\xcf\x50\x45\xfd\xb4\xb2\x33\xc8\x04\x44\x98\xa0\x42\x08\x79\x11\xf2\x08\x07\xc3\xc9\x90\xcd\xe4\x32\xad\x31\xd4\xbb\xa9\x77\x04\x8e\x3e\xdd\xe9\x33\x1b\x45\x13\x8b\x08\x9f\xce\xa2\xd1\x63\xbc\x4c\xfc\x89\x6d\xd4\x9c\xc1\x72\x81\x12\xc7\x6b\xc7\xc5\xc1\x20\xb8\xa1\x3e\x00\xea\x23\xd4\x85\xf8\x71\x1f\xff\xc8\x7c\x4b\x9e\x8d\x8f\x27\xda\x7c\xb4\x8c\x45\x32\xcb\xaf\x3c\x74\xf0\xdd\xb8\x76\x55\x01\xfb\x0a\x00\x00\xff\xff\x27\x28\x73\x65\x84\x02\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0xdc, 0x26, 0xc7, 0xd7, 0xea, 0xad, 0x63, 0xe7, 0x59, 0x1f, 0x80, 0x84, 0xa, 0xc2, 0xaa, 0x70, 0xa8, 0x9e, 0x8a, 0xc4, 0xd2, 0xbb, 0xca, 0xa2, 0xc0, 0x1d, 0xd7, 0xf8, 0x22, 0xb7, 0x15}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
