// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (330B)
// migrations/20200311000001-create-identities.sql (437B)
// migrations/20200311000002-create-auth-methods.sql (942B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x4a\xc4\x30\x10\xc6\xef\xf3\x14\xdf\xb1\x45\xf7\x09\x7a\xaa\x76\x60\x83\x6d\x1a\xb3\x13\x76\xd7\xcb\x12\x9a\x20\x05\xdd\x95\x36\xe2\xeb\x0b\x41\x4b\xf0\xe2\x71\xfe\xfd\xf8\xcd\xb7\xdb\xe1\xee\x7d\x7e\x5d\x7c\x8a\x70\x1f\x44\x8f\x96\x5b\x61\x48\xfb\xd0\x33\xfc\x34\xdd\x3e\xaf\x69\x45\x45\xc0\x1c\xe0\x9c\xea\xa0\x47\x81\x76\x7d\x7f\x4f\x04\x18\xab\x86\xd6\x9e\xf1\xc4\x67\x54\x73\xa8\x73\x73\x5a\xa2\x4f\x31\x5c\x7c\x82\xa8\x81\x0f\xd2\x0e\x06\x47\x25\xfb\x5c\xe2\x65\xd4\x5c\x50\x80\x10\xdf\xe2\x3f\xfb\x99\xeb\x43\x58\xe2\xba\x42\xf8\x24\x1b\x80\xea\x66\xb3\x76\x5a\x3d\x3b\x86\xd2\x1d\x9f\x36\xf9\xcb\xef\xd9\xa8\x8b\x87\x9c\x31\x6c\xab\x9f\x51\x5d\xe3\xb8\x67\xcb\xa5\x89\x3a\x64\x7c\x43\x54\x46\xd4\xdd\xbe\xae\x44\x9d\x1d\xcd\x9f\x88\x1a\xfa\x0e\x00\x00\xff\xff\x04\xf6\xc5\x09\x4a\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x7, 0xa2, 0xde, 0x70, 0xce, 0x6e, 0x1, 0x87, 0x3d, 0x63, 0xbc, 0xee, 0xac, 0x96, 0x3e, 0x2a, 0xe7, 0xd1, 0x21, 0x30, 0xfc, 0x22, 0xb2, 0xa3, 0x72, 0x1b, 0xcc, 0x23, 0x40, 0x91, 0x73}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcb\x6e\xab\x30\x10\x86\xf7\xf3\x14\xff\x32\xe8\x24\x4f\xc0\xca\x07\x4f\x1a\xab\x60\x90\x31\x4a\xd2\x0d\x42\xd8\xaa\x2c\xa5\x50\x11\x57\x7d\xfd\x0a\xd4\xa6\xb4\x59\x74\xe9\xcb\x7c\xf3\x5f\x76\x3b\xfc\x7b\x09\xcf\x53\x17\x3d\x9a\x57\xa2\xcc\xb0\xb0\x0c\x2b\xfe\xe7\x8c\xe0\xfc\x10\x43\x0c\xfe\x8a\x0d\x01\x5d\xdf\x8f\x6f\x43\x6c\x83\x43\xd3\x28\x09\x5d\x5a\xe8\x26\xcf\xb7\x04\xdc\xdf\x11\xb0\x2f\x0d\xab\x07\x8d\x47\x3e\x63\xf3\x3d\x9d\xc0\xf0\x9e\x0d\xeb\x8c\xeb\x2f\xe8\x15\x9b\xf9\xa1\xd4\x90\x9c\xb3\x65\x64\xa2\xce\x84\xe4\x99\x5d\x19\x55\x08\x73\xfe\x8d\xd9\x22\xb8\x64\xd9\xd3\x4f\xbe\x8b\xde\xb5\x5d\x84\x55\x05\xd7\x56\x14\x15\x8e\xca\x1e\x96\x23\x9e\x4a\xcd\x3f\xc4\x3a\x7f\xf1\x7f\xfc\x5f\xb8\xd3\x78\xf1\xb0\x7c\xb2\xb7\x69\x4a\xd2\x5b\x46\x4a\x4b\x3e\xad\x32\x6a\x3f\xa5\x05\x37\xdb\x58\x67\xb7\xb6\x7e\x3c\xb0\xe1\xb5\x02\x55\x2f\xe4\x94\x68\xdd\x85\x1c\xdf\x07\x22\x69\xca\xea\xae\x8b\x94\x3e\x02\x00\x00\xff\xff\x4a\x18\x1c\x02\xb5\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x59, 0xa6, 0x85, 0xda, 0xa7, 0x58, 0xcb, 0x88, 0x26, 0xe9, 0x44, 0x2, 0xc8, 0xd9, 0x8, 0x4f, 0x1, 0x4a, 0x43, 0x15, 0xe2, 0x26, 0xa, 0xda, 0x79, 0x1d, 0x3d, 0x69, 0x65, 0x50, 0xff}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xcf\x8e\x9b\x30\x10\xc6\xef\x7e\x8a\xd1\x5e\x20\x2a\xfb\x04\x9c\x28\xcc\x76\x51\xc1\x20\x03\xda\xa6\x17\xcb\x8d\x47\x0d\x12\x7f\x22\x30\x6d\xf7\xed\x2b\x20\xdb\x85\x24\xa4\x55\x8f\x9e\x31\xbf\xcf\xf3\x7d\xcc\xe3\x23\x7c\xa8\xcb\xef\x9d\x32\x04\xc5\x89\x31\x5f\xa0\x97\x23\xe4\xfb\x14\x41\x0d\xe6\x28\x6b\x32\xc7\x56\x4b\xf3\x7a\x22\xf0\x32\x40\x5e\xc4\x60\x5b\xbd\xa1\xaa\x52\x9d\x54\x5a\x77\xd4\xf7\x96\x03\xd6\xe9\xd8\x36\x24\x9b\xa1\xfe\x46\xdd\x78\xa6\x5a\x95\x95\xb5\x73\xdf\x99\xde\xc7\x68\x05\xed\xc1\x66\x00\xea\x70\x68\x87\xc6\xc8\x52\x43\x51\x84\x01\xf0\x24\x07\x5e\x44\x91\xc3\x00\x4a\x4d\x8d\x29\xcd\xeb\x46\xf3\xb2\xc6\x00\x9e\x12\x81\xe1\x27\x0e\x9f\x71\x0f\xf6\x3b\x7a\x07\x02\x9f\x50\x20\xf7\x31\x7b\x53\xec\xc1\x1e\x1b\x09\x87\x00\x23\xcc\x11\x7c\x2f\xf3\xbd\x00\x9d\x6d\x8c\xb3\x7c\xd1\x8a\x79\xae\x97\xd4\x5f\xde\xdf\x50\x48\x45\x18\x7b\x62\x7f\x57\x61\xfa\x7c\x1a\xeb\xd0\x91\x32\xa4\xa5\x32\x90\x87\x31\x66\xb9\x17\xa7\xf0\x12\xe6\xcf\xd3\x11\xbe\x26\x1c\x57\xde\x68\xaa\xe8\x2f\xf7\x27\xee\xc3\x98\xeb\xc3\x75\xd2\x4b\xd6\x0f\x55\x0d\x04\x86\x7e\x99\x3f\x65\xb6\x88\x35\xe4\x01\x7e\x59\xc5\x2a\xcf\xe3\x94\x7a\x1c\xfd\xb6\x33\x3b\x78\x79\x46\x81\xcb\x87\x86\xd9\xc4\x76\xff\x05\x2c\xdf\x5c\x9a\x35\xd6\x3f\xd5\x66\x5e\xff\x23\x39\xda\x21\x67\x0b\xae\x84\x66\xf7\x9c\xd9\xa1\x7b\x78\xb6\x5c\xb3\xa0\xfd\xd9\x30\x16\x88\x24\xbd\xb1\x12\xee\xb9\x71\x6b\xff\x5c\xf6\x3b\x00\x00\xff\xff\x61\x23\x06\x1c\xae\x03\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x8e, 0x78, 0x29, 0x6d, 0x77, 0xc5, 0x6d, 0x2f, 0x86, 0x3d, 0xf6, 0xc6, 0x74, 0x51, 0x57, 0x90, 0x75, 0x9e, 0x2d, 0x7f, 0x6, 0x4d, 0x90, 0xb7, 0xb0, 0x7e, 0x43, 0xaa, 0xde, 0xaa, 0xf2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
