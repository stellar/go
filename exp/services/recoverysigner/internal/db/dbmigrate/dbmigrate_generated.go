// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (318B)
// migrations/20200311000001-create-identities.sql (393B)
// migrations/20200311000002-create-auth-methods.sql (783B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xc1\x4a\xc4\x40\x0c\x06\xe0\x7b\x9e\xe2\x3f\xb6\xe8\x3e\x41\x4f\xb3\x36\xb8\xc1\x76\x3a\x4e\x33\xec\xae\x17\x19\x3a\x83\x14\x74\x57\xda\x8a\xaf\x2f\x14\x59\x8a\x17\x8f\x09\xe1\x4b\xf2\xef\x76\xb8\xfb\x18\xdf\xa6\xb8\x64\x84\x4f\xa2\x07\xcf\x46\x19\x6a\xf6\x0d\x23\x0e\xc3\xf5\xeb\xb2\xcc\x28\x08\x18\x13\xf6\xf2\xd8\xb3\x17\xd3\xc0\x76\x0a\x1b\x9a\xe6\x9e\x08\x70\x5e\x5a\xe3\xcf\x78\xe2\x33\x8a\x31\x95\x6b\x73\x98\x72\x5c\x72\x7a\x8d\x0b\x54\x5a\xee\xd5\xb4\x0e\x47\xd1\xc3\x5a\xe2\xa5\xb3\xbc\x51\x80\x94\xdf\xf3\x3f\xf3\xab\x1b\x53\x9a\xf2\x3c\x43\xf9\xa4\x37\x80\xca\xea\x76\x7a\xb0\xf2\x1c\x18\x62\x6b\x3e\xa1\xb3\x9b\x27\x82\x73\xec\x8b\x5f\xa0\x2c\x71\x3c\xb0\xe7\xed\x62\xe9\x57\xad\x22\xda\xc6\x52\x5f\xbf\x2f\x44\xb5\xef\xdc\x9f\x58\x2a\xfa\x09\x00\x00\xff\xff\x2d\x10\x05\x49\x3e\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0x1c, 0xea, 0x58, 0xda, 0x1a, 0xc6, 0x97, 0xac, 0xf8, 0x69, 0xac, 0xe9, 0x9b, 0x3b, 0x49, 0x42, 0x83, 0x96, 0x25, 0xb6, 0x7b, 0xda, 0xbc, 0x9c, 0xc9, 0xf6, 0xbd, 0x60, 0xa2, 0x6c, 0x2b}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6e\xc2\x30\x10\x45\xf7\x73\x8a\xbf\x4c\xd4\x72\x82\xac\x02\x19\xc0\x6a\x62\x47\x13\x23\xa0\x1b\x14\xc5\x56\x65\x89\x26\x55\x70\xd5\xeb\x57\x0d\x6a\x09\xea\x82\xa5\xbf\xed\x37\xf3\xdf\x62\x81\xa7\xf7\xf0\x36\xb6\xd1\x63\xf7\x41\xb4\x12\xce\x2d\xc3\xe6\xcb\x92\x11\x9c\xef\x63\x88\xc1\x5f\x90\x10\xd0\x76\xdd\xf0\xd9\xc7\x53\x70\x58\xaa\x8d\xd2\x16\xda\x58\xe8\x5d\x59\x3e\x13\x70\x4d\x1b\x16\x95\x97\xb3\x0b\x02\xd6\x46\x58\x6d\x34\x5e\xf8\x88\xe4\x06\x49\x21\xbc\x66\x61\xbd\xe2\xe6\x97\x7d\x41\x12\x5c\xfa\x83\xab\x45\x55\xb9\x1c\xaf\x9f\xa6\x8c\x80\x6e\xf4\x6d\xf4\xee\xd4\x46\x58\x55\x71\x63\xf3\xaa\xc6\x5e\xd9\xed\x74\xc4\xab\xd1\x7c\xb7\x93\xf3\x67\xff\xe0\xfd\xc4\x1d\x87\xb3\x87\xe5\xc3\xad\x11\xa5\xd9\x9f\x0c\xa5\x0b\x3e\xc0\xe8\x3b\x1f\xf3\x1e\xfb\x2d\x0b\xcf\x87\xa9\x66\x82\x64\x44\x73\xbf\xc5\xf0\xd5\x13\x15\x62\xea\x7f\x7e\x33\xfa\x0e\x00\x00\xff\xff\xe3\xf7\xa5\x5e\x89\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0x72, 0xf0, 0xdf, 0xf6, 0xed, 0x64, 0x3e, 0xad, 0x41, 0x5a, 0xd9, 0x50, 0x5f, 0x1e, 0xc4, 0xd6, 0x40, 0xa4, 0xb7, 0x2f, 0x40, 0x26, 0xc8, 0x58, 0xaa, 0xc, 0x71, 0x3c, 0xce, 0x48, 0x94}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xdf\x6e\xb2\x40\x10\xc5\xef\xf7\x29\x26\xde\x28\xf9\xf4\x09\xb8\x42\x1d\x75\xf3\xc1\x42\x16\x8c\xb5\x37\x64\xeb\x4e\x2a\x09\x7f\x0c\x2c\x6d\x7d\xfb\x06\xd4\x0a\xd6\xd6\xa4\x97\x9c\xe1\xfc\x66\x67\xce\x4c\x26\xf0\x2f\x4b\x5e\x4b\x65\x08\xd6\x07\xc6\x66\x12\x9d\x08\x21\xda\x06\x08\xaa\x36\xfb\x38\x23\xb3\x2f\x74\x6c\x8e\x07\x02\x27\x04\x14\x6b\x0f\x46\x0c\x60\x58\x19\x4a\x53\x55\xc6\x4a\xeb\x92\xaa\x6a\x38\x6e\xc4\xc3\xbe\xc8\x29\xce\xeb\xec\x85\xca\x93\x42\x99\x4a\xd2\x21\xb3\xec\x2b\xdb\x99\xba\x3d\x78\xd5\x02\xd5\x6e\x57\xd4\xb9\x89\x13\x0d\x53\xbe\xe4\x22\x02\xe1\x47\x20\xd6\xae\xdb\x70\x12\x4d\xb9\x49\xcc\xf1\xc7\x72\xa3\x86\x28\xb9\xe3\x76\x0a\x0c\x60\xe1\x4b\xe4\x4b\x01\xff\x71\x0b\xa3\x6b\x0f\x0b\x24\x2e\x50\xa2\x98\x61\x78\x69\x5d\xc1\x28\xd1\xd6\xf8\xd6\xd4\x69\xdd\x73\x9d\xf5\x84\xae\xbe\x40\x72\xcf\x91\xdb\x8b\xcf\x6a\x5f\xb0\x2b\x49\x19\xd2\xb1\x32\x10\x71\x0f\xc3\xc8\xf1\x02\xd8\xf0\x68\xd5\x7e\xc2\xb3\x2f\xb0\x37\x8b\xa6\x94\x1e\xfc\xdf\x72\x07\x4d\x26\x83\xef\x29\x75\x59\x6f\x2a\xad\x09\x0c\x7d\x98\x2f\xb9\x1b\x05\x17\x73\x7c\x02\x5f\xdc\xa4\xd1\x5d\xd3\x66\x85\x12\xbb\x6f\xe2\x61\x8b\xb1\x1f\x30\x7a\x5b\xfb\x2b\xe4\x34\xe2\xf8\x34\xc6\x6f\x18\xd6\xbd\xe3\x79\xf1\x9e\x33\x36\x97\x7e\x70\xe7\xd6\xec\x73\xe1\xde\x81\xdb\xec\x33\x00\x00\xff\xff\x05\x89\xb9\x81\x0f\x03\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0xc4, 0x27, 0x10, 0x9e, 0x6, 0x40, 0xce, 0xf6, 0x38, 0xd9, 0x4b, 0xaa, 0xb8, 0x4c, 0xf0, 0xd5, 0xc7, 0x5b, 0x1b, 0xa6, 0x90, 0xc9, 0xc4, 0xf3, 0xfa, 0x88, 0x8b, 0xe2, 0x2e, 0x8e, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
