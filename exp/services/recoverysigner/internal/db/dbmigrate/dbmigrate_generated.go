// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (290B)
// migrations/20200311000001-create-identities.sql (357B)
// migrations/20200311000002-create-auth-methods.sql (614B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\xc4\x30\x14\x45\xf7\xef\x2b\xee\x72\x8a\x33\x5f\xd0\x55\x34\x0f\x0c\xb6\x69\xcc\x24\x38\x5d\x95\xd0\x04\x29\x68\x2b\x6d\xc4\xdf\x17\x45\x43\xe9\xfa\x9d\xfb\xee\xb9\x97\x0b\xee\xde\xa7\xd7\x35\xe4\x04\xff\x41\xf4\x60\x59\x38\x86\x13\xf7\x0d\x23\x8c\xe3\xf2\x39\xe7\x0d\x27\x02\xa6\x08\xef\x95\x84\xee\x1c\xb4\x6f\x1a\x18\xab\x5a\x61\x7b\x3c\x71\x7f\x26\x60\x5c\x53\xc8\x29\x0e\x21\xc3\xa9\x96\xaf\x4e\xb4\xa6\xc0\x3f\x40\x4c\x6f\xe9\x08\x9c\x89\x80\x10\xe3\x9a\xb6\x0d\x8e\x6f\xae\x24\xa8\xaa\x8b\x8d\xd7\xea\xd9\x33\x94\x96\x7c\x2b\x52\xc3\x7f\xac\xd3\x3b\x51\x6f\x0c\xdb\xd3\xdf\xa9\xaa\xf0\xf2\xc8\x96\xf7\xd5\xea\xfa\xfb\xbe\x26\xda\x4f\x97\xcb\xd7\x4c\x24\x6d\x67\x0e\xd3\x6b\xfa\x0e\x00\x00\xff\xff\x24\xe0\xc5\x7e\x22\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0xa8, 0x9f, 0xa0, 0xf2, 0xb8, 0x19, 0x77, 0x34, 0x92, 0x88, 0x57, 0xdc, 0x3, 0x2, 0x48, 0x54, 0x78, 0xf2, 0x8a, 0xf1, 0x48, 0x32, 0xf5, 0x82, 0x11, 0x55, 0x30, 0xce, 0x10, 0x94, 0x1a}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6e\x83\x30\x10\x44\xef\xfb\x15\x73\x0c\x6a\xf2\x05\x9c\x5c\xbc\x55\xad\x82\x41\xc6\xa8\xc9\x09\x21\xbc\xaa\x2c\xa5\x50\x11\x57\xfd\xfd\x2a\x95\x4a\x69\x72\xf6\xf3\xcc\xbe\x39\x1c\xf0\xf0\x1e\xdf\x96\x21\x09\xba\x0f\xa2\xc2\xb1\xf2\x0c\xaf\x1e\x4b\x46\x0c\x32\xa5\x98\xa2\x5c\xb0\x23\x20\x06\x74\x9d\xd1\xb0\xb5\x87\xed\xca\x12\x8d\x33\x95\x72\x27\xbc\xf0\x69\x4f\xc0\xb8\xc8\x90\x24\xf4\x43\x82\x37\x15\xb7\x5e\x55\xcd\x0a\x5f\x81\x20\x67\xb9\x05\xf6\x44\xc0\x30\x8e\xf3\xe7\x94\xfa\xbb\x06\xc7\x4f\xec\xd8\x16\xdc\xfe\x32\x97\x5d\x0c\x19\x6a\x0b\xcd\x25\x7b\x46\xa1\xda\x42\x69\xbe\xc6\x2f\xf3\x59\xe0\xf9\xe8\xd7\xff\x94\xe5\xab\x92\xb1\x9a\x8f\x1b\xa5\x7e\x53\x5a\xdb\x7f\xae\x7f\x2f\x19\x5e\x9f\xd9\xf1\xf6\x72\xd3\xfe\x44\xe7\x44\xdb\xed\xf4\xfc\x35\x11\x69\x57\x37\x77\xdb\xe5\xf4\x1d\x00\x00\xff\xff\x57\x8e\xe4\x4a\x65\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0x3e, 0x35, 0xab, 0x8d, 0xff, 0x44, 0xf2, 0x2e, 0x21, 0xec, 0xbb, 0xcd, 0x4e, 0x9d, 0xc6, 0x42, 0x45, 0xbf, 0xaf, 0x33, 0x5c, 0x3e, 0x2f, 0x9d, 0xa9, 0x41, 0xe8, 0xc2, 0xb9, 0x1e, 0x94}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcf\x6e\xb3\x30\x10\xc4\xef\x7e\x8a\x55\x2e\x24\xfa\xc8\x13\x70\xf2\x07\x5b\x15\x15\x0c\x32\xa0\x36\x27\xcb\xad\x57\x8d\x25\x20\x11\x38\x6d\xf3\xf6\x15\x49\x9b\x3a\x7f\x94\x23\xec\xe8\x37\x33\xeb\x5d\x2e\xe1\x5f\x67\xdf\x07\xed\x08\x9a\x2d\x63\xb1\x44\x5e\x23\xd4\xab\x12\x41\xef\xdc\x5a\x75\xe4\xd6\x1b\xa3\xdc\x7e\x4b\xc0\x2b\x40\xd1\xe4\x30\x0f\x46\x47\x6d\xab\x07\xa5\x8d\x19\x68\x1c\x83\x10\x82\xed\x7a\xd3\x93\xea\x77\xdd\x2b\x0d\xd3\x37\x75\xda\xb6\xc1\x22\xfa\x63\xf2\xff\xd9\x19\x74\x84\x39\x03\xb0\x06\x9a\x26\x4d\x40\x14\x35\x88\x26\xcb\xa0\x94\x69\xce\xe5\x0a\x9e\x70\x15\x32\x80\xb7\x81\xb4\x23\xa3\xb4\x83\x3a\xcd\xb1\xaa\x79\x5e\x9e\xc4\x93\xc0\x50\x4b\x97\x82\x90\x1d\xc8\xd4\x3b\xeb\xf6\xea\xca\x42\xe2\x03\x4a\x14\x31\x56\xbf\x22\x4b\xe3\xdc\x9a\x05\x14\x02\x12\xcc\xb0\x46\x88\x79\x15\xf3\x04\x27\x87\xd9\xd4\x7e\x76\xbd\x0f\x3f\xc5\x87\x6e\x77\x04\x8e\xbe\xdc\xe9\x37\xf3\xca\xa7\x22\xc1\x97\xb3\xf2\xca\x8f\x57\x88\x8b\xc5\x78\xc3\x05\x3c\x3f\xa2\x44\xbf\x67\x5a\x1d\x0c\xa2\x3b\xf4\x29\xa0\x3a\x86\xba\x82\x1f\xfb\x84\xc7\xcc\xf7\xf0\xcc\x3f\x8f\x64\xf3\xd9\x33\x96\xc8\xa2\xbc\xf1\x94\xd1\xcf\xe0\xd6\xdd\x44\xec\x3b\x00\x00\xff\xff\xde\xe5\xfd\xf0\x66\x02\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5e, 0x87, 0xaa, 0x53, 0x50, 0xb, 0xd8, 0x72, 0x79, 0x7f, 0x62, 0x20, 0x4, 0x9e, 0xff, 0xb6, 0xb7, 0xc8, 0x16, 0xab, 0xc2, 0xd9, 0xd9, 0x4e, 0xa8, 0xec, 0xfd, 0xb1, 0x24, 0xad, 0x69, 0xf4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
