// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (254B)
// migrations/20200311000001-create-identities.sql (347B)
// migrations/20200311000002-create-auth-methods.sql (705B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\xc4\x30\x10\x86\xef\xf3\x14\xff\xb1\x45\xf7\x09\xf6\x94\xb5\x83\x06\xd3\x24\x66\x27\xb8\xeb\x45\x42\x13\xa4\x07\x77\xa5\x8d\xf8\xfa\x62\x91\x52\x3d\xce\x0c\xf3\xf1\x7d\xbb\x1d\x6e\xde\xc7\xb7\x29\xd5\x82\xf8\x41\x74\x17\x58\x09\x43\xd4\xc1\x30\xd2\x30\x5c\x3f\x2f\x75\x46\x43\xc0\x98\x71\xd0\xf7\x47\x0e\x5a\x19\x58\x27\xb0\xd1\x98\x5b\x22\xc0\x07\xdd\xab\x70\xc6\x23\x9f\xd1\x8c\xb9\x5d\x96\xc3\x54\x52\x2d\xf9\x35\x55\x88\xee\xf9\x28\xaa\xf7\x78\xd6\xf2\xb0\x8c\x78\x71\x96\xff\x52\x52\xce\x53\x99\x67\x08\x9f\x64\xbd\x50\xbb\x5f\x9d\xa2\xd5\x4f\x91\xa1\x6d\xc7\x27\x38\xbb\xb1\x8b\xde\x73\x68\x7e\x01\xed\xcf\xcb\x36\xab\xbb\x7e\x5d\x88\xba\xe0\xfc\xbf\xac\x3d\x7d\x07\x00\x00\xff\xff\x46\x9a\xaa\x2a\xfe\x00\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x48, 0x1f, 0x4e, 0x1b, 0xa5, 0xcb, 0xe7, 0x20, 0x84, 0x33, 0xa3, 0x6a, 0xda, 0x44, 0xe4, 0xb4, 0x89, 0x55, 0xdf, 0x15, 0xd3, 0x78, 0x2f, 0x79, 0x53, 0x81, 0x81, 0x41, 0x4a, 0x94, 0xb9}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x6a\xc3\x30\x10\x85\xf7\x73\x8a\xb7\xb4\x69\x73\x02\xaf\x14\x6b\x92\x8a\xca\x92\x91\x15\x9a\x74\x13\x8c\x2d\x8a\xa0\xb5\x8b\xa3\xd2\xeb\x17\x27\xb4\x76\xc9\x72\xe6\xc1\xf7\x7e\x36\x1b\x3c\x7c\xc4\xb7\xa9\x4d\x01\x87\x4f\xa2\xd2\xb1\xf0\x0c\x2f\xb6\x9a\x11\xfb\x30\xa4\x98\x62\xb8\x20\x23\xa0\xed\xba\xf1\x6b\x48\xe7\xd8\x63\xab\xf6\xca\x78\x18\xeb\x61\x0e\x5a\x3f\x12\x70\xfb\x36\xec\x94\xd0\x2b\x81\x80\x9d\x75\xac\xf6\x06\xcf\x7c\x42\xb6\x40\x72\x38\xde\xb1\x63\x53\x72\xf3\xcb\xbe\x20\x9b\x05\x6b\x20\x59\xb3\x67\x94\xa2\x29\x85\xe4\xd9\xa0\x76\xaa\x12\xee\x74\xc3\xc4\x3e\xbf\xb2\xbb\x29\xb4\x29\xf4\xe7\x36\xc1\xab\x8a\x1b\x2f\xaa\x1a\x2f\xca\x3f\x5d\x4f\xbc\x5a\xc3\xff\xc3\x4c\xe3\x7b\x80\xe7\xe3\x12\x9e\xf2\xe2\xaf\xb7\x32\x92\x8f\xb3\xfd\xba\xfa\x2a\x72\x41\xb4\x5e\x4c\x8e\xdf\x03\x91\x74\xb6\xbe\x5b\xac\xa0\x9f\x00\x00\x00\xff\xff\x2c\xa1\x5b\x9e\x5b\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x45, 0x9f, 0xfb, 0xb1, 0xe1, 0xe3, 0xc5, 0xf4, 0x12, 0xdf, 0x99, 0xb3, 0x50, 0x62, 0xee, 0x11, 0x35, 0xad, 0x76, 0x6b, 0x42, 0x1a, 0x3d, 0xf7, 0x65, 0xce, 0xe0, 0x39, 0x87, 0x27, 0x49}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xdd\x6e\xba\x40\x10\xc5\xef\xf7\x29\x26\xde\xa8\xf9\xeb\x13\x70\xb5\xc2\xe8\x7f\x53\x58\xc8\xb2\xa6\xb5\x37\x64\x2b\x93\x4a\xc2\x87\x81\xa5\xad\x6f\xdf\xe0\x47\x85\xd6\xd6\x4b\xce\xd9\xfc\xe6\x30\x67\xe6\x73\xf8\x57\x64\xaf\xb5\xb1\x04\xeb\x3d\x63\xae\x42\xae\x11\xf4\x26\x42\x30\xad\xdd\x25\x05\xd9\x5d\x95\x26\xf6\xb0\x27\xe0\x31\xa0\x5c\x07\x30\x61\x00\xe3\xc6\x52\x9e\x9b\x3a\x31\x69\x5a\x53\xd3\x8c\x67\x9d\xb8\xdf\x55\x25\x25\x65\x5b\xbc\x50\x7d\x52\xa8\x30\x59\x3e\x66\x53\xe7\xca\xe6\x0b\x7f\x00\x6f\x8e\x40\xb3\xdd\x56\x6d\x69\x93\x2c\x85\x85\x58\x09\xa9\x41\x86\x1a\xe4\xda\xf7\x3b\x4e\x96\x52\x69\x33\x7b\xf8\xd5\xee\xd4\x18\x95\xe0\x7e\xcf\x60\x00\xcb\x50\xa1\x58\x49\x78\xc0\x0d\x4c\xae\x33\xa6\xa0\x70\x89\x0a\xa5\x8b\xf1\x65\x74\x03\x93\xce\x08\x25\x78\xe8\xa3\x46\x70\x79\xec\x72\x0f\x67\xdf\x31\xbd\x30\x03\xce\x59\xcf\xe8\x2f\x52\xa4\x44\xc0\xd5\xe6\x42\x9a\x1e\x53\x6e\x6b\x32\x96\xd2\xc4\x58\xd0\x22\xc0\x58\xf3\x20\x82\x47\xa1\xff\x1f\x3f\xe1\x39\x94\x38\xfc\xad\x51\x57\xc8\xe8\x67\x45\xfd\xa5\xbc\x99\xbc\x25\xb0\xf4\x61\xbf\xe4\x7e\x0f\x42\x7a\xf8\xd4\x65\x1c\x56\xd1\xdb\x91\x73\xe7\x69\x7f\x0f\xf7\xde\x9e\x02\xcf\x4e\xa1\xba\x14\xfd\xcb\xf3\xaa\xf7\x92\x31\x4f\x85\xd1\x8d\xeb\x70\xce\xc6\xad\x93\x74\xd8\x67\x00\x00\x00\xff\xff\xfb\xe3\xa5\xc8\xc1\x02\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x2b, 0xf1, 0x35, 0x7a, 0x4e, 0x40, 0xfb, 0x2a, 0xb2, 0xd2, 0xf0, 0xcc, 0xcc, 0x88, 0x49, 0x7d, 0x27, 0x53, 0x62, 0x96, 0x63, 0x90, 0x73, 0xb4, 0xf, 0x55, 0x42, 0xa0, 0xdc, 0x39, 0x52}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
