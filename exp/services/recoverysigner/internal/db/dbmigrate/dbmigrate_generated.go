// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (330B)
// migrations/20200311000001-create-identities.sql (438B)
// migrations/20200311000002-create-auth-methods.sql (853B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcf\x4a\xc4\x30\x10\xc6\xef\xf3\x14\xdf\xb1\x45\xf7\x09\x7a\xaa\x76\x60\x83\x6d\x1a\xb3\x13\x76\xd7\xcb\x12\x9a\x20\x05\xdd\x95\x36\xe2\xeb\x0b\x41\x4b\xf0\xe2\x71\xfe\xfd\xf8\xcd\xb7\xdb\xe1\xee\x7d\x7e\x5d\x7c\x8a\x70\x1f\x44\x8f\x96\x5b\x61\x48\xfb\xd0\x33\xfc\x34\xdd\x3e\xaf\x69\x45\x45\xc0\x1c\xe0\x9c\xea\xa0\x47\x81\x76\x7d\x7f\x4f\x04\x18\xab\x86\xd6\x9e\xf1\xc4\x67\x54\x73\xa8\x73\x73\x5a\xa2\x4f\x31\x5c\x7c\x82\xa8\x81\x0f\xd2\x0e\x06\x47\x25\xfb\x5c\xe2\x65\xd4\x5c\x50\x80\x10\xdf\xe2\x3f\xfb\x99\xeb\x43\x58\xe2\xba\x42\xf8\x24\x1b\x80\xea\x66\xb3\x76\x5a\x3d\x3b\x86\xd2\x1d\x9f\x36\xf9\xcb\xef\xd9\xa8\x8b\x87\x9c\x31\x6c\xab\x9f\x51\x5d\xe3\xb8\x67\xcb\xa5\x89\x3a\x64\x7c\x43\x54\x46\xd4\xdd\xbe\xae\x44\x9d\x1d\xcd\x9f\x88\x1a\xfa\x0e\x00\x00\xff\xff\x04\xf6\xc5\x09\x4a\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x7, 0xa2, 0xde, 0x70, 0xce, 0x6e, 0x1, 0x87, 0x3d, 0x63, 0xbc, 0xee, 0xac, 0x96, 0x3e, 0x2a, 0xe7, 0xd1, 0x21, 0x30, 0xfc, 0x22, 0xb2, 0xa3, 0x72, 0x1b, 0xcc, 0x23, 0x40, 0x91, 0x73}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x6e\xab\x30\x14\x85\xe7\x77\x15\x67\x08\x7a\xc9\x0a\x18\xf9\xe1\x9b\xc6\x2a\xd8\xc8\x18\x25\xe9\x04\x21\xb0\x2a\x4b\x29\x54\xc4\x55\xb7\x5f\x05\xa9\x29\x69\x06\x1d\xfa\xe7\x7e\x3e\xfe\xce\x76\x8b\x7f\x6f\xe1\x75\xee\xa2\x47\xf3\x4e\x94\x5b\x16\x8e\xe1\xc4\xff\x82\x11\x06\x3f\xc6\x10\x83\xbf\x20\x21\xa0\xeb\xfb\xe9\x63\x8c\x6d\x18\xd0\x34\x4a\x42\x1b\x07\xdd\x14\xc5\x86\x80\xc7\x3d\x02\x76\xc6\xb2\x7a\xd2\x78\xe6\x13\x92\x9f\xe9\x14\x96\x77\x6c\x59\xe7\x5c\x7f\x43\x2f\x48\xae\x07\x46\x43\x72\xc1\x8e\x91\x8b\x3a\x17\x92\xaf\xec\xca\xaa\x52\xd8\xd3\x6f\xcc\x06\x61\x48\x97\x77\xfa\xd9\x77\xd1\x0f\x6d\x17\xe1\x54\xc9\xb5\x13\x65\x85\x83\x72\xfb\x65\x89\x17\xa3\xf9\x2e\xec\xe0\xcf\xfe\x8f\xfb\x0b\x77\x9e\xce\x1e\x8e\x8f\xee\x36\x4d\x69\x76\x73\xa4\xb4\xe4\xe3\xca\x51\xbb\xf2\x63\xf4\x9d\xbc\xf5\xdf\x0f\x7b\xb6\xbc\x8e\xa0\xea\x05\x9d\x11\xad\xcb\x90\xd3\xe7\x48\x24\xad\xa9\x1e\xca\xc8\xe8\x2b\x00\x00\xff\xff\x29\x12\xed\x6f\xb6\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xb4, 0xed, 0xb3, 0x3c, 0x19, 0x9d, 0x80, 0x5, 0x2a, 0x5c, 0x7c, 0x3b, 0x49, 0xba, 0xc6, 0xaf, 0xe3, 0x47, 0xb4, 0xd, 0x75, 0x48, 0x65, 0x60, 0xd9, 0x3e, 0xad, 0x48, 0xd6, 0xf7, 0x82}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcf\x8e\x9b\x30\x10\xc6\xef\x7e\x8a\xd1\x5e\x60\x55\xf6\x09\x38\x51\x98\xed\xa2\x82\x41\x06\xb4\x4d\x2f\x96\x1b\x8f\x1a\x4b\xfc\x89\xc0\xb4\xdd\xb7\xaf\x20\xd9\x2e\x24\x21\x3d\x7a\xc6\xfc\xbe\xf9\xe6\xc3\x4f\x4f\xf0\xa9\x31\x3f\x7b\x65\x09\xaa\x23\x63\xa1\xc0\xa0\x44\x28\x77\x39\x82\x1a\xed\x41\x36\x64\x0f\x9d\x96\xf6\xed\x48\x10\x14\x80\xbc\x4a\xc1\x75\x06\x4b\x75\xad\x7a\xa9\xb4\xee\x69\x18\x1c\x0f\x9c\xe3\xa1\x6b\x49\xb6\x63\xf3\x83\xfa\xe9\x4c\x8d\x32\xb5\xf3\xe8\x7f\x30\x83\xcf\xc9\x0a\x3a\x80\xcb\x00\xd4\x7e\xdf\x8d\xad\x95\x46\x43\x55\xc5\x11\xf0\xac\x04\x5e\x25\x89\xc7\x00\x8c\xa6\xd6\x1a\xfb\xb6\xd1\xbc\xac\x31\x80\xe7\x4c\x60\xfc\x85\xc3\x57\xdc\x81\xfb\x81\x7e\x04\x81\xcf\x28\x90\x87\x58\xbc\x2b\x0e\xe0\x4e\x8d\x8c\x43\x84\x09\x96\x08\x61\x50\x84\x41\x84\xde\x36\xc6\x5b\x4e\xb4\x62\x9e\xeb\x86\x86\xcb\xfb\x1b\x0a\xb9\x88\xd3\x40\xec\xee\x2a\xcc\x9f\xcf\xb6\xf6\x3d\x29\x4b\x5a\x2a\x0b\x65\x9c\x62\x51\x06\x69\x0e\xaf\x71\xf9\x32\x1f\xe1\x7b\xc6\x71\xb5\x1b\x4d\x35\xfd\xe7\xfe\xcc\x7d\x98\x72\x7d\xb8\x4e\x7a\xc9\xfa\xa5\xea\x91\xc0\xd2\x1f\xfb\xaf\xcc\x16\xb1\xc6\x3c\xc2\x6f\xab\x58\xe5\xd9\x8e\xd1\xf2\xdd\x8c\xd1\xd3\x16\xd6\xd9\x6f\xae\xf5\xf5\x05\x05\x2e\x2d\xc4\xc5\xac\xea\xdf\x91\x9c\xa6\x96\xa7\x49\xaf\x84\x4e\x26\xbd\x93\x91\x7b\x78\xb6\x7c\x0d\x51\xf7\xbb\x65\x2c\x12\x59\x7e\xe3\xcf\xf5\xcf\x8d\x5b\xcf\xc4\x67\x7f\x03\x00\x00\xff\xff\x57\x5b\x70\x77\x55\x03\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x22, 0x40, 0x66, 0x22, 0x9e, 0x67, 0x16, 0xb7, 0x2d, 0xb, 0x8e, 0x17, 0x2d, 0x8e, 0xf9, 0xcb, 0x9d, 0xe8, 0x44, 0x17, 0x10, 0x33, 0x6e, 0x9a, 0xa2, 0xb3, 0xad, 0xdf, 0xef, 0x83, 0xea}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
