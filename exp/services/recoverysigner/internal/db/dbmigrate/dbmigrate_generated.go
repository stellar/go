// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20200309000000-initial-1.sql (162B)
// migrations/20200309000001-initial-2.sql (162B)
// migrations/20200311000000-create-accounts.sql (268B)
// migrations/20200311000001-create-identities.sql (361B)
// migrations/20200311000002-create-auth-methods.sql (719B)

package dbmigrate

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20200309000000Initial1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000000Initial1SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000000Initial1Sql,
		"migrations/20200309000000-initial-1.sql",
	)
}

func migrations20200309000000Initial1Sql() (*asset, error) {
	bytes, err := migrations20200309000000Initial1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000000-initial-1.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200309000001Initial2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xd1\x0d\xc2\x30\x0c\x04\xd0\xff\x4c\x71\xff\x28\x4c\xc1\x08\x30\x80\x01\xa7\xb5\xd4\xda\x91\x6d\xa8\xb2\x3d\x8a\xf8\x40\x7c\xde\xdd\xd3\xd5\x8a\xeb\x2a\x81\x5d\x16\xa7\x14\x53\x34\xd9\x18\x12\x10\x4d\xd6\xd9\xd0\xb6\x0d\xf0\xde\x73\x80\xf4\x39\x27\x42\x13\x8f\x44\x24\x79\x8a\x2e\xe8\x26\x9a\x68\xe6\xa5\x56\xd8\xcb\x7f\x77\x81\x3b\x37\x73\xc6\xc1\x18\x9c\x58\xe9\xcd\x20\xc4\x63\xe5\x9d\xce\x65\xfa\xd3\x17\x33\x6e\xfd\x3f\x5f\xec\xd0\x52\x3e\x01\x00\x00\xff\xff\xd3\x79\x21\xda\xa2\x00\x00\x00")

func migrations20200309000001Initial2SqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200309000001Initial2Sql,
		"migrations/20200309000001-initial-2.sql",
	)
}

func migrations20200309000001Initial2Sql() (*asset, error) {
	bytes, err := migrations20200309000001Initial2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200309000001-initial-2.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xd1, 0x21, 0xe9, 0x6d, 0xe0, 0xfe, 0xb4, 0x8b, 0x78, 0x2, 0xae, 0x5c, 0xd5, 0x8b, 0x41, 0xb8, 0x4b, 0xaa, 0x3a, 0xea, 0x69, 0xf, 0xf3, 0x2f, 0x6c, 0xae, 0x38, 0x46, 0xb, 0x2, 0xfc}}
	return a, nil
}

var _migrations20200311000000CreateAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4e\xc3\x30\x10\x44\xef\xfb\x15\x73\x4c\x04\xfd\x82\x9e\x5c\xb2\x80\x85\x63\x1b\x77\xad\xb6\x5c\x90\x15\x5b\x28\x07\x5a\x94\x18\xf1\xfb\x88\x82\xa2\x88\xe3\xae\x66\x46\xef\x6d\x36\xb8\x79\x1f\xdf\xa6\x54\x0b\xe2\x07\xd1\x5d\x60\x25\x0c\x51\x3b\xc3\x48\xc3\x70\xf9\x3c\xd7\x19\x0d\x01\x63\xc6\x4e\x3f\xec\x39\x68\x65\x60\x9d\xc0\x46\x63\x6e\x89\x00\x1f\x74\xaf\xc2\x09\x4f\x7c\x42\x33\xe6\xf6\xfa\x1c\xa6\x92\x6a\xc9\xaf\xa9\x42\x74\xcf\x7b\x51\xbd\xc7\x41\xcb\xe3\xf5\xc4\x8b\xb3\xbc\xac\xa0\xe3\x7b\x15\x8d\xc0\xba\x43\xf3\x5b\x4f\x39\x4f\x65\x9e\x21\x7c\x94\x25\x47\xed\x76\x21\x8c\x56\x3f\x47\x86\xb6\x1d\x1f\xe1\xec\x8a\x35\x7a\xcf\xa1\xf9\x1b\x68\x7f\x2a\x6b\xc9\xee\xf2\x75\x26\xea\x82\xf3\xff\x24\xb7\xf4\x1d\x00\x00\xff\xff\x9d\xec\x7a\x81\x0c\x01\x00\x00")

func migrations20200311000000CreateAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000000CreateAccountsSql,
		"migrations/20200311000000-create-accounts.sql",
	)
}

func migrations20200311000000CreateAccountsSql() (*asset, error) {
	bytes, err := migrations20200311000000CreateAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000000-create-accounts.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x55, 0xc5, 0xc0, 0x20, 0x15, 0xac, 0x44, 0x1b, 0xb6, 0x7e, 0xa4, 0xe8, 0xca, 0x2b, 0x48, 0x37, 0x63, 0xf2, 0x6b, 0xa9, 0x8d, 0x75, 0x6e, 0x61, 0x97, 0x88, 0x7d, 0xac, 0xd, 0xa5, 0x50}}
	return a, nil
}

var _migrations20200311000001CreateIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xd1\x6a\x83\x30\x18\x85\xef\xff\xa7\x38\x97\xca\xd6\x27\xf0\x2a\x35\xbf\x5d\x58\x8c\x12\x23\x6d\x77\x53\x44\xc3\x08\x6c\x3a\x6c\xc6\x5e\x7f\x58\x59\x2b\xec\x32\x39\xe4\xcb\x39\xdf\x6e\x87\xa7\xcf\xf0\x3e\x77\xd1\xa3\xfd\x22\xca\x2d\x0b\xc7\x70\x62\xaf\x19\x61\xf0\x63\x0c\x31\xf8\x2b\x12\x02\xba\xbe\x9f\xbe\xc7\x78\x09\x03\xf6\xea\xa0\x8c\x83\xa9\x1c\x4c\xab\xf5\x33\x01\xeb\x6d\xc3\x56\x09\xbd\x09\x08\x28\x2a\xcb\xea\x60\xf0\xca\x67\x24\x0f\x48\x0a\xcb\x05\x5b\x36\x39\x37\x7f\xec\x2b\x92\x25\xa8\x0c\x24\x6b\x76\x8c\x5c\x34\xb9\x90\xbc\x7c\x50\x5b\x55\x0a\x7b\x5e\x31\x61\x48\x6f\xec\x7e\xf6\x5d\xf4\xc3\xa5\x8b\x70\xaa\xe4\xc6\x89\xb2\xc6\x51\xb9\x97\xdb\x11\x6f\x95\xe1\x7b\x19\x48\x2e\x44\xab\x97\xda\xc7\x64\x7d\x3e\x4f\x1f\x1e\x8e\x4f\x8f\x29\x94\x66\x77\x0b\xca\x48\x3e\x2d\x65\xb6\x22\x36\x03\x32\xa2\xad\x3f\x39\xfd\x8c\x44\xd2\x56\xf5\x3f\x7f\x19\xfd\x06\x00\x00\xff\xff\x5e\xa4\x2e\x34\x69\x01\x00\x00")

func migrations20200311000001CreateIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000001CreateIdentitiesSql,
		"migrations/20200311000001-create-identities.sql",
	)
}

func migrations20200311000001CreateIdentitiesSql() (*asset, error) {
	bytes, err := migrations20200311000001CreateIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000001-create-identities.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0xb7, 0x4, 0xa6, 0x41, 0xd, 0x5f, 0xd0, 0x22, 0x4c, 0x13, 0x1, 0x35, 0xf9, 0x35, 0xa0, 0x18, 0x4, 0x87, 0xee, 0x89, 0x93, 0xdb, 0xd2, 0x41, 0x54, 0x2d, 0x80, 0x60, 0xa5, 0xe3, 0x8a}}
	return a, nil
}

var _migrations20200311000002CreateAuthMethodsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcd\x6e\xa3\x30\x14\x85\xf7\x7e\x8a\xab\x6c\x42\x34\xc9\x13\xb0\x72\xe0\x26\x63\x0d\x18\x64\x8c\x32\x99\x0d\xf2\x04\xab\x41\xe2\x27\x02\xd3\x36\x6f\x5f\x39\xe4\x87\xb4\x69\xb3\xe4\x5c\xf3\xf9\xf8\x9c\xbb\x58\xc0\xaf\xaa\x78\x69\x95\xd1\x90\x1e\x08\xf1\x04\x52\x89\x20\xb7\x31\x82\xea\xcd\x3e\xab\xb4\xd9\x37\x79\x66\x8e\x07\x0d\x34\x01\xe4\x69\x08\x0e\x01\x98\x76\x46\x97\xa5\x6a\x33\x95\xe7\xad\xee\xba\xe9\xdc\x8a\x87\x7d\x53\xeb\xac\xee\xab\xff\xba\x1d\x14\x5d\xa9\xa2\x9c\x92\x99\x7b\x63\xd3\x65\x70\x07\xef\x4e\x40\xb5\xdb\x35\x7d\x6d\xb2\x22\x87\x25\x5b\x33\x2e\x81\x47\x12\x78\x1a\x04\x96\x53\xe4\xba\x36\x85\x39\x7e\x3b\xb6\x6a\x82\x82\xd1\x60\x34\x20\x00\xab\x48\x20\x5b\x73\xf8\x83\x5b\x70\x6e\x77\xcc\x40\xe0\x0a\x05\x72\x0f\x93\xcb\xd5\x1d\x38\x76\x10\x71\xf0\x31\x40\x89\xe0\xd1\xc4\xa3\x3e\xce\x3f\x63\x46\x66\xee\x38\x67\xbd\xd0\x3f\x91\x62\xc1\x42\x2a\xb6\x17\xd2\xec\xe4\x72\xd7\x6a\x65\x74\x9e\x29\x03\x92\x85\x98\x48\x1a\xc6\xb0\x61\xf2\xf7\xe9\x13\xfe\x45\x1c\xaf\xcf\x02\x1f\x57\x34\x0d\x6c\x00\x1b\x67\xf8\x7d\x62\xeb\x99\x7c\x2d\x6c\x1c\xd1\xab\x2a\x7b\x0d\x46\xbf\x9b\xab\x3c\x6e\x85\x71\x1f\xff\x5a\xc7\xf7\xc5\x8c\x12\x73\x9f\x1c\x1d\xa7\xf2\xec\xec\x60\x78\x3e\x98\xb2\x2e\xc6\x7b\xe8\x37\x6f\x35\x21\xbe\x88\xe2\x07\xbb\xe2\x9e\x07\x8f\x16\xd4\x25\x1f\x01\x00\x00\xff\xff\x33\x9d\xcc\xa1\xcf\x02\x00\x00")

func migrations20200311000002CreateAuthMethodsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20200311000002CreateAuthMethodsSql,
		"migrations/20200311000002-create-auth-methods.sql",
	)
}

func migrations20200311000002CreateAuthMethodsSql() (*asset, error) {
	bytes, err := migrations20200311000002CreateAuthMethodsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20200311000002-create-auth-methods.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x82, 0x3c, 0xdd, 0xa3, 0xfd, 0xfe, 0xab, 0x1f, 0x34, 0x8c, 0xb, 0x60, 0x59, 0x51, 0x86, 0x13, 0xae, 0xa5, 0xb0, 0x98, 0x53, 0xd7, 0x41, 0x0, 0x86, 0x51, 0x8d, 0x40, 0x10, 0xed, 0xa0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20200309000000-initial-1.sql":           migrations20200309000000Initial1Sql,
	"migrations/20200309000001-initial-2.sql":           migrations20200309000001Initial2Sql,
	"migrations/20200311000000-create-accounts.sql":     migrations20200311000000CreateAccountsSql,
	"migrations/20200311000001-create-identities.sql":   migrations20200311000001CreateIdentitiesSql,
	"migrations/20200311000002-create-auth-methods.sql": migrations20200311000002CreateAuthMethodsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20200309000000-initial-1.sql":           &bintree{migrations20200309000000Initial1Sql, map[string]*bintree{}},
		"20200309000001-initial-2.sql":           &bintree{migrations20200309000001Initial2Sql, map[string]*bintree{}},
		"20200311000000-create-accounts.sql":     &bintree{migrations20200311000000CreateAccountsSql, map[string]*bintree{}},
		"20200311000001-create-identities.sql":   &bintree{migrations20200311000001CreateIdentitiesSql, map[string]*bintree{}},
		"20200311000002-create-auth-methods.sql": &bintree{migrations20200311000002CreateAuthMethodsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
