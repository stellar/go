// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 20200303000000-create-table-accounts.sql (291B)
// 20200303000002-create-table-identities.sql (697B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20200303000000CreateTableAccountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4e\x84\x30\x14\x45\xf7\xef\x2b\xee\x72\x88\x33\x5f\xc0\xaa\xca\x4b\x6c\x84\x82\x9d\x36\xce\xac\x48\x43\x1b\x43\xa2\x40\x4a\x89\xbf\x6f\x34\x4a\x80\xf5\x3b\xef\xde\x73\xe9\x72\xc1\xc3\x67\xff\x1e\x5d\x0a\xb0\x13\xd1\x93\x66\x61\x18\x46\x3c\x96\x0c\xd7\x75\xe3\x32\xa4\x19\x27\x02\x7a\x0f\xc3\x37\x03\x55\x1b\x28\x5b\x96\x68\xb4\xac\x84\xbe\xe3\x85\xef\x67\x02\xba\x18\x5c\x0a\xbe\x75\x09\x46\x56\x7c\x35\xa2\x6a\x56\xf8\x07\xf0\xe1\x23\x1c\x81\x33\x11\xe0\xbc\x8f\x61\x9e\xf7\xf1\x94\xe5\xab\x8d\x55\xf2\xd5\x32\xa4\x2a\xf8\xb6\x4a\xb5\xff\x6f\xb5\xda\x88\x2e\xd3\x14\xe2\xe9\xef\x94\x65\x78\x7b\x66\xcd\xdb\x6a\x79\xfd\x8d\xcf\x69\x37\xbd\x18\xbf\x06\xa2\x42\xd7\xcd\x61\x7a\x4e\xdf\x01\x00\x00\xff\xff\x0f\xc2\x1f\x74\x23\x01\x00\x00")

func _20200303000000CreateTableAccountsSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200303000000CreateTableAccountsSql,
		"20200303000000-create-table-accounts.sql",
	)
}

func _20200303000000CreateTableAccountsSql() (*asset, error) {
	bytes, err := _20200303000000CreateTableAccountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200303000000-create-table-accounts.sql", size: 291, mode: os.FileMode(0644), modTime: time.Unix(1583560459, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x21, 0x98, 0x13, 0x55, 0x7, 0xf, 0x6e, 0x22, 0xf, 0x8a, 0xd1, 0xa9, 0x7c, 0x1, 0xbc, 0xf9, 0x6f, 0x25, 0x97, 0x33, 0x24, 0xf9, 0x69, 0x14, 0x54, 0xea, 0x20, 0xb, 0xfa, 0x6b, 0x15}}
	return a, nil
}

var __20200303000002CreateTableIdentitiesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xd1\x6e\xb2\x40\x10\x85\xef\xf7\x29\x26\xde\xa0\xf9\xf1\x09\xb8\xe2\x87\x69\x4a\x0a\x0b\x59\xd6\x54\xaf\xc8\x56\x26\xba\x09\x82\x59\xd7\xb6\xbe\x7d\x83\x58\xbb\x68\xed\x25\x3b\x67\xce\x9c\xf9\x18\x36\x9f\xc3\xbf\x9d\xde\x18\x65\x09\x16\x7b\xc6\x22\x81\xa1\x44\x90\xab\x02\x41\xd7\xd4\x5a\x6d\x4f\x95\xe9\x1a\x82\xb0\x04\xe4\x8b\x0c\xa6\x9e\xa1\x8d\x3e\x58\xa3\x5a\xeb\xf9\xe0\x75\x76\x4b\xc6\x9b\x05\x0f\x7a\xed\x69\xef\xf6\xaa\xf5\xba\x3b\x0e\x8d\xfb\x6d\xd7\x52\xd5\x1e\x77\x6f\x64\xfa\x6f\xda\x29\xdd\x8c\x8c\xc2\xff\xe9\xd5\x49\xd3\x01\xa6\x0c\x40\xd7\x20\x71\x29\x81\xe7\x12\xf8\x22\x4d\xa1\x10\x49\x16\x8a\x15\xbc\xe0\xca\x67\x00\x6b\x43\xca\x52\x5d\x29\x0b\x32\xc9\xb0\x94\x61\x56\x5c\xc5\xbd\xa0\xa6\x86\x6e\x05\x3e\x63\x00\x97\x68\xd5\xdd\x04\x81\x4f\x28\x90\x47\x58\x7e\x6b\x0e\x53\x5d\xcf\x20\xe7\x10\x63\x8a\x12\x21\x0a\xcb\x28\x8c\xb1\xb7\x3f\xb3\x1a\x93\x73\xa7\x4f\x7a\x1e\x93\x1b\x3c\xae\xe0\x5d\x35\x47\x02\x4b\x9f\xf6\xfa\xcc\x1c\x26\x09\x8f\x71\xe9\x30\xa9\x9c\xd4\x39\x1f\xc1\xfa\xa9\xcc\xe0\xf5\x19\x05\xba\xab\x27\xe5\xd9\x3a\x78\xe8\xdb\x07\xab\x86\x30\x37\xbe\xc3\x0a\xfe\x90\xf4\x2f\xeb\xd1\x71\xc5\xdd\x47\xcb\x58\x2c\xf2\xe2\xee\xbf\x06\x97\xe7\xbb\xbb\xf9\xb5\xd0\x23\x0d\xd8\x57\x00\x00\x00\xff\xff\x81\x08\xe2\x79\xb9\x02\x00\x00")

func _20200303000002CreateTableIdentitiesSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200303000002CreateTableIdentitiesSql,
		"20200303000002-create-table-identities.sql",
	)
}

func _20200303000002CreateTableIdentitiesSql() (*asset, error) {
	bytes, err := _20200303000002CreateTableIdentitiesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200303000002-create-table-identities.sql", size: 697, mode: os.FileMode(0644), modTime: time.Unix(1583561255, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x63, 0xea, 0xb0, 0xb6, 0x5, 0x93, 0xc2, 0xa2, 0xf, 0x74, 0x48, 0x8f, 0x55, 0x5b, 0x9d, 0xd6, 0xc4, 0x1d, 0x6e, 0xec, 0x1f, 0xa4, 0xaa, 0xb9, 0xd6, 0x32, 0x41, 0x62, 0x8f, 0xaf, 0xab}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20200303000000-create-table-accounts.sql":   _20200303000000CreateTableAccountsSql,
	"20200303000002-create-table-identities.sql": _20200303000002CreateTableIdentitiesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20200303000000-create-table-accounts.sql":   &bintree{_20200303000000CreateTableAccountsSql, map[string]*bintree{}},
	"20200303000002-create-table-identities.sql": &bintree{_20200303000002CreateTableIdentitiesSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
