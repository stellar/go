// Code generated by go-bindata. DO NOT EDIT.
// sources:
// .20200309000000-empty.sql.swp (12.288kB)
// 20200309000000-empty.sql (35B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20200309000000EmptySqlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xda\x3f\x4e\xf3\x30\x18\x06\xf0\xa7\x9f\xf4\x8d\x28\x15\x5c\x20\xd0\x11\xa5\x36\xe9\x02\x3b\x42\x62\x60\x2c\x23\x52\x9a\xbe\xa4\x91\x5c\x3b\xd8\x21\xd0\x05\x6e\xc2\x0d\x38\x0e\x1b\x70\x05\x38\x00\x12\x88\xb6\x0c\x45\x54\x6c\x54\x88\xe7\xb7\xbc\xf2\x5f\x3d\x8b\x07\xcb\x1e\xe8\xe3\xc3\xa3\x78\xb7\x9b\x02\x40\x1b\x78\xb9\x3b\x3d\xe9\xb4\x0f\x70\xe3\x00\x23\x65\x31\x1a\xe7\xf9\xb9\x31\x2e\x1f\x61\xa9\xa1\x34\x62\x9b\x44\x2f\x9f\x31\x73\xb5\xb8\xa1\x7a\x5f\x67\x54\xa8\xc5\x98\xcc\x27\x49\xe1\x94\x5c\x56\x2a\x88\x6f\xca\x5c\x82\xf2\x92\xbb\x46\xfc\x24\x94\x85\x15\xaf\x4a\x5b\x8b\xb7\x99\x51\xc3\x81\x1a\x97\x85\xcf\xea\xd2\xd9\xa0\x52\x9d\x6a\xdd\xd3\x7b\x7a\x2a\x91\x71\x55\x4f\xba\xe1\xcc\x7c\x17\x86\xe8\xcf\x59\x43\x2f\xdd\x99\x9e\xd3\xce\xd6\x66\xbc\xb1\xde\x5f\x75\x20\x22\x22\x22\x22\x22\xfa\x41\x75\xd5\xc2\x35\x80\x7f\xf3\xf6\xff\x79\x6d\x7d\xaa\x44\x44\x44\x44\x44\x44\x44\xf4\x7b\x65\x43\xe0\x36\x02\x1e\xa2\xd9\xfb\xff\xc7\xfd\xff\x35\x02\x9e\x23\xe0\x29\x02\x1e\xe7\xe3\xf7\xd1\x8a\xc3\x12\x11\x11\x11\x11\x11\x11\xd1\x17\x92\x24\xde\x9e\xfd\x95\x97\x78\xdf\x5d\xd8\xc5\x9e\x7e\x05\xbc\x05\x00\x00\xff\xff\x50\x7b\xc5\xb7\x00\x30\x00\x00")

func _20200309000000EmptySqlSwpBytes() ([]byte, error) {
	return bindataRead(
		__20200309000000EmptySqlSwp,
		".20200309000000-empty.sql.swp",
	)
}

func _20200309000000EmptySqlSwp() (*asset, error) {
	bytes, err := _20200309000000EmptySqlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".20200309000000-empty.sql.swp", size: 12288, mode: os.FileMode(0644), modTime: time.Unix(1583797836, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0x6, 0x2e, 0xa2, 0x2f, 0x63, 0x6b, 0xa0, 0x62, 0x6, 0x14, 0x19, 0xdc, 0x7f, 0xb9, 0xff, 0x4b, 0xfa, 0xab, 0x90, 0xb3, 0xee, 0xe, 0x4c, 0x20, 0x5a, 0x51, 0xc4, 0x3, 0x46, 0xf0, 0x63}}
	return a, nil
}

var __20200309000000EmptySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x42\xe1\xbb\xe4\x97\xe7\x71\x71\x01\x02\x00\x00\xff\xff\x31\xb1\xd3\xf4\x23\x00\x00\x00")

func _20200309000000EmptySqlBytes() ([]byte, error) {
	return bindataRead(
		__20200309000000EmptySql,
		"20200309000000-empty.sql",
	)
}

func _20200309000000EmptySql() (*asset, error) {
	bytes, err := _20200309000000EmptySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200309000000-empty.sql", size: 35, mode: os.FileMode(0644), modTime: time.Unix(1583797756, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xf0, 0x3c, 0x38, 0x59, 0x96, 0x6c, 0xf1, 0x6b, 0xd9, 0x58, 0x83, 0x80, 0xcc, 0x8e, 0x14, 0x83, 0xba, 0x8, 0x6f, 0xa5, 0x60, 0x0, 0x35, 0x57, 0xe9, 0xfe, 0xd0, 0x1c, 0x4e, 0x62, 0xb9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".20200309000000-empty.sql.swp": _20200309000000EmptySqlSwp,
	"20200309000000-empty.sql":      _20200309000000EmptySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".20200309000000-empty.sql.swp": &bintree{_20200309000000EmptySqlSwp, map[string]*bintree{}},
	"20200309000000-empty.sql":      &bintree{_20200309000000EmptySql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
