syntax = "proto3";

package token_transfer;

import "google/protobuf/timestamp.proto";

// Import are relative to the top level directory -  `/protos`
import "ingest/asset/asset.proto";

// EventMeta message
message EventMeta {
  uint32 ledger_sequence = 1;
  google.protobuf.Timestamp closed_at = 2;
  string tx_hash = 3;
  // Index of transaction within this ledger. This is 1-indexed as per SEP-35
  uint32 transaction_index = 4;
  // Index of operation within the transaction, if it is not a fee event. This is 1-indexed as per SEP-35
  optional uint32 operation_index = 5;
  /* For a classic operation, this contract_address is the ContractID as derived from asset
     For a smart contract event, this contractId is the id of the contract emiting the core event
   */
  string contract_address = 6;
}

// The `from` and `to` fields in each of these events is the strkey representations of the different address types

message Transfer {
  string from = 1;
  string to = 2;
  asset.Asset asset = 3; // Asset can be native or issued. For custom tokens, it will be absent
  string amount = 4;
}

message Mint {
  string to = 1;
  asset.Asset asset = 2; // Asset can be native or issued. For custom tokens, it will be absent
  string amount = 3;
}

message Burn {
  string from = 1;
  asset.Asset asset = 2; // Asset can be native or issued. For custom tokens, it will be absent
  string amount = 3;
}

message Clawback {
  string from = 1;
  asset.Asset asset = 2; // Asset can be native or issued. For custom tokens, it will be absent
  string amount = 3;
}

message Fee {
  string from = 1;
  asset.Asset asset = 2; // Asset can be native or issued. For custom tokens, it will be absent
  string amount = 3;
}

message TokenTransferEvent {
  EventMeta meta = 1;
  oneof event {
    Transfer transfer = 2;
    Mint mint = 3;
    Burn burn = 4;
    Clawback clawback = 5;
    Fee fee = 6;
  }
}
