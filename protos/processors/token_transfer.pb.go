// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: protos/processors/token_transfer.proto

package processors

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for TransferType
type TransferType int32

const (
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	TransferType_CREDIT                    TransferType = 1
	TransferType_DEBIT                     TransferType = 2
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "CREDIT",
		2: "DEBIT",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED": 0,
		"CREDIT":                    1,
		"DEBIT":                     2,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_processors_token_transfer_proto_enumTypes[0].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_protos_processors_token_transfer_proto_enumTypes[0]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{0}
}

// Enum for TransferReason
type TransferReason int32

const (
	TransferReason_REASON_UNSPECIFIED   TransferReason = 0
	TransferReason_TRANSACTION_FEE      TransferReason = 1
	TransferReason_CLASSIC_OPERATION    TransferReason = 2
	TransferReason_SMART_CONTRACT_EVENT TransferReason = 3
)

// Enum value maps for TransferReason.
var (
	TransferReason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "TRANSACTION_FEE",
		2: "CLASSIC_OPERATION",
		3: "SMART_CONTRACT_EVENT",
	}
	TransferReason_value = map[string]int32{
		"REASON_UNSPECIFIED":   0,
		"TRANSACTION_FEE":      1,
		"CLASSIC_OPERATION":    2,
		"SMART_CONTRACT_EVENT": 3,
	}
)

func (x TransferReason) Enum() *TransferReason {
	p := new(TransferReason)
	*p = x
	return p
}

func (x TransferReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferReason) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_processors_token_transfer_proto_enumTypes[1].Descriptor()
}

func (TransferReason) Type() protoreflect.EnumType {
	return &file_protos_processors_token_transfer_proto_enumTypes[1]
}

func (x TransferReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferReason.Descriptor instead.
func (TransferReason) EnumDescriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{1}
}

// TokenTransferDetails represents the specific details for each type of transfer event
type TokenTransferDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Details:
	//
	//	*TokenTransferDetails_TransactionFee
	//	*TokenTransferDetails_CreateAccount
	//	*TokenTransferDetails_SimplePayment
	//	*TokenTransferDetails_AccountMerge
	//	*TokenTransferDetails_Clawback
	//	*TokenTransferDetails_CreateClaimableBalance
	//	*TokenTransferDetails_ClaimClaimableBalance
	//	*TokenTransferDetails_ClawbackClaimableBalance
	//	*TokenTransferDetails_LiquidityPoolDeposit
	//	*TokenTransferDetails_LiquidityPoolWithdraw
	//	*TokenTransferDetails_ManageOffer
	//	*TokenTransferDetails_PathPayment
	//	*TokenTransferDetails_SmartContractEvent
	Details       isTokenTransferDetails_Details `protobuf_oneof:"details"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenTransferDetails) Reset() {
	*x = TokenTransferDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenTransferDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransferDetails) ProtoMessage() {}

func (x *TokenTransferDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransferDetails.ProtoReflect.Descriptor instead.
func (*TokenTransferDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *TokenTransferDetails) GetDetails() isTokenTransferDetails_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TokenTransferDetails) GetTransactionFee() *TransactionFeeDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_TransactionFee); ok {
			return x.TransactionFee
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetCreateAccount() *CreateAccountDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_CreateAccount); ok {
			return x.CreateAccount
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetSimplePayment() *SimplePaymentDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_SimplePayment); ok {
			return x.SimplePayment
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetAccountMerge() *AccountMergeDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_AccountMerge); ok {
			return x.AccountMerge
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetClawback() *ClawbackDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_Clawback); ok {
			return x.Clawback
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetCreateClaimableBalance() *CreateClaimableBalanceDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_CreateClaimableBalance); ok {
			return x.CreateClaimableBalance
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetClaimClaimableBalance() *ClaimClaimableBalanceDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_ClaimClaimableBalance); ok {
			return x.ClaimClaimableBalance
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetClawbackClaimableBalance() *ClawbackClaimableBalanceDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_ClawbackClaimableBalance); ok {
			return x.ClawbackClaimableBalance
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetLiquidityPoolDeposit() *LiquidityPoolDepositDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_LiquidityPoolDeposit); ok {
			return x.LiquidityPoolDeposit
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetLiquidityPoolWithdraw() *LiquidityPoolWithdrawDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_LiquidityPoolWithdraw); ok {
			return x.LiquidityPoolWithdraw
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetManageOffer() *ManageOfferDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_ManageOffer); ok {
			return x.ManageOffer
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetPathPayment() *PathPaymentDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_PathPayment); ok {
			return x.PathPayment
		}
	}
	return nil
}

func (x *TokenTransferDetails) GetSmartContractEvent() *SmartContractEventDetails {
	if x != nil {
		if x, ok := x.Details.(*TokenTransferDetails_SmartContractEvent); ok {
			return x.SmartContractEvent
		}
	}
	return nil
}

type isTokenTransferDetails_Details interface {
	isTokenTransferDetails_Details()
}

type TokenTransferDetails_TransactionFee struct {
	TransactionFee *TransactionFeeDetails `protobuf:"bytes,1,opt,name=transaction_fee,json=transactionFee,proto3,oneof"`
}

type TokenTransferDetails_CreateAccount struct {
	CreateAccount *CreateAccountDetails `protobuf:"bytes,2,opt,name=create_account,json=createAccount,proto3,oneof"`
}

type TokenTransferDetails_SimplePayment struct {
	SimplePayment *SimplePaymentDetails `protobuf:"bytes,3,opt,name=simple_payment,json=simplePayment,proto3,oneof"`
}

type TokenTransferDetails_AccountMerge struct {
	AccountMerge *AccountMergeDetails `protobuf:"bytes,4,opt,name=account_merge,json=accountMerge,proto3,oneof"`
}

type TokenTransferDetails_Clawback struct {
	Clawback *ClawbackDetails `protobuf:"bytes,5,opt,name=clawback,proto3,oneof"`
}

type TokenTransferDetails_CreateClaimableBalance struct {
	CreateClaimableBalance *CreateClaimableBalanceDetails `protobuf:"bytes,6,opt,name=create_claimable_balance,json=createClaimableBalance,proto3,oneof"`
}

type TokenTransferDetails_ClaimClaimableBalance struct {
	ClaimClaimableBalance *ClaimClaimableBalanceDetails `protobuf:"bytes,7,opt,name=claim_claimable_balance,json=claimClaimableBalance,proto3,oneof"`
}

type TokenTransferDetails_ClawbackClaimableBalance struct {
	ClawbackClaimableBalance *ClawbackClaimableBalanceDetails `protobuf:"bytes,8,opt,name=clawback_claimable_balance,json=clawbackClaimableBalance,proto3,oneof"`
}

type TokenTransferDetails_LiquidityPoolDeposit struct {
	LiquidityPoolDeposit *LiquidityPoolDepositDetails `protobuf:"bytes,9,opt,name=liquidity_pool_deposit,json=liquidityPoolDeposit,proto3,oneof"`
}

type TokenTransferDetails_LiquidityPoolWithdraw struct {
	LiquidityPoolWithdraw *LiquidityPoolWithdrawDetails `protobuf:"bytes,10,opt,name=liquidity_pool_withdraw,json=liquidityPoolWithdraw,proto3,oneof"`
}

type TokenTransferDetails_ManageOffer struct {
	ManageOffer *ManageOfferDetails `protobuf:"bytes,11,opt,name=manage_offer,json=manageOffer,proto3,oneof"`
}

type TokenTransferDetails_PathPayment struct {
	PathPayment *PathPaymentDetails `protobuf:"bytes,12,opt,name=path_payment,json=pathPayment,proto3,oneof"`
}

type TokenTransferDetails_SmartContractEvent struct {
	SmartContractEvent *SmartContractEventDetails `protobuf:"bytes,13,opt,name=smart_contract_event,json=smartContractEvent,proto3,oneof"`
}

func (*TokenTransferDetails_TransactionFee) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_CreateAccount) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_SimplePayment) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_AccountMerge) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_Clawback) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_CreateClaimableBalance) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_ClaimClaimableBalance) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_ClawbackClaimableBalance) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_LiquidityPoolDeposit) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_LiquidityPoolWithdraw) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_ManageOffer) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_PathPayment) isTokenTransferDetails_Details() {}

func (*TokenTransferDetails_SmartContractEvent) isTokenTransferDetails_Details() {}

// Main TokenTransferEvent message
type TokenTransferEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityId      string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`                                                          // Account, Trustline, or Smart Contract ID
	Asset         string                 `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`                                                                                // Asset in the transfer (e.g., XLM, custom tokens)
	Amount        float64                `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`                                                                            // Positive quantity transferred
	TransferType  TransferType           `protobuf:"varint,4,opt,name=transfer_type,json=transferType,proto3,enum=processors.token_transfer.TransferType" json:"transfer_type,omitempty"` // Credit or Debit
	Reason        TransferReason         `protobuf:"varint,5,opt,name=reason,proto3,enum=processors.token_transfer.TransferReason" json:"reason,omitempty"`                               // Transaction Fee, Classic Operation, Smart Contract Event
	Details       *TokenTransferDetails  `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`                                                                            // Specific details about the transfer
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenTransferEvent) Reset() {
	*x = TokenTransferEvent{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenTransferEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransferEvent) ProtoMessage() {}

func (x *TokenTransferEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransferEvent.ProtoReflect.Descriptor instead.
func (*TokenTransferEvent) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *TokenTransferEvent) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *TokenTransferEvent) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TokenTransferEvent) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenTransferEvent) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *TokenTransferEvent) GetReason() TransferReason {
	if x != nil {
		return x.Reason
	}
	return TransferReason_REASON_UNSPECIFIED
}

func (x *TokenTransferEvent) GetDetails() *TokenTransferDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// Details for transaction fees
type TransactionFeeDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"` // Account paying the fee
	Txhash        string                 `protobuf:"bytes,2,opt,name=txhash,proto3" json:"txhash,omitempty"`                                    // Transaction hash
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionFeeDetails) Reset() {
	*x = TransactionFeeDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionFeeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFeeDetails) ProtoMessage() {}

func (x *TransactionFeeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFeeDetails.ProtoReflect.Descriptor instead.
func (*TransactionFeeDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionFeeDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *TransactionFeeDetails) GetTxhash() string {
	if x != nil {
		return x.Txhash
	}
	return ""
}

// Details for CreateAccount operation
type CreateAccountDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount      string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	DestinationAccount string                 `protobuf:"bytes,2,opt,name=destination_account,json=destinationAccount,proto3" json:"destination_account,omitempty"`
	StartingBalance    float64                `protobuf:"fixed64,3,opt,name=starting_balance,json=startingBalance,proto3" json:"starting_balance,omitempty"` // Starting balance of the new account
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateAccountDetails) Reset() {
	*x = CreateAccountDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountDetails) ProtoMessage() {}

func (x *CreateAccountDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountDetails.ProtoReflect.Descriptor instead.
func (*CreateAccountDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAccountDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *CreateAccountDetails) GetDestinationAccount() string {
	if x != nil {
		return x.DestinationAccount
	}
	return ""
}

func (x *CreateAccountDetails) GetStartingBalance() float64 {
	if x != nil {
		return x.StartingBalance
	}
	return 0
}

// Details for Simple Payment operation
type SimplePaymentDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount      string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	DestinationAccount string                 `protobuf:"bytes,2,opt,name=destination_account,json=destinationAccount,proto3" json:"destination_account,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SimplePaymentDetails) Reset() {
	*x = SimplePaymentDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimplePaymentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplePaymentDetails) ProtoMessage() {}

func (x *SimplePaymentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplePaymentDetails.ProtoReflect.Descriptor instead.
func (*SimplePaymentDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *SimplePaymentDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *SimplePaymentDetails) GetDestinationAccount() string {
	if x != nil {
		return x.DestinationAccount
	}
	return ""
}

// Details for Account Merge operation
type AccountMergeDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount      string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	DestinationAccount string                 `protobuf:"bytes,2,opt,name=destination_account,json=destinationAccount,proto3" json:"destination_account,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AccountMergeDetails) Reset() {
	*x = AccountMergeDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountMergeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMergeDetails) ProtoMessage() {}

func (x *AccountMergeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMergeDetails.ProtoReflect.Descriptor instead.
func (*AccountMergeDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *AccountMergeDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *AccountMergeDetails) GetDestinationAccount() string {
	if x != nil {
		return x.DestinationAccount
	}
	return ""
}

// Details for Clawback operation
type ClawbackDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount      string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	DestinationAccount string                 `protobuf:"bytes,2,opt,name=destination_account,json=destinationAccount,proto3" json:"destination_account,omitempty"`
	Amount             float64                `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClawbackDetails) Reset() {
	*x = ClawbackDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClawbackDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClawbackDetails) ProtoMessage() {}

func (x *ClawbackDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClawbackDetails.ProtoReflect.Descriptor instead.
func (*ClawbackDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *ClawbackDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *ClawbackDetails) GetDestinationAccount() string {
	if x != nil {
		return x.DestinationAccount
	}
	return ""
}

func (x *ClawbackDetails) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Details for Create Claimable Balance operation
type CreateClaimableBalanceDetails struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount       string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	DestinationAccounts []string               `protobuf:"bytes,2,rep,name=destination_accounts,json=destinationAccounts,proto3" json:"destination_accounts,omitempty"` // Multiple potential claimants
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateClaimableBalanceDetails) Reset() {
	*x = CreateClaimableBalanceDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClaimableBalanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClaimableBalanceDetails) ProtoMessage() {}

func (x *CreateClaimableBalanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClaimableBalanceDetails.ProtoReflect.Descriptor instead.
func (*CreateClaimableBalanceDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *CreateClaimableBalanceDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *CreateClaimableBalanceDetails) GetDestinationAccounts() []string {
	if x != nil {
		return x.DestinationAccounts
	}
	return nil
}

// Details for Claim Claimable Balance operation
type ClaimClaimableBalanceDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                      // Account claiming the balance
	BalanceId     string                 `protobuf:"bytes,2,opt,name=balance_id,json=balanceId,proto3" json:"balance_id,omitempty"` // ID of the claimable balance
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClaimClaimableBalanceDetails) Reset() {
	*x = ClaimClaimableBalanceDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClaimClaimableBalanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimClaimableBalanceDetails) ProtoMessage() {}

func (x *ClaimClaimableBalanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimClaimableBalanceDetails.ProtoReflect.Descriptor instead.
func (*ClaimClaimableBalanceDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *ClaimClaimableBalanceDetails) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ClaimClaimableBalanceDetails) GetBalanceId() string {
	if x != nil {
		return x.BalanceId
	}
	return ""
}

// Details for Clawback Claimable Balance operation
type ClawbackClaimableBalanceDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	BalanceId     string                 `protobuf:"bytes,2,opt,name=balance_id,json=balanceId,proto3" json:"balance_id,omitempty"` // ID of the clawed back balance
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClawbackClaimableBalanceDetails) Reset() {
	*x = ClawbackClaimableBalanceDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClawbackClaimableBalanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClawbackClaimableBalanceDetails) ProtoMessage() {}

func (x *ClawbackClaimableBalanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClawbackClaimableBalanceDetails.ProtoReflect.Descriptor instead.
func (*ClawbackClaimableBalanceDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{9}
}

func (x *ClawbackClaimableBalanceDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *ClawbackClaimableBalanceDetails) GetBalanceId() string {
	if x != nil {
		return x.BalanceId
	}
	return ""
}

// Details for Liquidity Pool Deposit operation
type LiquidityPoolDepositDetails struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount   string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	LiquidityPoolId string                 `protobuf:"bytes,2,opt,name=liquidity_pool_id,json=liquidityPoolId,proto3" json:"liquidity_pool_id,omitempty"`
	AmountDeposited float64                `protobuf:"fixed64,3,opt,name=amount_deposited,json=amountDeposited,proto3" json:"amount_deposited,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LiquidityPoolDepositDetails) Reset() {
	*x = LiquidityPoolDepositDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiquidityPoolDepositDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPoolDepositDetails) ProtoMessage() {}

func (x *LiquidityPoolDepositDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPoolDepositDetails.ProtoReflect.Descriptor instead.
func (*LiquidityPoolDepositDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{10}
}

func (x *LiquidityPoolDepositDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *LiquidityPoolDepositDetails) GetLiquidityPoolId() string {
	if x != nil {
		return x.LiquidityPoolId
	}
	return ""
}

func (x *LiquidityPoolDepositDetails) GetAmountDeposited() float64 {
	if x != nil {
		return x.AmountDeposited
	}
	return 0
}

// Details for Liquidity Pool Withdraw operation
type LiquidityPoolWithdrawDetails struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount   string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	LiquidityPoolId string                 `protobuf:"bytes,2,opt,name=liquidity_pool_id,json=liquidityPoolId,proto3" json:"liquidity_pool_id,omitempty"`
	AmountWithdrawn float64                `protobuf:"fixed64,3,opt,name=amount_withdrawn,json=amountWithdrawn,proto3" json:"amount_withdrawn,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LiquidityPoolWithdrawDetails) Reset() {
	*x = LiquidityPoolWithdrawDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiquidityPoolWithdrawDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPoolWithdrawDetails) ProtoMessage() {}

func (x *LiquidityPoolWithdrawDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPoolWithdrawDetails.ProtoReflect.Descriptor instead.
func (*LiquidityPoolWithdrawDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{11}
}

func (x *LiquidityPoolWithdrawDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *LiquidityPoolWithdrawDetails) GetLiquidityPoolId() string {
	if x != nil {
		return x.LiquidityPoolId
	}
	return ""
}

func (x *LiquidityPoolWithdrawDetails) GetAmountWithdrawn() float64 {
	if x != nil {
		return x.AmountWithdrawn
	}
	return 0
}

// Details for Manage Offer operation
type ManageOfferDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	OfferId       string                 `protobuf:"bytes,2,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	AssetSold     string                 `protobuf:"bytes,3,opt,name=asset_sold,json=assetSold,proto3" json:"asset_sold,omitempty"`
	AssetBought   string                 `protobuf:"bytes,4,opt,name=asset_bought,json=assetBought,proto3" json:"asset_bought,omitempty"`
	AmountSold    float64                `protobuf:"fixed64,5,opt,name=amount_sold,json=amountSold,proto3" json:"amount_sold,omitempty"`
	AmountBought  float64                `protobuf:"fixed64,6,opt,name=amount_bought,json=amountBought,proto3" json:"amount_bought,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManageOfferDetails) Reset() {
	*x = ManageOfferDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManageOfferDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageOfferDetails) ProtoMessage() {}

func (x *ManageOfferDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageOfferDetails.ProtoReflect.Descriptor instead.
func (*ManageOfferDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{12}
}

func (x *ManageOfferDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *ManageOfferDetails) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *ManageOfferDetails) GetAssetSold() string {
	if x != nil {
		return x.AssetSold
	}
	return ""
}

func (x *ManageOfferDetails) GetAssetBought() string {
	if x != nil {
		return x.AssetBought
	}
	return ""
}

func (x *ManageOfferDetails) GetAmountSold() float64 {
	if x != nil {
		return x.AmountSold
	}
	return 0
}

func (x *ManageOfferDetails) GetAmountBought() float64 {
	if x != nil {
		return x.AmountBought
	}
	return 0
}

// Details for Path Payment operation (Strict Send and Receive)
type PathPaymentDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceAccount      string                 `protobuf:"bytes,1,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	DestinationAccount string                 `protobuf:"bytes,2,opt,name=destination_account,json=destinationAccount,proto3" json:"destination_account,omitempty"`
	AssetSent          string                 `protobuf:"bytes,3,opt,name=asset_sent,json=assetSent,proto3" json:"asset_sent,omitempty"`
	AmountSent         float64                `protobuf:"fixed64,4,opt,name=amount_sent,json=amountSent,proto3" json:"amount_sent,omitempty"`
	AssetReceived      string                 `protobuf:"bytes,5,opt,name=asset_received,json=assetReceived,proto3" json:"asset_received,omitempty"`
	AmountReceived     float64                `protobuf:"fixed64,6,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PathPaymentDetails) Reset() {
	*x = PathPaymentDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathPaymentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathPaymentDetails) ProtoMessage() {}

func (x *PathPaymentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathPaymentDetails.ProtoReflect.Descriptor instead.
func (*PathPaymentDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{13}
}

func (x *PathPaymentDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *PathPaymentDetails) GetDestinationAccount() string {
	if x != nil {
		return x.DestinationAccount
	}
	return ""
}

func (x *PathPaymentDetails) GetAssetSent() string {
	if x != nil {
		return x.AssetSent
	}
	return ""
}

func (x *PathPaymentDetails) GetAmountSent() float64 {
	if x != nil {
		return x.AmountSent
	}
	return 0
}

func (x *PathPaymentDetails) GetAssetReceived() string {
	if x != nil {
		return x.AssetReceived
	}
	return ""
}

func (x *PathPaymentDetails) GetAmountReceived() float64 {
	if x != nil {
		return x.AmountReceived
	}
	return 0
}

// Details for Smart Contract events
type SmartContractEventDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ContractId         string                 `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	EventType          string                 `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"` // Transfer, Mint, Burn, Clawback
	SourceAccount      string                 `protobuf:"bytes,3,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	DestinationAccount string                 `protobuf:"bytes,4,opt,name=destination_account,json=destinationAccount,proto3" json:"destination_account,omitempty"` // Optional for events like Mint/Burn
	Amount             float64                `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SmartContractEventDetails) Reset() {
	*x = SmartContractEventDetails{}
	mi := &file_protos_processors_token_transfer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmartContractEventDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartContractEventDetails) ProtoMessage() {}

func (x *SmartContractEventDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_processors_token_transfer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartContractEventDetails.ProtoReflect.Descriptor instead.
func (*SmartContractEventDetails) Descriptor() ([]byte, []int) {
	return file_protos_processors_token_transfer_proto_rawDescGZIP(), []int{14}
}

func (x *SmartContractEventDetails) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *SmartContractEventDetails) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *SmartContractEventDetails) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *SmartContractEventDetails) GetDestinationAccount() string {
	if x != nil {
		return x.DestinationAccount
	}
	return ""
}

func (x *SmartContractEventDetails) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_protos_processors_token_transfer_proto protoreflect.FileDescriptor

var file_protos_processors_token_transfer_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x22, 0xad, 0x0a, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x74,
	0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x16, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x17, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x15, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x1a, 0x63, 0x6c, 0x61, 0x77, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6c, 0x61, 0x77, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x16, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x71, 0x0a, 0x17, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x15, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x52, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x68,
	0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x56, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x14, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x1c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1f,
	0x43, 0x6c, 0x61, 0x77, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x75,
	0x67, 0x68, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x2a, 0x44, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x45, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x3b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_processors_token_transfer_proto_rawDescOnce sync.Once
	file_protos_processors_token_transfer_proto_rawDescData = file_protos_processors_token_transfer_proto_rawDesc
)

func file_protos_processors_token_transfer_proto_rawDescGZIP() []byte {
	file_protos_processors_token_transfer_proto_rawDescOnce.Do(func() {
		file_protos_processors_token_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_processors_token_transfer_proto_rawDescData)
	})
	return file_protos_processors_token_transfer_proto_rawDescData
}

var file_protos_processors_token_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_processors_token_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_protos_processors_token_transfer_proto_goTypes = []any{
	(TransferType)(0),                       // 0: processors.token_transfer.TransferType
	(TransferReason)(0),                     // 1: processors.token_transfer.TransferReason
	(*TokenTransferDetails)(nil),            // 2: processors.token_transfer.TokenTransferDetails
	(*TokenTransferEvent)(nil),              // 3: processors.token_transfer.TokenTransferEvent
	(*TransactionFeeDetails)(nil),           // 4: processors.token_transfer.TransactionFeeDetails
	(*CreateAccountDetails)(nil),            // 5: processors.token_transfer.CreateAccountDetails
	(*SimplePaymentDetails)(nil),            // 6: processors.token_transfer.SimplePaymentDetails
	(*AccountMergeDetails)(nil),             // 7: processors.token_transfer.AccountMergeDetails
	(*ClawbackDetails)(nil),                 // 8: processors.token_transfer.ClawbackDetails
	(*CreateClaimableBalanceDetails)(nil),   // 9: processors.token_transfer.CreateClaimableBalanceDetails
	(*ClaimClaimableBalanceDetails)(nil),    // 10: processors.token_transfer.ClaimClaimableBalanceDetails
	(*ClawbackClaimableBalanceDetails)(nil), // 11: processors.token_transfer.ClawbackClaimableBalanceDetails
	(*LiquidityPoolDepositDetails)(nil),     // 12: processors.token_transfer.LiquidityPoolDepositDetails
	(*LiquidityPoolWithdrawDetails)(nil),    // 13: processors.token_transfer.LiquidityPoolWithdrawDetails
	(*ManageOfferDetails)(nil),              // 14: processors.token_transfer.ManageOfferDetails
	(*PathPaymentDetails)(nil),              // 15: processors.token_transfer.PathPaymentDetails
	(*SmartContractEventDetails)(nil),       // 16: processors.token_transfer.SmartContractEventDetails
}
var file_protos_processors_token_transfer_proto_depIdxs = []int32{
	4,  // 0: processors.token_transfer.TokenTransferDetails.transaction_fee:type_name -> processors.token_transfer.TransactionFeeDetails
	5,  // 1: processors.token_transfer.TokenTransferDetails.create_account:type_name -> processors.token_transfer.CreateAccountDetails
	6,  // 2: processors.token_transfer.TokenTransferDetails.simple_payment:type_name -> processors.token_transfer.SimplePaymentDetails
	7,  // 3: processors.token_transfer.TokenTransferDetails.account_merge:type_name -> processors.token_transfer.AccountMergeDetails
	8,  // 4: processors.token_transfer.TokenTransferDetails.clawback:type_name -> processors.token_transfer.ClawbackDetails
	9,  // 5: processors.token_transfer.TokenTransferDetails.create_claimable_balance:type_name -> processors.token_transfer.CreateClaimableBalanceDetails
	10, // 6: processors.token_transfer.TokenTransferDetails.claim_claimable_balance:type_name -> processors.token_transfer.ClaimClaimableBalanceDetails
	11, // 7: processors.token_transfer.TokenTransferDetails.clawback_claimable_balance:type_name -> processors.token_transfer.ClawbackClaimableBalanceDetails
	12, // 8: processors.token_transfer.TokenTransferDetails.liquidity_pool_deposit:type_name -> processors.token_transfer.LiquidityPoolDepositDetails
	13, // 9: processors.token_transfer.TokenTransferDetails.liquidity_pool_withdraw:type_name -> processors.token_transfer.LiquidityPoolWithdrawDetails
	14, // 10: processors.token_transfer.TokenTransferDetails.manage_offer:type_name -> processors.token_transfer.ManageOfferDetails
	15, // 11: processors.token_transfer.TokenTransferDetails.path_payment:type_name -> processors.token_transfer.PathPaymentDetails
	16, // 12: processors.token_transfer.TokenTransferDetails.smart_contract_event:type_name -> processors.token_transfer.SmartContractEventDetails
	0,  // 13: processors.token_transfer.TokenTransferEvent.transfer_type:type_name -> processors.token_transfer.TransferType
	1,  // 14: processors.token_transfer.TokenTransferEvent.reason:type_name -> processors.token_transfer.TransferReason
	2,  // 15: processors.token_transfer.TokenTransferEvent.details:type_name -> processors.token_transfer.TokenTransferDetails
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_protos_processors_token_transfer_proto_init() }
func file_protos_processors_token_transfer_proto_init() {
	if File_protos_processors_token_transfer_proto != nil {
		return
	}
	file_protos_processors_token_transfer_proto_msgTypes[0].OneofWrappers = []any{
		(*TokenTransferDetails_TransactionFee)(nil),
		(*TokenTransferDetails_CreateAccount)(nil),
		(*TokenTransferDetails_SimplePayment)(nil),
		(*TokenTransferDetails_AccountMerge)(nil),
		(*TokenTransferDetails_Clawback)(nil),
		(*TokenTransferDetails_CreateClaimableBalance)(nil),
		(*TokenTransferDetails_ClaimClaimableBalance)(nil),
		(*TokenTransferDetails_ClawbackClaimableBalance)(nil),
		(*TokenTransferDetails_LiquidityPoolDeposit)(nil),
		(*TokenTransferDetails_LiquidityPoolWithdraw)(nil),
		(*TokenTransferDetails_ManageOffer)(nil),
		(*TokenTransferDetails_PathPayment)(nil),
		(*TokenTransferDetails_SmartContractEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_processors_token_transfer_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_processors_token_transfer_proto_goTypes,
		DependencyIndexes: file_protos_processors_token_transfer_proto_depIdxs,
		EnumInfos:         file_protos_processors_token_transfer_proto_enumTypes,
		MessageInfos:      file_protos_processors_token_transfer_proto_msgTypes,
	}.Build()
	File_protos_processors_token_transfer_proto = out.File
	file_protos_processors_token_transfer_proto_rawDesc = nil
	file_protos_processors_token_transfer_proto_goTypes = nil
	file_protos_processors_token_transfer_proto_depIdxs = nil
}
