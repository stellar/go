version: 2.1

#----------------------------------------------------------------------------#
# Commands are used as building blocks for jobs, which run through workflows #
#----------------------------------------------------------------------------#

commands:
  # gofmt performs checks on the entire codebase to ensure everything is formated
  # with the gofmt tool.
  gofmt:
    steps:
      - checkout
      - run:
          name: Run gofmt
          command: ./gofmt.sh

  # gogenerate validates that any generated code has been updated if needed.
  gogenerate:
    steps:
      - checkout
      - run:
          name: Check generated code
          command: ./gogenerate.sh

  # govet does govet checks in the entire codebase.
  govet:
    steps:
      - checkout
      - run:
          name: Run govet
          command: ./govet.sh

  # staticcheck runs staticcheck in the entire codebase.
  staticcheck:
    steps:
      - checkout
      - run:
          name: Run staticcheck
          command: ./staticcheck.sh

  # check_deprecations ensures a release is actually removing deprecated fields
  # that were supposed to be discontinued in said release.
  check_deprecations:
    steps:
      - run:
          name: Run deprecation tests when on a tagged commit
          command: |
            if [ "$CIRCLE_TAG" != "" ]; then
              # Negate the result so process exits with 1 if anything found
              echo "Searching for \"action needed\" tags..."
              ! egrep -irn -A 1 --include=*.go "Action.+needed.+in.+release:.+$CIRCLE_TAG" ./
            fi

  # install_go_deps installs the go dependencies of the project.
  install_go_deps:
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
      - run:
          name: Download dependencies
          command: |
            go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

  # check_go_deps validates that the dependencies are expected.
  check_go_deps:
    steps:
      - checkout
      - run:
          name: Check dependencies
          command: ./gomod.sh

  check_ingest_state:
    steps:
      - run:
          name: Getting latest checkpoint ledger
          command: |
            export LATEST_LEDGER=`curl -s http://history.stellar.org/prd/core-live/core_live_001/.well-known/stellar-history.json | jq -r '.currentLedger'`
            echo $LATEST_LEDGER # For debug
            echo "export LATEST_LEDGER=$LATEST_LEDGER" >> $BASH_ENV # Persist between steps
      - run:
          name: Dump state using ingest
          command: go run -v ./exp/tools/dump-ledger-state/
      - run:
          name: Init stellar-core DB
          command: stellar-core --conf ./exp/tools/dump-ledger-state/stellar-core.cfg new-db
      - run:
          name: Catchup core
          command: stellar-core --conf ./exp/tools/dump-ledger-state/stellar-core.cfg catchup $LATEST_LEDGER/1
      - run:
          name: Dump stellar-core DB
          command: ./exp/tools/dump-ledger-state/dump_core_db.sh
      - run:
          name: Compare state dumps
          command: ./exp/tools/dump-ledger-state/diff_test.sh

  # test_packages performs tests on all packages of the monorepo.
  test_packages:
    steps:
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for postgres
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run package tests
          environment:
            # When running on Docker in Circle, Go thinks there are 36 CPUs
            # which means the default number of parallel build processes will be 36
            # but using 36 build processes can lead to OOM errors
            # because according to https://circleci.com/docs/2.0/configuration-reference/#resource_class ,
            # the default Docker container only has 2 CPUs available.
            # That is why we explicitly specify -p=4 to reduce the number of parallel build processes
            GOFLAGS: -p=4
          command: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

  # build_packages creates the project's artifacts.
  build_packages:
    steps:
      - run:
          name: Build release artifacts
          command: go run ./support/scripts/build_release_artifacts/main.go

  # send_coverage_report sends coverage report to codecov.io
  send_coverage_report:
    steps:
      - run:
          name: Send report to codecov.io
          command: bash <(curl -s https://codecov.io/bash)

#-----------------------------------------------------------------------------#
# Jobs use the commands to accomplish a given task, and run through workflows #
#-----------------------------------------------------------------------------#

jobs:
  # check_code_1_14 performs code checks using Go 1.14.
  check_code_1_14:
    working_directory: /go/src/github.com/stellar/go
    docker:
      - image: circleci/golang:1.14-stretch
    steps:
      - install_go_deps
      - check_go_deps
      - gofmt
      - gogenerate
      - govet
      - staticcheck
      - build_packages

  # test_code_1_13 performs all package tests using Go 1.13.
  test_code_1_13:
    working_directory: /go/src/github.com/stellar/go
    docker:
      - image: circleci/golang:1.13-stretch
        environment:
          GO111MODULE: "on"
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: circleci
          PGDATABASE: circle_test
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: circleci
    steps:
      - install_go_deps
      - test_packages

  # test_code_1_13_postgres10 performs all package tests using Go 1.13 and Postgres 10.
  test_code_1_13_postgres10:
    working_directory: /go/src/github.com/stellar/go
    docker:
      - image: circleci/golang:1.13-stretch
        environment:
          GO111MODULE: "on"
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: circleci
          PGDATABASE: circle_test
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
      - image: circleci/postgres:10-alpine-ram
        environment:
          POSTGRES_USER: circleci
      - image: circleci/redis:5.0-alpine
    steps:
      - install_go_deps
      - test_packages

  # test_code_1_14 performs all package tests using Go 1.14.
  test_code_1_14:
    working_directory: /go/src/github.com/stellar/go
    docker:
      - image: circleci/golang:1.14-stretch
        environment:
          GO111MODULE: "on"
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: circleci
          PGDATABASE: circle_test
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: circleci
    steps:
      - install_go_deps
      - test_packages

  # test_code_1_14 performs all package tests using Go 1.14 and Postgres 10.
  test_code_1_14_postgres10:
    working_directory: /go/src/github.com/stellar/go
    docker:
      - image: circleci/golang:1.14-stretch
        environment:
          GO111MODULE: "on"
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: circleci
          PGDATABASE: circle_test
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
      - image: circleci/postgres:10-alpine-ram
        environment:
          POSTGRES_USER: circleci
      - image: circleci/redis:5.0-alpine
    steps:
      - install_go_deps
      - test_packages
      - send_coverage_report

  # publish_artifacts builds and uploads artifacts to any tagged commit.
  #
  # NOTE: this commands relies on an env var called GITHUB_TOKEN which is a
  # GH OAUTH token with `repo` access.
  publish_artifacts:
    working_directory: /go/src/github.com/stellar/go
    docker:
      - image: circleci/golang:1.14-stretch
    steps:
      - check_deprecations
      - install_go_deps
      - check_go_deps
      - build_packages
      - attach_workspace:
          at: ./dist
      - run:
          name: "Publish release on GitHub"
          command: |
            if [ "$(ls -A ./dist)" ]
            then
              go get github.com/tcnksm/ghr
              ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} ./dist/
            else
                echo "No files found in ./dist. No binaries to publish for ${CIRCLE_TAG}."
            fi

  publish_state_diff_docker_image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and Push Docker image
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker build --no-cache -f exp/tools/dump-ledger-state/Dockerfile --build-arg GITCOMMIT=$CIRCLE_SHA1 -t stellar/ledger-state-diff:$CIRCLE_SHA1 -t stellar/ledger-state-diff:latest .
            docker push stellar/ledger-state-diff:$CIRCLE_SHA1
            docker push stellar/ledger-state-diff:latest

  publish_horizon_docker_image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and Push Docker image
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            # CIRCLE_TAG will be prefixed by "horizon-v", here we build the horizon docker image and tag it with stellar/horizon:$VERSION
            # where version is CIRCLE_TAG without the "horizon-v" prefix
            VERSION=${CIRCLE_TAG#horizon-v}
            docker build -f services/horizon/docker/Dockerfile -t stellar/horizon:$VERSION .
            docker push stellar/horizon:$VERSION

  publish_latest_horizon_docker_image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and Push Docker image
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker build -f services/horizon/docker/Dockerfile -t stellar/horizon:latest .
            docker push stellar/horizon:latest

#-------------------------------------------------------------------------#
# Workflows orchestrate jobs and make sure they run in the right sequence #
#-------------------------------------------------------------------------#

workflows:
  version: 2

  check_code_and_test:
    jobs:
      - check_code_1_14
      - test_code_1_13
      - test_code_1_13_postgres10
      - test_code_1_14
      - test_code_1_14_postgres10
      - publish_state_diff_docker_image:
          filters:
              branches:
                only:
                  - master

  build_and_deploy:
    jobs:
      - publish_artifacts:
          filters:
              tags:
                ignore: snapshots
              branches:
                ignore: /.*/
      - publish_horizon_docker_image:
          filters:
              tags:
                only: /^horizon-v.*/
              branches:
                ignore: /.*/
      - hold: # <<< A job that will require manual approval in the CircleCI web application.
          filters:
              tags:
                only: /^horizon-v.*/
              branches:
                ignore: /.*/
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          requires: # We only run the "hold" job when publish_horizon_docker_image has succeeded
           - publish_horizon_docker_image
      - publish_latest_horizon_docker_image:
          filters:
              tags:
                only: /^horizon-v.*/
              branches:
                ignore: /.*/
          # Pushing stellar/horizon:latest to docker hub requires manual approval
          requires:
            - hold
